Index: processes/runthrough/runthrough.py
===================================================================
--- processes/runthrough/runthrough.py	(revision Shelved Version)
+++ processes/runthrough/runthrough.py	(revision Shelved Version)
@@ -0,0 +1,25 @@
+# coding=utf-8
+import logging
+from typing import Set
+
+import pywinauto.timings
+
+from _common import PuppetMaster
+
+log = logging.getLogger(__name__)
+# TODO: Rework process
+
+default_wait = 15
+
+
+def Misc_Issue_form_init(self: PuppetMaster.Puppet):
+	app = self.app
+
+
+def run(self: PuppetMaster.Puppet, encountered_forms: Set[str]):
+	form_dict = {'Units': Units_form_init, 'Service Order Lines': SRO_Lines_form_init,
+				 'SRO Operations': SRO_Operations_form_init, 'SRO Transactions': SRO_Transactions_form_init,
+				 'Miscellaneous Issue': Misc_Issue_form_init}
+	pywinauto.timings.Timings.Slow()
+	for form in encountered_forms:
+		form_dict[form](self)
Index: .idea/dataSources.xml
===================================================================
--- .idea/dataSources.xml	(revision Shelved Version)
+++ .idea/dataSources.xml	(revision Shelved Version)
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="DataSourceManagerImpl" format="xml" multifile-model="true">
+    <data-source source="LOCAL" name="MfgTraveler@172.16.4.27" read-only="true" uuid="94484664-fd08-47d2-9dfa-66ccb3761007">
+      <driver-ref>sqlserver.ms</driver-ref>
+      <synchronize>true</synchronize>
+      <auto-commit>false</auto-commit>
+      <jdbc-driver>com.microsoft.sqlserver.jdbc.SQLServerDriver</jdbc-driver>
+      <jdbc-url>jdbc:sqlserver://172.16.4.27:1433;database=MfgTraveler</jdbc-url>
+      <driver-properties>
+        <property name="applicationName" value="DataGrip" />
+        <property name="trustServerCertificate" value="true" />
+        <property name="authentication" value="SqlPassword" />
+        <property name="loginTimeout" value="30" />
+        <property name="encrypt" value="true" />
+        <property name="hostNameInCertificate" value="*.database.windows.net" />
+        <property name="appName" value="DataGrip" />
+      </driver-properties>
+    </data-source>
+    <data-source source="LOCAL" name="SL8 (EM_APP@bldrsyte8db01)" read-only="true" uuid="3140667a-2402-44b0-8f88-34422ce28e0a">
+      <driver-ref>sqlserver.ms</driver-ref>
+      <synchronize>true</synchronize>
+      <auto-commit>false</auto-commit>
+      <jdbc-driver>com.microsoft.sqlserver.jdbc.SQLServerDriver</jdbc-driver>
+      <jdbc-url>jdbc:sqlserver://bldrsyte8db01:1433;database=EM_APP</jdbc-url>
+      <driver-properties>
+        <property name="applicationName" value="DataGrip" />
+      </driver-properties>
+    </data-source>
+  </component>
+</project>
\ No newline at end of file
Index: processes/renew_password/renew_password.py
===================================================================
--- processes/renew_password/renew_password.py	(revision Shelved Version)
+++ processes/renew_password/renew_password.py	(revision Shelved Version)
@@ -0,0 +1,23 @@
+import logging
+
+from _common import PuppetMaster
+from constants import SYTELINE_WINDOW_TITLE
+
+log = logging.getLogger(__name__)
+
+starting_forms = {'User Information'}
+
+def run(self: PuppetMaster.Puppet):
+	app = self.app
+	print(app)
+	app.verify_form('User Information')
+	sl_win = app.win32.window(title_re=SYTELINE_WINDOW_TITLE)
+	sl_uia = app.uia.window(title_re=SYTELINE_WINDOW_TITLE)
+	print(app)
+	uid = sl_win.UserID.texts()[0]
+	print(uid)
+	print(app.get_user())
+	print(uid == app.get_user())
+
+
+
Index: processes/scrap/__init__.py
===================================================================
--- processes/scrap/__init__.py	(revision Shelved Version)
+++ processes/scrap/__init__.py	(revision Shelved Version)
@@ -0,0 +1,2 @@
+"""Makes sure 'Miscellaneous Issue' and 'Units' forms are open"""
+# TODO: Initialization
Index: processes/transact/transact.py
===================================================================
--- processes/transact/transact.py	(revision Shelved Version)
+++ processes/transact/transact.py	(revision Shelved Version)
@@ -0,0 +1,1015 @@
+import logging
+import warnings
+from time import sleep
+from typing import List
+
+import pyautogui as pag
+import pywinauto.timings
+from pywinauto import keyboard
+from pywinauto.controls import common_controls, uia_controls, win32_controls
+
+from _common import *
+from _common import PuppetMaster
+from config import *
+from constants import DB_TABLE, REGEX_CREDIT_HOLD, REGEX_NEGATIVE_ITEM, SYTELINE_WINDOW_TITLE, TRANSACTION_STATUS, WHITE
+from exceptions import *
+from utils.sql import SQL
+from utils.tools import get_background_color
+
+log = logging.getLogger(__name__)
+# TODO: Rework process
+
+starting_forms = {'Units'}
+
+
+def dummy(self: PuppetMaster.Puppet, default_wait: float, units: List[Unit]):
+	# UNITS FORM START - - - - - - - - - - - - - - - - - - - - - - - - -
+	app = self.app
+	app.verify_form("Units")
+	sl_win = app.win32.window(title_re=SYTELINE_WINDOW_TITLE)
+	sl_uia = app.uia.window(title_re=SYTELINE_WINDOW_TITLE)
+	sl_win.send_keystrokes('{F4}')
+	sleep(default_wait)
+	sl_win.ServiceOrderLinesButton.wait('ready')
+	sl_win.set_focus()
+	sl_win.send_keystrokes('%s')  # Actions Menu, (ALT + S)
+	sleep(default_wait)
+	sl_win.send_keystrokes('o')  # Notes For Current, (O)
+	sleep(default_wait)
+	sl_uia.CancelCloseButton.click()
+	sleep(default_wait)
+	sl_win.ServiceOrderLinesButton.wait('ready')
+	# SRO LINES FORM START - - - - - - - - - - - - - - - - - - - - - - - -
+	sl_win.ServiceOrderLinesButton.click()
+	sleep(default_wait)
+	sl_win.ServiceOrderOperationsButton.wait('ready')
+	app.find_value_in_collection('Service Order Lines', 'SRO (SroNum)', '1')
+	sleep(default_wait)
+	app.win32.top_window().send_keystrokes('{ESC}')
+	sleep(default_wait)
+	app.win32.top_window().send_keystrokes('{ESC}')
+	sleep(default_wait)
+	app.win32.top_window().send_keystrokes('{ESC}')
+	sleep(default_wait)
+	sl_win.ServiceOrderOperationsButton.wait('ready')
+	# SRO OPERATIONS FORM START - - - - - - - - - - - - - - - - - - - - - - - -
+	sl_win.ServiceOrderOperationsButton.click()
+	sleep(default_wait)
+	sl_win.SROLinesButton.wait('ready')
+	common_controls.TabControlWrapper(sl_win.TabControl).select('Reasons')
+	sleep(default_wait)
+	reason_grid = uia_controls.ListViewWrapper(sl_uia.DataGridView.element_info).rectangle()
+	pag.click(((reason_grid.right - reason_grid.left) / 2) + reason_grid.left, ((reason_grid.bottom - reason_grid.top) / 2) + reason_grid.top)
+	sleep(default_wait)
+	pag.press('enter')
+	sleep(default_wait)
+	pag.press('esc')
+	sleep(default_wait)
+	sl_uia.CancelCloseButton.click()
+	sleep(default_wait)
+	sl_win.SROTransactionsButton.wait('ready')
+	# SRO TRANSACTIONS FORM START - - - - - - - - - - - - - - - - - - - - - - - -
+	# TODO: Write part number and spam enter, then get outta there
+	sl_win.SROTransactionsButton.click()
+	sleep(default_wait)
+	transaction_grid = uia_controls.ListViewWrapper(sl_uia.DataGridView.element_info)
+
+def run(self, units: List[Unit]):
+	app = self.app
+	pywinauto.timings.Timings.Fast()
+	units = units if type(units) is list else [units]
+	unit = units[0]
+	# log.info(f"Starting Transact script with unit: {unit.serial_number_prefix+unit.serial_number}")
+	sl_win = app.win32.window(title_re=SYTELINE_WINDOW_TITLE)
+	sl_uia = app.uia.window(title_re=SYTELINE_WINDOW_TITLE)
+	# if not sl_win.exists():
+	# for x in units:
+	# x.reset()
+	# sys.exit(1)
+	# log.debug([x.texts()[0] for x in sl_uia.WindowMenu.items()])
+	# app.verify_form('Units')
+	print(get_background_color(sl_win.UnitEdit))
+	sleep(0.2)
+	sl_win.UnitEdit.set_text(unit.serial_number.to_string())  # Input serial number
+	sleep(0.2)
+	print(get_background_color(sl_win.UnitEdit))
+	sl_win.send_keystrokes('{F4}')  # Filter in Place
+	count = 0
+	print(get_background_color(sl_win.UnitEdit))
+	quit()
+	try:
+		while (sl_win.UnitEdit.texts()[0].strip() != unit.serial_number_prefix + unit.serial_number) and \
+				sl_win.UnitEdit.texts()[0].strip():  # While actual serial number != attempted serial number
+			if count >= 30:
+				raise SyteLineFilterInPlaceError(unit.serial_number)
+			sleep(0.4)
+			count += 1
+		if sl_win.UnitEdit.texts()[0].strip() != unit.serial_number_prefix + unit.serial_number:
+			if not sl_win.UnitEdit.texts()[0].strip():
+				raise InvalidSerialNumberError(unit.serial_number)
+			else:
+				raise SyteLineFilterInPlaceError(unit.serial_number,
+				                                 f"Expected input serial number '{unit.serial_number_prefix+unit.serial_number}', "
+				                                 f"returned '{sl_win.UnitEdit.texts()[0].strip()}'")
+		if not debug:
+			for x in units:
+				x.start()
+		log.debug(sl_win.ServiceOrderLinesButton.get_properties())
+		if not sl_win.ServiceOrderLinesButton.is_enabled():
+			raise NoOpenSROError(serial_number=unit.serial_number, sro=unit.sro_num,
+			                     msg="Service Order Lines Button is disabled")
+		log.debug("Service Order Lines Button clicked")
+		sl_win.set_focus()
+		timer.start()
+		sl_win.ServiceOrderLinesButton.click()
+		sl_win.ServiceOrderOperationsButton.wait('visible', 2, 0.09)
+		# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
+		t_temp = timer.stop()
+		log.debug(
+				f"Time waited for Service Order Lines: {t_temp.seconds}.{str(t_temp.microseconds/1000).split('.', 1)[0].rjust(3, '0')}")
+		app.find_value_in_collection('Service Order Lines', 'SRO (SroNum)', unit.sro_num)
+		dlg = app.get_popup(0.5)
+		count = 0
+		while dlg:
+			log.debug(f"Lines Find SRO dialog text: '{dlg.Text}'")
+			dlg[0].close()
+			count += 1
+			dlg = app.get_popup()
+		else:
+			if count > 0:
+				raise InvalidSROError(serial_number=unit.serial_number, sro=unit.sro_num)
+		log.debug("Service Order Operations Button clicked")
+		sl_win.set_focus()
+		timer.start()
+		sl_win.ServiceOrderOperationsButton.click()
+		sl_win.SROLinesButton.wait('visible', 2, 0.09)
+		# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
+		t_temp = timer.stop()
+		log.debug(
+				f"Time waited for Service Order Operations: {t_temp.seconds}.{str(t_temp.microseconds/1000).split('.', 1)[0].rjust(3, '0')}")
+		unit.sro_operations_timer.start()
+		if sl_win.StatusEdit3.texts()[0].strip() == 'Closed':
+			status = win32_controls.EditWrapper(sl_win.StatusEdit3.element_info)
+			status.set_text('Open')
+			status.click_input()
+			pag.press('tab')
+			# handle_popup(best_match='ResetDatesDialog')
+			pag.press('esc')
+			save = sl_uia.SaveButton
+			if not debug:
+				save.click()
+		sl_win.SROTransactionsButton.wait('enabled', 2, 0.09)
+		sl_win.SROTransactionsButton.wait('enabled', 2, 0.09)
+		# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
+		print("START Transaction Unit list-comprehension")
+		transaction_units = [(y, i) for i, x in enumerate(units) if x.parts for y in x.parts]
+		print("END Transaction Unit list-comprehension")
+		log.debug(f"Total parts: {', '.join([str(p[0]) for p in transaction_units])}")
+		if transaction_units:
+			try:
+				print("TRANSACTION")
+				sroo_time = unit.sro_operations_timer.stop() / len(units)
+				for temp in units:
+					temp.sro_operations_time += sroo_time
+				transactions_timer = TestTimer()
+				transactions_timer.start()
+				sl_win.set_focus()
+				timer.start()
+				sl_win.SROTransactionsButton.click()
+				log.debug("SRO Transactions Button clicked")
+				sl_win.FilterDateRangeEdit.wait('ready', 2, 0.09)
+				t_temp = timer.stop()
+				log.debug(
+						f"Time waited for SRO Transactions: {t_temp.seconds}.{str(t_temp.microseconds/1000).split('.', 1)[0].rjust(3, '0')}")
+				log.info("Starting transactions")
+				print("TRANSACTION 2")
+				sl_win.FilterDateRangeEdit.set_text(unit.eff_date.strftime('%m/%d/%Y'))
+				timer.start()
+				sl_win.ApplyFilterButton.click()
+				sl_win.ApplyFilterButton.wait('ready', 2, 0.09)
+				print("FILTER SET")
+				t_temp = timer.stop()
+				print("TIMER STOP?")
+				log.debug(
+						f"Time waited for first Application of Filter: {t_temp.seconds}.{str(t_temp.microseconds/1000).split('.', 1)[0].rjust(3, '0')}")
+				print("DEBUG?")
+				transaction_grid = uia_controls.ListViewWrapper(sl_uia.DataGridView.element_info)
+				print("TRANSACTION GRID")
+				log.debug(transaction_grid.get_properties())
+				posted_parts = access_grid(transaction_grid,
+				                           ['Posted', 'Item', 'Location', 'Quantity', 'Billing Code', 'Trans Date'],
+				                           condition=('Posted', True), requirement='Item')
+				print("POSTED PARTS")
+				log.debug(f"Posted parts: {posted_parts}")
+				posted_part_numbers = {p.Item for p in posted_parts}
+				sl_win.IncludePostedButton.click()
+				timer.start()
+				sl_win.ApplyFilterButton.click()
+				sl_win.ApplyFilterButton.wait('ready', 2, 0.09)
+				t_temp = timer.stop()
+				log.debug(
+						f"Time waited for second Application of Filter: {t_temp.seconds}.{str(t_temp.microseconds/1000).split('.', 1)[0].rjust(3, '0')}")
+				unposted_parts = access_grid(transaction_grid,
+				                             ['Posted', 'Item', 'Location', 'Quantity', 'Billing Code', 'Trans Date'],
+				                             requirement='Item')
+				log.debug(f"Unposted parts: {unposted_parts}")
+				unposted_part_numbers = {p.Item for p in unposted_parts}
+				print("UNPOSTED PARTS")
+				row_i = None
+				top_row = transaction_grid.children()[transaction_grid.children_texts().index('Top Row')]
+				log.debug(F"Columns: {top_row.children_texts()[1:10]}")
+				loc_rec_list = []
+				qty_rec_list = []
+				bc_rec_list = []
+				if unit.suffix == 'Direct' or unit.suffix == 'RTS':
+					bc = 'Contract'
+				else:
+					bc = 'No Charge'
+				all_transacted_parts = []
+				for part, i in transaction_units:
+					# pag._failSafeCheck()
+					unit = units[i]
+					if (part.part_number in posted_part_numbers) or (part.part_number in unposted_part_numbers):
+						continue
+					unit.sro_transactions_timer.start()
+					if row_i is None:
+						if unposted_parts:
+							row_i = -1
+						else:
+							row_i = -2
+					else:
+						row_i = -1
+					log.debug(f"Attempting to transact part {part}")
+					last_row = uia_controls.ListViewWrapper(transaction_grid.children()[row_i].element_info)
+					item = uia_controls.ListItemWrapper(
+							last_row.item(top_row.children_texts().index('Item')).element_info)
+					r_i = item.rectangle()
+					# sl_win.set_focus()
+					c_coords = center(x1=r_i.left, y1=r_i.top, x2=r_i.right, y2=r_i.bottom)
+					pag.click(*c_coords)
+					last_row = uia_controls.ListViewWrapper(transaction_grid.children()[-2].element_info)
+					location = uia_controls.ListItemWrapper(
+							last_row.item(top_row.children_texts().index('Location')).element_info)
+					quantity = uia_controls.ListItemWrapper(
+							last_row.item(top_row.children_texts().index('Quantity')).element_info)
+					billcode = uia_controls.ListItemWrapper(
+							last_row.item(top_row.children_texts().index('Billing Code')).element_info)
+					r_loc = location.rectangle()
+					r_qty = quantity.rectangle()
+					r_bill = billcode.rectangle()
+					loc_rec_list.append(
+							(center(x1=r_loc.left, y1=r_loc.top, x2=r_loc.right, y2=r_loc.bottom), str(part.location), i))
+					if part.quantity > 1:
+						qty_rec_list.append((center(x1=r_qty.left, y1=r_qty.top, x2=r_qty.right, y2=r_qty.bottom),
+						                     str(part.quantity), i))
+					bc_rec_list.append(
+							(center(x1=r_bill.left, y1=r_bill.top, x2=r_bill.right, y2=r_bill.bottom), bc, i))
+					pag.typewrite(str(part.part_number))
+					sleep(0.5)
+					pag.press('enter', 10, interval=0.05)
+					pag.click(*c_coords)
+					unit.parts_transacted.append(part)
+					all_transacted_parts.append(part)
+					unit.sro_transactions_time += unit.sro_transactions_timer.stop()
+				for coord, qty, i in qty_rec_list:
+					unit = units[i]
+					unit.sro_transactions_timer.start()
+					pag.click(*coord)
+					sleep(0.2)
+					pag.press('backspace', 20)
+					pag.press('delete', 20)
+					sleep(0.2)
+					pag.typewrite(qty)
+					sleep(0.2)
+					pag.press('enter')
+					sleep(0.5)
+					unit.sro_transactions_time += unit.sro_transactions_timer.stop()
+				for coord, loc, i in loc_rec_list:
+					unit = units[i]
+					unit.sro_transactions_timer.start()
+					pag.click(*coord)
+					sleep(0.2)
+					pag.press('backspace', 20)
+					pag.press('delete', 20)
+					sleep(0.2)
+					pag.typewrite(loc)
+					sleep(0.2)
+					pag.press('enter')
+					sleep(0.5)
+					unit.sro_transactions_time += unit.sro_transactions_timer.stop()
+				for coord, bc, i in bc_rec_list:
+					unit = units[i]
+					unit.sro_transactions_timer.start()
+					pag.click(*coord)
+					sleep(0.2)
+					pag.press('backspace', 20)
+					pag.press('delete', 20)
+					sleep(0.2)
+					pag.typewrite(bc)
+					sleep(0.2)
+					pag.press('enter')
+					sleep(0.5)
+					unit.sro_transactions_time += unit.sro_transactions_timer.stop()
+			except Exception as ex:  # Placeholder
+				raise ex
+			else:
+				if (len(all_transacted_parts) + len(unposted_part_numbers)) > 0:
+					save = sl_uia.SaveButton
+					total_parts = (len(all_transacted_parts) + len(unposted_part_numbers))
+					# TODO: Work on slimming down unneeded transaction time
+					if total_parts < 4:
+						wait_seconds = 4
+					elif total_parts < 8:
+						wait_seconds = 6
+					else:
+						wait_seconds = 8
+					sl_win.set_focus()
+					if not debug:
+						save.click()
+						dlg = app.get_popup()
+						while dlg:
+							log.debug(f"Transaction Save dialog text: '{dlg.Text}'")
+							dlg[0].close()
+							dlg = app.get_popup()
+						log.debug("Saved")
+					sl_win.set_focus()
+					if not debug:
+						sl_win.PostBatchButton.click()
+						dlg = app.get_popup(6)
+						error = None
+						while dlg:
+							log.debug(f"Transaction Post Batch dialog text: '{dlg.Text}'")
+							m1 = REGEX_CREDIT_HOLD.match(dlg.Text)
+							m2 = REGEX_NEGATIVE_ITEM.match(dlg.Text)
+							if m1 is not None:
+								pag.press('enter')
+								error = SyteLineCreditHoldError(cust=m1.group('customer'), msg="Cannot transact parts")
+								dlg = app.get_popup(2)
+							elif m2 is not None:
+								pag.press('enter')
+								warnings.warn(NegativeQuantityWarning(part=m2.group('item'), qty=m2.group('quantity'),
+								                                      loc=m2.group('location')))
+								log.warning("Negative Quantity!")
+								dlg = app.get_popup(4)
+							else:
+								dlg = app.get_popup()
+								pag.press('enter')
+						else:
+							if error is not None:
+								raise error
+					sl_win.PostBatchButton.wait('ready', 2, 0.09)
+					log.debug("Batch posted")
+					sl_win.set_focus()
+					if not debug:
+						save.click()
+					sleep(1)
+			dlg = app.get_popup(3)
+			while dlg:
+				log.debug(f"Transaction 2nd Save dialog text: '{dlg.Text}'")
+				dlg[0].close()
+				dlg = app.get_popup()
+			sl_win.set_focus()
+			for presses in range(2):
+				sl_uia.CancelCloseButton.click()
+			sl_win.ServiceOrderOperationsButton.wait('visible', 2, 0.09)
+			sl_win.set_focus()
+			timer.start()
+			sl_win.ServiceOrderOperationsButton.click()
+			sl_win.SROLinesButton.wait('visible', 2, 0.09)
+			t_temp = timer.stop()
+			log.debug(
+					f"Time waited for Service Order Lines(part 2): {t_temp.seconds}.{str(t_temp.microseconds/1000).split('.', 1)[0].rjust(3, '0')}")
+			i2 = [i for i, x in enumerate(units) if x.parts]
+			srot_time = unit.sro_transactions_timer.stop() / len(i2)
+			for i in i2:
+				unit = units[i]
+				unit.sro_transactions_time += srot_time
+			unit = units[0]
+			unit.sro_operations_timer.start()
+		# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
+		log.debug(f"Recieved date: {sl_win.ReceivedDateEdit.texts()[0].strip()}")
+		log.debug(f"Floor date: {sl_win.FloorDateEdit.texts()[0].strip()}")
+		log.debug(f"Completed date: {sl_win.CompletedDateEdit.texts()[0].strip()}")
+		i2 = {x.datetime: i for i, x in enumerate(units)}
+		newest_unit = units[i2[max(list(i2.keys()))]]
+		oldest_unit = units[i2[min(list(i2.keys()))]]
+		if not debug:
+			if not sl_win.ReceivedDateEdit.texts()[0].strip():
+				sl_win.ReceivedDateEdit.set_text(unit.eff_date.strftime('%m/%d/%Y %I:%M:%S %p'))
+				sl_win.ReceivedDateEdit.send_keystrokes('^s')
+			if not sl_win.FloorDateEdit.texts()[0].strip():
+				sl_win.FloorDateEdit.set_text(oldest_unit.datetime.strftime('%m/%d/%Y %I:%M:%S %p'))
+				sl_win.FloorDateEdit.send_keystrokes('^s')
+			if not sl_win.CompletedDateEdit.texts()[0].strip() and has_qc:
+				sl_win.CompletedDateEdit.set_text(newest_unit.datetime.strftime('%m/%d/%Y %I:%M:%S %p'))
+			sl_win.CompletedDateEdit.send_keystrokes('^s')
+			sleep(0.5)
+			log.debug(f"Recieved date: {sl_win.ReceivedDateEdit.texts()[0].strip()}")
+			log.debug(f"Floor date: {sl_win.FloorDateEdit.texts()[0].strip()}")
+			log.debug(f"Completed date: {sl_win.CompletedDateEdit.texts()[0].strip()}")
+			if not sl_win.CompletedDateEdit.texts()[0].strip() and has_qc:
+				sl_win.CompletedDateEdit.set_text(newest_unit.datetime.strftime('%m/%d/%Y %I:%M:%S %p'))
+				sl_win.CompletedDateEdit.send_keystrokes('^s')
+				sleep(2)
+			log.debug(f"Recieved date: {sl_win.ReceivedDateEdit.texts()[0].strip()}")
+			log.debug(f"Floor date: {sl_win.FloorDateEdit.texts()[0].strip()}")
+			log.debug(f"Completed date: {sl_win.CompletedDateEdit.texts()[0].strip()}")
+		# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
+		common_controls.TabControlWrapper(sl_win.TabControl).select('Reasons')  # Open 'Reasons' Tab
+		if has_qc:
+			reason_grid = uia_controls.ListViewWrapper(sl_uia.DataGridView.element_info)
+			reason_rows = access_grid(reason_grid, ['General Reason', 'Specific Reason', 'General Resolution',
+			                                        'Specific Resolution'])
+			full_row = None
+			empty_row_i = len(reason_rows) - 1
+			partial = False
+			for i, row in enumerate(reason_rows[::-1]):
+				if {row.General_Reason, row.Specific_Reason, row.General_Resolution, row.Specific_Resolution} == {None,
+				                                                                                                  None,
+				                                                                                                  None,
+				                                                                                                  None}:
+					empty_row_i = len(reason_rows) - (i + 1)
+					partial = False
+				elif {row.Specific_Reason, row.General_Resolution, row.Specific_Resolution} == {None, None, None}:
+					empty_row_i = len(reason_rows) - (i + 1)
+					partial = True
+					full_row = row
+				else:
+					if full_row is None:
+						full_row = row
+					break
+			top_row_i = reason_grid.children_texts().index('Top Row')
+			top_row = reason_grid.children()[top_row_i]
+			open_row = uia_controls.ListViewWrapper(reason_grid.children()[empty_row_i + top_row_i + 1].element_info)
+
+			gen_resn = uia_controls.ListItemWrapper(
+					open_row.item(top_row.children_texts().index('General Reason')).element_info)
+			gen_resn_i = gen_resn.rectangle()
+			c_coords = center(x1=gen_resn_i.left, y1=gen_resn_i.top, x2=gen_resn_i.right, y2=gen_resn_i.bottom)
+
+			spec_resn = uia_controls.ListItemWrapper(
+					open_row.item(top_row.children_texts().index('Specific Reason')).element_info)
+			spec_resn_i = spec_resn.rectangle()
+
+			gen_reso = uia_controls.ListItemWrapper(
+					open_row.item(top_row.children_texts().index('General Resolution')).element_info)
+			gen_reso_i = gen_reso.rectangle()
+
+			spec_reso = uia_controls.ListItemWrapper(
+					open_row.item(top_row.children_texts().index('Specific Resolution')).element_info)
+			spec_reso_i = spec_reso.rectangle()
+
+			pag.click(*c_coords)
+			dlg = app.get_popup()
+			while dlg:
+				log.debug(f"Operations Reason Grid dialog text: '{dlg.Text}'")
+				dlg[0].close()
+				dlg = app.get_popup()
+			q = []
+			if not partial:
+				q.append((c_coords, str(full_row.General_Reason)))
+			c_coords = center(x1=spec_resn_i.left, y1=spec_resn_i.top, x2=spec_resn_i.right, y2=spec_resn_i.bottom)
+			q.append((c_coords, str(unit.specific_reason)))
+
+			c_coords = center(x1=gen_reso_i.left, y1=gen_reso_i.top, x2=gen_reso_i.right, y2=gen_reso_i.bottom)
+			q.append((c_coords, str(unit.general_resolution)))
+
+			c_coords = center(x1=spec_reso_i.left, y1=spec_reso_i.top, x2=spec_reso_i.right, y2=spec_reso_i.bottom)
+			q.append((c_coords, str(unit.specific_resolution)))
+			for coord, num in q:
+				pag.click(*coord)
+				sleep(0.5)
+				pag.typewrite(str(num))
+				sleep(0.5)
+			if not debug:
+				pag.hotkey('ctrl', 's')
+			resn_notes = sl_win.ReasonNotesEdit
+			resn_notes.click_input()
+			pag.press('end', 30)
+			if resn_notes.texts()[0].strip():
+				pag.press('enter')
+			pag.typewrite("[UDI]")
+			pag.press('enter')
+			pag.typewrite("[PASSED ALL TESTS]")
+		reso_notes = sl_win.ResolutionNotesEdit
+		if transaction_units:
+			all_part_units = [i for i, x in enumerate(units) if x.parts]
+			reso_notes.click_input()
+			pag.press('end', 30)
+			if reso_notes.texts()[0].strip():
+				pag.press('enter')
+			for i in all_part_units:
+				unit = units[i]
+				reso_string = ", ".join([p.display_name for p in unit.parts])
+				pag.typewrite(f"[{reso_string}]")
+				pag.press('enter')
+				pag.typewrite(f"[{unit.operator_initials} {unit.datetime.strftime('%m/%d/%Y')}]")
+				if len(units) > 1:
+					pag.press('enter')
+			else:
+				if len(units) > 1:
+					pag.press('backspace')
+		if not debug:
+			pag.hotkey('ctrl', 's')
+			status = win32_controls.EditWrapper(sl_win.StatusEdit3.element_info)
+			status.send_keystrokes('^s')
+			status.wait_for_idle()
+		if has_qc or units[0].SRO_Operations_status == 'Closed':
+			status = win32_controls.EditWrapper(sl_win.StatusEdit3.element_info)
+			sl_win.set_focus()
+			status.set_keyboard_focus()
+			status.send_keystrokes('{DOWN}{DOWN}')
+			try:
+				if not debug:
+					status.send_keystrokes('^s')
+				sleep(1)
+			except TimeoutError:
+				pass
+			finally:
+				keyboard.SendKeys('{ESC}')
+		unit = units[0]
+		sroo_time = unit.sro_operations_timer.stop() / len(units)
+		for temp in units:
+			temp.sro_operations_time += sroo_time
+		for presses in range(2):
+			sl_uia.CancelCloseButton.click()
+		sl_win.UnitEdit.wait('visible', 2, 0.09)
+		sleep(0.2)
+		sl_win.send_keystrokes('{F4}')  # Clear Filter
+		sleep(0.2)
+		sl_win.send_keystrokes('{F5}')  # Clear Filter
+		sleep(0.2)
+		if debug:
+			quit()
+	except Exception as ex:
+		sl_win = app.win32.window(title_re=SYTELINE_WINDOW_TITLE)
+		sl_uia = app.uia.window(title_re=SYTELINE_WINDOW_TITLE)
+		if issubclass(type(ex), NoSROError):
+			log.exception("No SRO Error!")
+			for x in units:
+				x.skip(reason='No SRO', batch_amt=len(units))
+		elif issubclass(type(ex), NoOpenSROError):
+			log.exception("No Open SRO Error!")
+			for x in units:
+				x.skip(reason='No Open SRO', batch_amt=len(units))
+		elif issubclass(type(ex), SyteLineCreditHoldError):
+			log.exception("Credit Hold Error!")
+			string = 'Credit Hold'
+			# string = f"Credit Hold({ex._cust})"
+			for x in units:
+				x.skip(reason=string, batch_amt=len(units))
+			# pag.press('esc', 40)
+		else:
+			log.exception("SOMETHING HAPPENED!!!")
+			for x in units:
+				x.skip(batch_amt=len(units))
+		if sl_uia.exists(2, 0.09):
+			if 'SRO Transactions' in app.forms:
+				sl_uia.CancelCloseButton.click()
+				dlg = app.get_popup()
+				while dlg:
+					log.debug(f"Transactions Cancel Close dialog text: '{dlg.Text}'")
+					dlg[0].close()
+					dlg = app.get_popup()
+			if 'Service Order Operations' in app.forms:
+				sl_uia.CancelCloseButton.click()
+				dlg = app.get_popup()
+				while dlg:
+					log.debug(f"Operations Cancel Close dialog text: '{dlg.Text}'")
+					dlg[0].close()
+					dlg = app.get_popup()
+			if 'Service Order Lines' in app.forms:
+				sl_uia.CancelCloseButton.click()
+				dlg = app.get_popup()
+				while dlg:
+					log.debug(f"Lines Cancel Close dialog text: '{dlg.Text}'")
+					dlg[0].close()
+					dlg = app.get_popup()
+			sl_win.send_keystrokes('{F4}')
+			sl_win.send_keystrokes('{F5}')
+	else:
+		log.info(f"Unit: {unit.serial_number_prefix+unit.serial_number} completed")
+		for x in units:
+			x.complete(batch_amt=len(units))
+
+def count_units(sql: SQL, table: str = DB_TABLE, group_serial: bool = False):
+	return _check_units(sql=sql, status=TRANSACTION_STATUS, table=table, group_serial=group_serial)
+
+def get_units(table: str = DB_TABLE, order: str = 'ASC', exclude: List[str] = set()) -> List[Unit]:
+	serial_number = mssql.execute("""SELECT TOP 10 [Serial Number] FROM PyComm WHERE Status = %s AND DateTime <= DATEADD(MINUTE, -5, GETDATE()) ORDER BY DateTime ASC""", 'Queued')
+	serial_number = mssql.execute("""SELECT TOP 10 [Serial Number] FROM PyComm WHERE Status = %s ORDER BY DateTime ASC""", 'Queued')
+	print(serial_number)
+	if serial_number:
+		for serial in serial_number:
+			if serial[0] not in exclude:
+				return Unit.from_serial_number(serial_number[0], TRANSACTION_STATUS)
+	else:
+		return None
+
+
+def run(self: PuppetMaster.Puppet, units: List[Unit]):
+	try:
+		_base_process(False, self, units=units)
+	except Exception as ex:
+		log.exception("SOMETHING HAPPENED!!!")
+		app = self.app
+		sl_win = app.win32.window(title_re=SYTELINE_WINDOW_TITLE)
+		sl_uia = app.uia.window(title_re=SYTELINE_WINDOW_TITLE)
+		for x in units:
+			x.skip(ex, batch_amt=len(units))
+		if sl_uia.exists(2, 0.09):
+			if 'SRO Transactions' in app.forms:
+				sl_uia.CancelCloseButton.click()
+				dlg = app.get_popup()
+				while dlg:
+					log.debug(f"Transactions Cancel Close dialog text: '{dlg.Text}'")
+					dlg[0].close()
+					dlg = app.get_popup()
+			if 'Service Order Operations' in app.forms:
+				sl_uia.CancelCloseButton.click()
+				dlg = app.get_popup()
+				while dlg:
+					log.debug(f"Operations Cancel Close dialog text: '{dlg.Text}'")
+					dlg[0].close()
+					dlg = app.get_popup()
+			if 'Service Order Lines' in app.forms:
+				sl_uia.CancelCloseButton.click()
+				dlg = app.get_popup()
+				while dlg:
+					log.debug(f"Lines Cancel Close dialog text: '{dlg.Text}'")
+					dlg[0].close()
+					dlg = app.get_popup()
+			sl_win.send_keystrokes('{F4}')
+			sl_win.send_keystrokes('{F5}')
+	else:
+		log.info(f"Unit: {units[0].serial_number} completed")
+		for x in units:
+			x.complete(batch_amt=len(units))
+
+def dummy(self: PuppetMaster.Puppet, default_wait: float, units: List[Unit]):
+	try:
+		_base_process(True, self, default_wait=default_wait, units=units)
+	except Exception as ex:
+		app = self.app
+		sl_win = app.win32.window(title_re=SYTELINE_WINDOW_TITLE)
+		sl_uia = app.uia.window(title_re=SYTELINE_WINDOW_TITLE)
+		if sl_uia.exists(2, 0.09):
+			if 'SRO Transactions' in app.forms:
+				sl_uia.CancelCloseButton.click()
+				dlg = app.get_popup()
+				while dlg:
+					log.debug(f"Transactions Cancel Close dialog text: '{dlg.Text}'")
+					dlg[0].close()
+					dlg = app.get_popup()
+			if 'Service Order Operations' in app.forms:
+				sl_uia.CancelCloseButton.click()
+				dlg = app.get_popup()
+				while dlg:
+					log.debug(f"Operations Cancel Close dialog text: '{dlg.Text}'")
+					dlg[0].close()
+					dlg = app.get_popup()
+			if 'Service Order Lines' in app.forms:
+				sl_uia.CancelCloseButton.click()
+				dlg = app.get_popup()
+				while dlg:
+					log.debug(f"Lines Cancel Close dialog text: '{dlg.Text}'")
+					dlg[0].close()
+					dlg = app.get_popup()
+			sl_win.send_keystrokes('{F4}')
+			sl_win.send_keystrokes('{F5}')
+			return False
+	else:
+		log.info(f"Unit: {units[0].serial_number} completed")
+		for x in units:
+			x.complete(batch_amt=len(units))
+		return True
+
+def _base_process(dummy_mode: bool, self: PuppetMaster.Puppet, *, default_wait: float=None, units: List[Unit]=None):
+	app = self.app
+	if not dummy_mode:
+		pywinauto.timings.Timings.Fast()
+	if dummy_mode:
+		pywinauto.timings.Timings.Slow()
+	unit = units[0]
+	sl_win = app.win32.window(title_re=SYTELINE_WINDOW_TITLE)
+	sl_uia = app.uia.window(title_re=SYTELINE_WINDOW_TITLE)
+	sleep(0.2)
+	sl_win.UnitEdit.set_text(unit.serial_number.to_string())
+	sleep(0.2)
+	if dummy_mode:
+		sleep(default_wait)
+	sl_win.send_keystrokes('{F4}')
+	if dummy_mode:
+		sleep(default_wait)
+	while get_background_color(sl_win.UnitEdit) == WHITE:
+		if sl_win.UnitEdit.texts()[0].strip() != unit.serial_number:
+			if not sl_win.UnitEdit.texts()[0].strip():
+				raise InvalidSerialNumberError(unit.serial_number)
+			else:
+				raise SyteLineFilterInPlaceError(unit.serial_number, f"Expected input serial number '{unit.serial_number_prefix+unit.serial_number}', returned '{sl_win.UnitEdit.texts()[0].strip()}'")
+	if not dummy_mode:
+		for x in units:
+			x.start()
+	if not sl_win.ServiceOrderLinesButton.is_enabled():
+		raise NoOpenSROError(serial_number=unit.serial_number.number, sro=unit.sro, msg="Service Order Lines Button is disabled")
+	sl_win.set_focus()
+	sl_win.ServiceOrderLinesButton.click()
+	sl_win.ServiceOrderOperationsButton.wait('visible', 2, 0.09)
+	# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
+	if dummy_mode:
+		sleep(default_wait)
+	app.find_value_in_collection('Service Order Lines', 'SRO (SroNum)', unit.sro)
+	if dummy_mode:
+		sleep(default_wait)
+	dlg = app.get_popup(0.5)
+	count = 0
+	while dlg:
+		log.debug(f"Lines Find SRO dialog text: '{dlg.Text}'")
+		dlg[0].close()
+		count += 1
+		dlg = app.get_popup()
+	else:
+		if count > 0:
+			raise InvalidSROError(serial_number=unit.serial_number.number, sro=unit.sro)
+	sl_win.set_focus()
+	sl_win.ServiceOrderOperationsButton.click()
+	sl_win.SROLinesButton.wait('visible', 2, 0.09)
+	# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
+	timer = Timer.start()
+	if sl_win.StatusEdit3.texts()[0].strip() == 'Closed':
+		status = win32_controls.EditWrapper(sl_win.StatusEdit3.element_info)
+		if dummy_mode:
+			sleep(default_wait)
+		status.set_text('Open')
+		if dummy_mode:
+			sleep(default_wait)
+		status.click_input()
+		if dummy_mode:
+			sleep(default_wait)
+		pag.press('tab')
+		if dummy_mode:
+			sleep(default_wait)
+		# handle_popup(best_match='ResetDatesDialog')
+		pag.press('esc')
+		if dummy_mode:
+			sleep(default_wait)
+		save = sl_uia.SaveButton
+		if not dummy:
+			save.click()
+	sro_operations_time = timer.stop().total_seconds() / len(units)
+	for x in units:
+		x.sro_operations_time += sro_operations_time
+	sl_win.SROTransactionsButton.wait('enabled', 2, 0.09)
+	sl_win.SROTransactionsButton.wait('enabled', 2, 0.09)
+	# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
+	if any(len(x.parts) > 0 for x in units):
+		sl_win.set_focus()
+		sl_win.SROTransactionsButton.click()
+		if dummy_mode:
+			sleep(default_wait)
+		sl_win.FilterDateRangeEdit.wait('ready', 2, 0.09)
+		log.info("Starting transactions")
+		sl_win.FilterDateRangeEdit.set_text(unit.eff_date.strftime('%m/%d/%Y'))
+		sl_win.ApplyFilterButton.click()
+		sl_win.ApplyFilterButton.wait('ready', 2, 0.09)
+		transaction_grid = uia_controls.ListViewWrapper(sl_uia.DataGridView.element_info)
+		log.debug(transaction_grid.get_properties())
+		if not dummy_mode:
+			posted_parts = access_grid(transaction_grid,
+			                           ['Posted', 'Item', 'Location', 'Quantity', 'Billing Code', 'Trans Date'],
+			                           condition=('Posted', True), requirement='Item')
+			log.debug(f"Posted parts: {posted_parts}")
+			posted_part_numbers = {p.Item for p in posted_parts}
+		sl_win.IncludePostedButton.click()
+		sl_win.ApplyFilterButton.click()
+		sl_win.ApplyFilterButton.wait('ready', 2, 0.09)
+		if not dummy_mode:
+			unposted_parts = access_grid(transaction_grid,
+			                             ['Posted', 'Item', 'Location', 'Quantity', 'Billing Code', 'Trans Date'],
+			                             requirement='Item')
+			log.debug(f"Unposted parts: {unposted_parts}")
+			unposted_part_numbers = {p.Item for p in unposted_parts}
+		row_i = None
+		top_row = transaction_grid.children()[transaction_grid.children_texts().index('Top Row')]
+		log.debug(F"Columns: {top_row.children_texts()[1:10]}")
+		if unit.suffix == 'Direct' or unit.suffix == 'RTS':
+			bc = 'Contract'
+		else:
+			bc = 'No Charge'
+		for unit in units:
+			loc_list = qty_list = bc_list = []
+			timer = Timer.start()
+			for part in unit.parts:
+				if (part.part_number in posted_part_numbers) or (part.part_number in unposted_part_numbers):
+					continue
+				if row_i is None:
+					if unposted_parts:
+						row_i = -1
+					else:
+						row_i = -2
+				else:
+					row_i = -1
+				log.debug(f"Attempting to transact part {part}")
+				last_row = uia_controls.ListViewWrapper(transaction_grid.children()[row_i].element_info)
+				item = uia_controls.ListItemWrapper(last_row.item(top_row.children_texts().index('Item')).element_info)
+				# c_coords = center(item)
+				pag.click(*center(item))
+				last_row = uia_controls.ListViewWrapper(transaction_grid.children()[-2].element_info)
+				location = uia_controls.ListItemWrapper(last_row.item(top_row.children_texts().index('Location')).element_info)
+				quantity = uia_controls.ListItemWrapper(last_row.item(top_row.children_texts().index('Quantity')).element_info)
+				billcode = uia_controls.ListItemWrapper(last_row.item(top_row.children_texts().index('Billing Code')).element_info)
+				loc_list.append((center(location), str(part.location)))
+				if part.quantity > 1:
+					qty_list.append((center(quantity), str(part.quantity)))
+				bc_list.append((center(billcode), bc))
+				pag.typewrite(part.part_number)
+				sleep(0.5)
+				pag.press('enter', 10, interval=0.05)
+				pag.click(*center(item))
+				unit.parts_transacted.add(part)
+			coord_list = qty_list + loc_list + bc_list
+			for coord, text in coord_list:
+				pag.click(*coord)
+				sleep(0.2)
+				pag.press('backspace', 20)
+				pag.press('delete', 20)
+				sleep(0.2)
+				pag.typewrite(text)
+				sleep(0.2)
+				pag.press('enter')
+				sleep(0.5)
+			if len(unit.parts_transacted) > 0:  # TODO: Work on slimming down unneeded transaction time
+				if not dummy_mode:
+					save = sl_uia.SaveButton
+					sl_win.set_focus()
+					save.click()
+					pag.press('esc', 4)
+					dlg = app.get_popup()
+					while dlg:
+						log.debug(f"Transaction Save dialog text: '{dlg.Text}'")
+						dlg[0].close()
+						dlg = app.get_popup()
+					pag.press('esc', 4)
+					sl_win.set_focus()
+					sl_win.PostBatchButton.click()
+					pag.press('esc', 4)
+					dlg = app.get_popup(4)
+					error = None
+					while dlg:  # TODO: Refine this
+						log.debug(f"Transaction Post Batch dialog text: '{dlg.Text}'")
+						m1 = REGEX_CREDIT_HOLD.match(dlg.Text)
+						m2 = REGEX_NEGATIVE_ITEM.match(dlg.Text)
+						if m1 is not None:
+							pag.press('enter')
+							error = SyteLineCreditHoldError(cust=m1.group('customer'), msg="Cannot transact parts")
+							dlg = app.get_popup(2)
+						elif m2 is not None:
+							pag.press('enter')
+							warnings.warn(NegativeQuantityWarning(part=m2.group('item'), qty=m2.group('quantity'),
+							                                      loc=m2.group('location')))
+							log.warning("Negative Quantity!")
+							dlg = app.get_popup(4)
+						else:
+							dlg = app.get_popup()
+							pag.press('enter')
+					else:
+						if error is not None:
+							raise error
+					sl_win.PostBatchButton.wait('ready', 2, 0.09)
+					log.debug("Batch posted")
+					sl_win.set_focus()
+					save.click()
+			sro_transactions_time = timer.stop().total_seconds()
+			unit.sro_transactions_time += sro_transactions_time
+		# dlg = app.get_popup(2)
+		# while dlg:
+		# 	log.debug(f"Transaction 2nd Save dialog text: '{dlg.Text}'")
+		# 	dlg[0].close()
+		# 	dlg = app.get_popup()
+		sl_win.set_focus()
+		for presses in range(2):
+			sl_uia.CancelCloseButton.click()
+		sl_win.ServiceOrderOperationsButton.wait('visible', 2, 0.09)
+		sl_win.set_focus()
+		sl_win.ServiceOrderOperationsButton.click()
+		sl_win.SROLinesButton.wait('visible', 2, 0.09)
+	unit = units[0]
+	# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
+	timer = Timer.start()
+	log.debug(f"Recieved date: {sl_win.ReceivedDateEdit.texts()[0].strip()}")
+	log.debug(f"Floor date: {sl_win.FloorDateEdit.texts()[0].strip()}")
+	log.debug(f"Completed date: {sl_win.CompletedDateEdit.texts()[0].strip()}")
+	newest_datetime = max(x.datetime for x in units)
+	oldest_datetime = min(x.datetime for x in units)
+	if not dummy_mode:
+		if not sl_win.ReceivedDateEdit.texts()[0].strip():
+			sl_win.ReceivedDateEdit.set_text(unit.eff_date.strftime('%m/%d/%Y %I:%M:%S %p'))
+			sl_win.ReceivedDateEdit.send_keystrokes('^s')
+		if not sl_win.FloorDateEdit.texts()[0].strip():
+			sl_win.FloorDateEdit.set_text(oldest_datetime.strftime('%m/%d/%Y %I:%M:%S %p'))
+			sl_win.FloorDateEdit.send_keystrokes('^s')
+		if not sl_win.CompletedDateEdit.texts()[0].strip() and any(x.is_QC for x in units):
+			sl_win.CompletedDateEdit.set_text(newest_datetime.strftime('%m/%d/%Y %I:%M:%S %p'))
+			sl_win.CompletedDateEdit.send_keystrokes('^s')
+		sleep(0.5)
+		log.debug(f"Recieved date: {sl_win.ReceivedDateEdit.texts()[0].strip()}")
+		log.debug(f"Floor date: {sl_win.FloorDateEdit.texts()[0].strip()}")
+		log.debug(f"Completed date: {sl_win.CompletedDateEdit.texts()[0].strip()}")
+	# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
+	common_controls.TabControlWrapper(sl_win.TabControl).select('Reasons')  # Open 'Reasons' Tab
+	if any(x.is_QC for x in units):
+		reason_grid = uia_controls.ListViewWrapper(sl_uia.DataGridView.element_info)
+		reason_rows = access_grid(reason_grid, ['General Reason', 'Specific Reason', 'General Resolution', 'Specific Resolution'])
+		full_row = None
+		empty_row_i = len(reason_rows) - 1
+		partial = False
+		for i, row in enumerate(reason_rows[::-1]):
+			if {row.General_Reason, row.Specific_Reason, row.General_Resolution, row.Specific_Resolution} == {None,
+			                                                                                                  None,
+			                                                                                                  None,
+			                                                                                                  None}:
+				empty_row_i = len(reason_rows) - (i + 1)
+				partial = False
+			elif {row.Specific_Reason, row.General_Resolution, row.Specific_Resolution} == {None, None, None}:
+				empty_row_i = len(reason_rows) - (i + 1)
+				partial = True
+				full_row = row
+			else:
+				if full_row is None:
+					full_row = row
+				break
+		top_row_i = reason_grid.children_texts().index('Top Row')
+		top_row = reason_grid.children()[top_row_i]
+		open_row = uia_controls.ListViewWrapper(reason_grid.children()[empty_row_i + top_row_i + 1].element_info)
+
+		gen_resn = uia_controls.ListItemWrapper(open_row.item(top_row.children_texts().index('General Reason')).element_info)
+		spec_resn = uia_controls.ListItemWrapper(open_row.item(top_row.children_texts().index('Specific Reason')).element_info)
+		gen_reso = uia_controls.ListItemWrapper(open_row.item(top_row.children_texts().index('General Resolution')).element_info)
+		spec_reso = uia_controls.ListItemWrapper(open_row.item(top_row.children_texts().index('Specific Resolution')).element_info)
+
+		pag.click(*center(gen_resn))
+		dlg = app.get_popup()
+		while dlg:
+			log.debug(f"Operations Reason Grid dialog text: '{dlg.Text}'")
+			dlg[0].close()
+			dlg = app.get_popup()
+		q = []
+		if not partial:
+			q.append((center(gen_resn), str(full_row.General_Reason)))
+		q.append((center(spec_resn), str(unit.specific_reason)))
+		q.append((center(gen_reso), str(unit.general_resolution)))
+		q.append((center(spec_reso), str(unit.specific_resolution)))
+		for coord, num in q:
+			pag.click(*coord)
+			sleep(0.5)
+			pag.typewrite(str(num))
+			sleep(0.5)
+		if not dummy_mode:
+			pag.hotkey('ctrl', 's')
+		pag.press('up', 40)
+	resn_notes = sl_win.ReasonNotesEdit
+	reason_notes = resn_notes.texts()[0]
+	if reason_notes:
+		reason_notes += '\n'
+	if resn_notes.texts()[0].strip():
+		pag.press('enter')
+		pag.typewrite("[UDI]")
+		pag.press('enter')
+		pag.typewrite("[PASSED ALL TESTS]")
+	reso_notes = sl_win.ResolutionNotesEdit
+	if any(len(x.parts) > 0 for x in units):
+		resolution_notes = reso_notes.texts()[0]
+		if resolution_notes:
+			resolution_notes += '\n'
+		for unit in units:
+			resolution_notes += "[" + ", ".join([p.display_name for p in unit.parts]) + "]\n"
+			resolution_notes += f"[{unit.operator} {unit.datetime.strftime('%m/%d/%Y')}]\n"
+		reso_notes.set_text(resolution_notes)
+	if not dummy_mode:
+		pag.hotkey('ctrl', 's')
+		status = win32_controls.EditWrapper(sl_win.StatusEdit3.element_info)
+		status.send_keystrokes('^s')
+		status.wait_for_idle()
+		if any(x.is_QC for x in units) or not unit.sro_open_status['Operations']:
+			status = win32_controls.EditWrapper(sl_win.StatusEdit3.element_info)
+			sl_win.set_focus()
+			status.set_keyboard_focus()
+			status.send_keystrokes('{DOWN}{DOWN}')
+			try:
+				status.send_keystrokes('^s')
+				sleep(1)
+			except TimeoutError:
+				pass
+			finally:
+				keyboard.SendKeys('{ESC}')
+	sro_operations_time = timer.stop().total_seconds() / len(units)
+	for x in units:
+		x.sro_operations_time += sro_operations_time
+	for presses in range(2):
+		sl_uia.CancelCloseButton.click()
+	sl_win.UnitEdit.wait('visible', 2, 0.09)
+	sleep(0.2)
+	sl_win.send_keystrokes('{F4}')  # Clear Filter
+	sleep(0.2)
+	sl_win.send_keystrokes('{F5}')  # Clear Filter
+	sleep(0.2)
Index: config.ini
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- config.ini	(revision Local Version)
+++ config.ini	(revision Shelved Version)
@@ -9,13 +9,13 @@
 multiprocess = False
 
 [Schedule]
-active_days = 1,2,3,4,5,6
-active_hours = 0,1,5,6,7,8,9,10,11,12,13,14,15,18,19,20,21,22,23
+active_days = 1-6
+active_hours = 0,1,5-15,18-23
 
 [Paths]
 sl_exe = C:/Users/mfgpc00/AppData/Local/Apps/2.0/QQC2A2CQ.YNL/K5YT3MK7.VDY/sl8...ient_002c66e0bc74a4c9_0008.0003_1fdd36ef61625f38/WinStudio.exe
 pip_exe = C:/Users/mfgpc00/AppData/Local/Programs/Python/Python36/Scripts/pip3.6.exe
-cwd = C:/Users/mfgpc00/Documents
+cwd = C:/Users/mfgpc00/Documents/GitHub/bi_entry
 
 [Login]
 username = jredding
@@ -58,13 +58,13 @@
 class = handlers.TimedRotatingFileHandler
 level = INFO
 formatter = infoFormatter
-args = ('C:/Users/mfgpc00/Documents/logs/info.log', 'D', 7, 3)
+args = ('C:/Users/mfgpc00/Documents/GitHub/bi_entry/logs/info.log', 'D', 7, 3)
 
 [handler_debugHandler]
 class = FileHandler
 level = DEBUG
 formatter = debugFormatter
-args = ('C:/Users/mfgpc00/Documents/logs/dbg.log', 'w')
+args = ('C:/Users/mfgpc00/Documents/GitHub/bi_entry/logs/dbg.log', 'w')
 
 [handler_consoleHandler]
 class = StreamHandler
Index: sql.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- sql.py	(revision Local Version)
+++ sql.py	(revision Local Version)
@@ -1,110 +0,0 @@
-import datetime
-import decimal
-import logging.config
-import pymssql
-import sqlite3
-from collections import namedtuple
-from typing import NamedTuple, Tuple, overload
-
-from constants import REGEX_SQL_DATE as sql_date_regex, REGEX_SQL_TIME as sql_time_regex
-
-logging.config.fileConfig("config.ini")
-log = logging
-
-type_codes = {1: str, 2: bytes, 3: int, 4: datetime.datetime, 5: decimal.Decimal}
-
-
-def adapt_type(x):
-	if type(x) is str:
-		val = sql_date_regex.match(x)
-		if val is not None:
-			return datetime.date(int(val.group('year')), int(val.group('month')), int(val.group('day')))
-		val = sql_time_regex.match(x)
-		if val is not None:
-			return datetime.time(int(val.group('hour')), int(val.group('minute')), int(val.group('second')),
-			                     int(val.group('microsecond')))
-		return x
-	else:
-		return x
-
-
-class _SQL:
-	@overload
-	def execute(self, command: str, fetchall: bool) -> Tuple[NamedTuple, ...]:
-		...
-
-	@overload
-	def execute(self, command: str, fetchall: None = None) -> NamedTuple:
-		...
-
-	def execute(self, command, fetchall: bool = None):
-		c = self._conn.cursor()
-		if command.upper().startswith('SELECT'):
-			if not self.quiet:
-				log.debug(f"Executing SQL query: '{command}'")
-			c.execute(command)
-			if self.method == 'MS':
-				SQL_Results = NamedTuple('SQL_Results',
-				                         [(x[0].replace(' ', '_'), type_codes[x[1]]) for x in c.description])
-				if fetchall:
-					results = tuple([SQL_Results(*[adapt_type(y) for y in x]) for x in c.fetchall() if x is not None])
-				else:
-					results = c.fetchone()
-					if results is not None:
-						results = SQL_Results(*[adapt_type(y) for y in results])
-				if not self.quiet:
-					log.debug(f"SQL query successful, value(s) returned: {results}")
-			else:
-				SQL_Results = namedtuple('SQL_Results', [x[0].replace(' ', '_') for x in c.description])
-				if fetchall:
-					results = tuple([SQL_Results(*[y for y in x]) for x in c.fetchall() if x is not None])
-				else:
-					results = c.fetchone()
-					if results is not None:
-						results = SQL_Results(*[y for y in results])
-				if not self.quiet:
-					log.debug(f"SQL query successful, value(s) returned: {results}")
-			return results
-		elif 'DELETE' in command.upper():
-			if not self.quiet:
-				log.debug(f"Executing SQL transaction: '{command}'")
-				log.info(f"Executing SQL transaction: '{command}'")
-			c.execute(command)
-			self._conn.commit()
-			if not self.quiet:
-				log.debug("SQL transaction successful")
-				log.info("SQL transaction successful")
-			return None
-		else:
-			if not self.quiet:
-				log.debug(f"Executing SQL transaction: '{command}'")
-			c.execute(command)
-			self._conn.commit()
-			if not self.quiet:
-				log.debug("SQL transaction successful")
-			return None
-
-
-class MS_SQL(_SQL):
-	def __init__(self, address: str, username: str, password: str, database: str, quiet: bool = False):
-		try:
-			conn = pymssql.connect(server=address, user=username, password=password, database=database,
-			                       login_timeout=10)
-		except Exception:
-			raise ConnectionError("Connection to SQL Server failed!")
-		else:
-			self._conn = conn
-			self.method = 'MS'
-			self.quiet = quiet
-
-
-class SQL_Lite(_SQL):
-	def __init__(self, database: str, detect_types: int = 0, quiet: bool = False):
-		try:
-			conn = sqlite3.connect(database=database, detect_types=detect_types)
-		except Exception:
-			raise ConnectionError("Connection to SQL Server failed!")
-		else:
-			self._conn = conn
-			self.method = 'LITE'
-			self.quiet = quiet
Index: common.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- common.py	(revision Local Version)
+++ common.py	(revision Local Version)
@@ -1,964 +0,0 @@
-import configparser
-import datetime
-import logging.config
-import pathlib
-import re
-from collections import defaultdict, namedtuple
-from random import choice
-from string import ascii_lowercase, punctuation
-from sys import exc_info
-from time import sleep
-from typing import Any, Dict, Iterable, List, NamedTuple, Optional, Tuple, Union
-
-import psutil
-import pyautogui as pag
-import pywinauto as pwn
-import win32gui
-from pywinauto.controls import common_controls, uia_controls, win32_controls
-
-from constants import CARRIER_DICT, CELLULAR_BUILDS, REGEX_BUILD, REGEX_BUILD_ALT, REGEX_RESOLUTION, REGEX_WINDOW_MENU_FORM_NAME, SUFFIX_DICT, SYTELINE_WINDOW_TITLE
-from exceptions import *
-from sql import MS_SQL
-
-logging.config.fileConfig('config.ini')
-log = logging
-
-config = configparser.ConfigParser()
-
-"""Select ser_num, item from fs_unit (nolock)
-Inner join 
-( VALUES ('ACB'),('BE'),('BS'),('GMU'),('HB'),('HG'),('HGM'),('HGR'),('HGS'),('LC'),('LCB'),('OT'),('PM'),('SL'),('TD')) as p ([Prefix])
-On LEFT(ser_num,LEN(p.Prefix)) = p.Prefix
-Where Right(ser_num, Len(ser_num) - len(p.Prefix)) IN 
-(('SN1'),('SN2'),('SN3')...)
-"""
-
-completion_dict = {'Queued': 'C1', 'Scrap': 'C2', 'Reason': 'C3'}
-
-Dialog = NamedTuple('Dialog', [('self', pwn.WindowSpecification), ('Title', str), ('Text', str),
-                               ('Buttons', Dict[str, win32_controls.ButtonWrapper])])
-
-
-# - - - - - - - - - - - - - - - - - - -  CLASSES  - - - - - - - - - - - - - - - - - - - -
-class Part:
-	def __init__(self, sql: MS_SQL, part_number: str, quantity: int = 1, spec_build: str = None):
-		if '-' in part_number:
-			self.part_number = part_number
-			"""# FOR 206's:
-				;With t as 
-				(Select DISTINCT [DispName], [PartNum] FROM [Parts] WHERE [Product] = 'HomeGuard' And [Operation] = 'Update' and [Build] = '206'
-				Union All
-				Select DISTINCT [DispName], [PartNum] FROM [Parts] WHERE [Product] = 'HomeGuard' And [Operation] = 'Update' and [Build] = 'All')
-				Select distinct * from t"""
-			if spec_build:
-				_data = sql.execute(
-						f"SELECT [Qty],[DispName],[Location],[PartName] FROM Parts WHERE [PartNum] = '{self.part_number}' AND [Build] = '{spec_build}'") \
-					if sql.execute(
-						f"SELECT [Qty],[DispName],[Location],[PartName] FROM Parts WHERE [PartNum] = '{self.part_number}' AND [Build] = '{spec_build}'") \
-					else sql.execute(
-						f"SELECT [Qty],[DispName],[Location],[PartName] FROM Parts WHERE [PartNum] = '{self.part_number}'")
-			else:
-				_data = sql.execute(
-						f"SELECT [Qty],[DispName],[Location],[PartName] FROM Parts WHERE [PartNum] = '{self.part_number}' AND [Build] = 'All'") \
-					if sql.execute(
-						f"SELECT [Qty],[DispName],[Location],[PartName] FROM Parts WHERE [PartNum] = '{self.part_number}' AND [Build] = 'All'") \
-					else sql.execute(
-						f"SELECT [Qty],[DispName],[Location],[PartName] FROM Parts WHERE [PartNum] = '{self.part_number}'")
-		else:
-			_data = sql.execute(
-					f"SELECT [PartNum],[Qty],[DispName],[Location],[PartName] FROM Parts WHERE [ID] = {part_number}")
-			self.part_number = _data.PartNum
-		self.quantity = quantity * _data.Qty
-		self.display_name = _data.DispName
-		self.part_name = _data.PartName
-		self.location = _data.Location
-
-	def __repr__(self):
-		return f"<Part object; {self.part_number}x{self.quantity}>"
-
-	def __str__(self):
-		return f"{self.display_name}({self.part_number}) x {self.quantity}"
-
-
-class Unit:
-	def __init__(self, mssql: MS_SQL, slsql: MS_SQL, args: NamedTuple):
-		config.read_file(open('config.ini'))
-		self._mssql = mssql
-		self._slsql = slsql
-		self.version = config.get('DEFAULT', 'version')
-		tbl_mod = config.get('DEFAULT', 'table')
-		self._table = 'PyComm' if int(tbl_mod) else 'PyComm2'
-		self.id, self.serial_number, self.operation, self.operator, \
-		self.datetime, self.notes, self._status = (args.Id, args.Serial_Number, args.Operation, args.Operator,
-		                                           args.DateTime, args.Notes, args.Status)
-		self._status2 = self._status
-		self._status = 'Queued' if self._status2 == 'Custom(Queued)' else self._status
-		self.operation = self.operation.strip() if self.operation is not None else None
-		self.operator = self.operator.strip() if self.operator is not None else None
-		self.notes = self.notes.strip() if self.notes is not None else None
-		log.debug(f"Attribute id={self.id}")
-		log.debug(f"Attribute serial_number='{self.serial_number}'")
-		log.debug(f"Attribute operation='{self.operation}'")
-		log.debug(f"Attribute operator='{self.operator}'")
-		log.debug(f"Attribute notes='{self.notes}'")
-		log.debug(f"Attribute _status='{self._status}'")
-		log.debug(f"Property datetime='{self.datetime}'")
-		"""From PyComm p
-				Cross apply dbo.Split(p.Parts, ',') b
-				Inner join Parts n
-				on b.items = n.PartNum
-				Where p.[Serial Number] = @SN
-		"""
-		if self._status.lower() == 'reason' and self.notes is None:
-			raise InvalidReasonCodeError(reason_code=str(self.notes), spec_id=str(self.id))
-		# elif self._status.lower() == 'scrap' and self.notes is None:
-		# 	raise InvalidReasonCodeError(reason_code=str(self.notes), spec_id=str(self.id))
-		self._serial_number_prefix = self._product = self.whole_build = self._operator_initials = \
-			self.eff_date = self.sro_num = self.sro_line = self.SRO_Operations_status = self.SRO_Line_status = None
-		self.parts_transacted = []
-		self.timer = TestTimer()
-		self._life_timer = TestTimer()
-		self._life_timer.start()
-		self._start_time = datetime.datetime.now().time().strftime("%H:%M:%S.%f")
-		self._date = datetime.datetime.now().date().strftime("%Y-%m-%d")
-		self.sro_operations_time = datetime.timedelta(0)
-		self.sro_transactions_time = datetime.timedelta(0)
-		self.misc_issue_time = datetime.timedelta(0)
-		self.sro_operations_timer = TestTimer()
-		self.sro_transactions_timer = TestTimer()
-		self.misc_issue_timer = TestTimer()
-		log.debug(f"Property product='{self.product}'")
-		log.debug(f"Property operator_initials='{self.operator_initials}'")
-		sn1 = sn2 = f"{self.serial_number_prefix}{self.serial_number}"
-		if self.serial_number_prefix == 'BE':
-			sn2 = f"ACB{self.serial_number}"
-		build_data = self._slsql.execute("Select top 1 * from ("
-		                                 "select ser_num, item, "
-		                                 "Case when loc is null then 'Out of Inventory' "
-		                                 "else loc "
-		                                 "end as [Inv_Stat], whse "
-		                                 f"from serial (nolock) where ser_num = '{sn1}' "
-		                                 "Union All "
-		                                 "select ser_num, item, "
-		                                 "Case when loc is null then 'Out of Inventory' "
-		                                 "else loc "
-		                                 "end as [Inv_Stat], whse "
-		                                 f"from serial (nolock) where ser_num = '{sn2}') t")
-		if build_data is None:
-			if self._status.lower() != 'scrap':
-				raise NoSROError(serial_number=self.serial_number)
-			loc, whse = 'Out of Inventory', None
-			gc, item = self.get_serial_build()
-			log.debug(f"Property serial_number_prefix='{self.serial_number_prefix}'")
-			self.update_sl_data()
-		else:
-			gc, item, loc, whse = build_data
-			if gc.upper().startswith('BE'):
-				self.serial_number_prefix = 'BE'
-			elif gc.upper().startswith('ACB'):
-				self.serial_number_prefix = 'ACB'
-			log.debug(f"Property serial_number_prefix='{self.serial_number_prefix}'")
-			self.update_sl_data()
-		if self.sl_data is None:
-			self.sro_num, self.sro_line, self.eff_date, self.SRO_Line_status, self.SRO_Operations_status = None, None, None, 'Closed', 'Closed'
-		log.debug(f"Attribute sro_num='{self.sro_num}'")
-		log.debug(f"Attribute sro_line='{self.sro_line}'")
-		log.info(f"Unit sro_num='{self.sro_num}'")
-		log.info(f"Unit sro_line='{self.sro_line}'")
-		log.debug(f"Attribute eff_date='{self.eff_date}'")
-		log.debug(f"Attribute SRO_Line_status='{self.SRO_Line_status}'")
-		log.debug(f"Attribute SRO_Operations_status='{self.SRO_Operations_status}'")
-		self._regex_dict = REGEX_BUILD_ALT.match(item.upper()).groupdict(default='-') if REGEX_BUILD_ALT.match(
-				item.upper()) is not None else REGEX_BUILD.match(item.upper()).groupdict(default='-')
-		log.debug(self._regex_dict.items())
-		self.location = loc
-		log.debug(f"Attribute location='{self.location}'")
-		self.warehouse = whse
-		log.debug(f"Attribute warehouse='{self.warehouse}'")
-		self.build = self._regex_dict['build'][1:] if self._regex_dict['carrier'].isnumeric() else self._regex_dict[
-			                                                                                           'build'][:3]
-		log.debug(f"Attribute build='{self.build}'")
-		self.suffix = SUFFIX_DICT[self._regex_dict['suffix']]
-		log.debug(f"Attribute suffix='{self.suffix}'")
-		self.whole_build = item.upper()
-		log.debug(f"Attribute whole_build='{self.whole_build}'")
-		self.phone = self.whole_build in CELLULAR_BUILDS
-		log.debug(f"Attribute phone={self.phone}")
-		self.carrier = CARRIER_DICT[self._regex_dict['carrier']]
-		log.debug(f"Attribute carrier='{self.carrier}'")
-		if self._status.lower() != 'scrap' and self.SRO_Line_status == 'Closed':
-			if self.sro_num is None:
-				raise NoSROError(serial_number=str(self.serial_number))
-			else:
-				raise NoOpenSROError(serial_number=str(self.serial_number), sro=str(self.sro_num))
-		self.parts = args.Parts
-		log.debug(f"Property parts='{self.parts}'")
-		self.general_reason = 1000
-		self.specific_reason = 20
-		self.general_resolution = 10000
-		self.specific_resolution = 100
-		if 'queued' not in self._status.lower():
-			try:
-				if 'queued' not in self._status.lower() and REGEX_RESOLUTION.match(self.notes):
-					self.general_resolution, self.specific_resolution = [int(x) for x in
-					                                                     REGEX_RESOLUTION.match(self.notes).groups()]
-					if 'scrap' in self._status.lower():
-						self.specific_resolution_name = self._status.upper()
-					self.general_resolution_name = \
-						mssql.execute(f"SELECT TOP 1 [Failure] FROM FailuresRepairs WHERE [ReasonCodes] = '{self.notes}'")[
-							0]
-			except TypeError as ex:
-				raise InvalidReasonCodeError(reason_code=str(self.notes), spec_id=str(self.id), msg=str(ex))
-			# TODO: For HG, allow Invalid Reason Codes, just enter in operator initials
-		if self._status.lower() != 'scrap':
-			self.start()
-
-	def start(self):
-		self._mssql.execute(
-				f"UPDATE {self._table} SET [Status] = 'Started({self._status2})' WHERE [Id] = {self.id} AND [Serial Number] = '{self.serial_number}'")
-		self._life_timer = TestTimer()
-		self._life_timer.start()
-		self._start_time = datetime.datetime.now().time().strftime("%H:%M:%S.%f")
-		self._date = datetime.datetime.now().date().strftime("%Y-%m-%d")
-
-	def complete(self, batch_amt: int = None):
-		if batch_amt is None:
-			batch_amt = 10 if self._status.lower() == 'scrap' else 1
-		log.debug(f"Batch amount: {batch_amt}")
-		self.sro_operations_time += self.sro_operations_timer.stop()
-		self.sro_transactions_time += self.sro_transactions_timer.stop()
-		self.misc_issue_time += self.misc_issue_timer.stop()
-		life_time = self._life_timer.stop().total_seconds()
-		if len(self.parts_transacted) > 0:
-			try:
-				t_parts = ', '.join(x.part_number + ' x ' + str(x.quantity) for x in self.parts_transacted)
-			except TypeError:
-				t_parts = 'None'
-		else:
-			t_parts = 'None'
-		process = 'Transaction' if self._status == 'Queued' else self._status
-		life_time /= batch_amt
-		end_time = datetime.datetime.now().time().strftime("%H:%M:%S.%f")
-		len_parts = len(self.parts) if self.parts is not None else 0
-		parts = ', '.join(
-				x.part_number + ' x ' + str(x.quantity) for x in self.parts) if self.parts is not None else None
-		carrier = self.carrier[0].upper() if self.carrier is not None else '-'
-		self._mssql.execute("INSERT INTO [Statistics]"
-		                    "([Serial Number],[Carrier],[Build],[Suffix],[Operator],[Operation],"
-		                    "[Part Nums Requested],[Part Nums Transacted],[Parts Requested],[Parts Transacted],[Input DateTime],[Date],"
-		                    "[Start Time],[SRO Operations Time],[SRO Transactions Time],[Misc Issue Time],[End Time],"
-		                    "[Total Time],[Process],[Results],[Version])"
-		                    f"VALUES ('{self.serial_number}','{carrier}','{self.build}',"
-		                    f"'{self.suffix}','{self.operator}','{self.operation}','{parts}',"
-		                    f"'{t_parts}',{len_parts},{len(self.parts_transacted)},"
-		                    f"'{self.datetime.strftime('%m/%d/%Y %H:%M:%S')}','{self._date}','{self._start_time}',"
-		                    f"{self.sro_operations_time.total_seconds()},{self.sro_transactions_time.total_seconds()},"
-		                    f"{self.misc_issue_time.total_seconds()},'{end_time}',"
-		                    f"{life_time},'{process}','Completed','{self.version}')")
-		self._mssql.execute(
-				f"UPDATE {self._table} SET [Status] = '{completion_dict[self._status]}' WHERE [Id] = {self.id} AND [Serial Number] = '{self.serial_number}'")
-
-	def skip(self, reason: Optional[str] = None, batch_amt: int = None):
-		if batch_amt is None:
-			batch_amt = 10 if self._status.lower() == 'scrap' else 1
-		log.debug(f"Batch amount: {batch_amt}")
-		self.sro_operations_time += self.sro_operations_timer.stop()
-		self.sro_transactions_time += self.sro_transactions_timer.stop()
-		self.misc_issue_time += self.misc_issue_timer.stop()
-		life_time = self._life_timer.stop().total_seconds()
-		reason = 'Skipped' if reason is None else reason
-		if len(self.parts_transacted) > 0:
-			try:
-				t_parts = ', '.join(x.part_number + ' x ' + str(x.quantity) for x in self.parts_transacted)
-			except TypeError:
-				t_parts = 'None'
-		else:
-			t_parts = 'None'
-		process = 'Transaction' if self._status == 'Queued' else self._status
-		life_time /= batch_amt
-		end_time = datetime.datetime.now().time().strftime("%H:%M:%S.%f")
-		len_parts = len(self.parts) if self.parts is not None else 0
-		parts = ', '.join(
-				x.part_number + ' x ' + str(x.quantity) for x in self.parts) if self.parts is not None else None
-		addon = f"({sro})" if reason == 'No Open SRO' else ""
-		carrier = self.carrier[0].upper() if self.carrier is not None else '-'
-		self._mssql.execute(
-				f"UPDATE {self._table} SET [Status] = '{reason}({self._status2}){addon}' WHERE [Id] = {self.id} AND [Serial Number] = '{self.serial_number}'")
-		self._mssql.execute("INSERT INTO [Statistics]"
-		                    "([Serial Number],[Carrier],[Build],[Suffix],[Operator],[Operation],"
-		                    "[Part Nums Requested],[Part Nums Transacted],[Parts Requested],[Parts Transacted],[Input DateTime],[Date],"
-		                    "[Start Time],[SRO Operations Time],[SRO Transactions Time],[Misc Issue Time],[End Time],"
-		                    "[Total Time],[Process],[Results],[Reason],[Version])"
-		                    f"VALUES ('{self.serial_number}','{carrier}','{self.build}',"
-		                    f"'{self.suffix}','{self.operator}','{self.operation}','{parts}',"
-		                    f"'{t_parts}',{len_parts},{len(self.parts_transacted)},"
-		                    f"'{self.datetime.strftime('%m/%d/%Y %H:%M:%S')}','{self._date}','{self._start_time}',"
-		                    f"{self.sro_operations_time.total_seconds()},{self.sro_transactions_time.total_seconds()},"
-		                    f"{self.misc_issue_time.total_seconds()},'{end_time}',"
-		                    f"{life_time},'{process}','Skipped','{reason}','{self.version}')")
-
-	def reset(self):
-		self._mssql.execute(
-				f"UPDATE {self._table} SET [Status] = '{self._status2}' WHERE [Id] = {self.id} AND [Serial Number] = '{self.serial_number}'")
-
-	def update_sl_data(self):
-		try:
-			self.sro_num, self.sro_line, self.eff_date, self.SRO_Operations_status, self.SRO_Line_status = self.sl_data
-		except TypeError as ex:
-			if re.search(r"NoneType.*not iterable", str(exc_info()[1])) is None:
-				raise ex
-
-	@property
-	def sl_data(self) -> NamedTuple:
-		return self._slsql.execute("Select TOP 1 s.sro_num, l.sro_line, c.eff_date as 'Eff Date', "
-		                           "Case when o.stat = 'C' then 'Closed' else 'Open' end as [SRO Operation Status], "
-		                           "Case when l.stat = 'C' then 'Closed' else 'Open' end as [SRO Line Status] "
-		                           "From fs_sro s (nolock) "
-		                           "Inner join fs_sro_line l (nolock) "
-		                           "on s.sro_num = l.sro_num "
-		                           "Inner join fs_unit_cons c (nolock) "
-		                           "on l.ser_num = c.ser_num "
-		                           "Inner join fs_sro_oper o (nolock) "
-		                           "on l.sro_num = o.sro_num and l.sro_line = o.sro_line "
-		                           "Left join fs_unit_cons c2 (nolock) "
-		                           "on c.ser_num = c2.ser_num and c.eff_date < c2.eff_date "
-		                           "Where c2.eff_date IS NULL AND "
-		                           f"l.ser_num = '{self.serial_number_prefix+self.serial_number}' "
-		                           "Order by s.open_date DESC")
-
-	def get_serial_build(self) -> NamedTuple:
-		return self._slsql.execute("Select top 1 * from "
-		                           "(Select ser_num, item from serial "
-		                           f"(nolock) where ser_num = '{self.serial_number_prefix+self.serial_number}' "
-		                           "Union All "
-		                           "Select ser_num, item from fs_unit "
-		                           f"(nolock) where ser_num = '{self.serial_number_prefix+self.serial_number}') t")
-
-	@property
-	def serial_number_prefix(self) -> str:
-		try:
-			if self._serial_number_prefix is None:
-				value = self._mssql.execute(
-						f"SELECT p.[Prefix] FROM Prefixes p INNER JOIN Prefixes r ON r.[Product]=p.[Product] WHERE r.[Prefix] = '{self.serial_number[:2]}' AND r.[Type] = 'N' AND p.[Type] = 'P'")[
-					0]
-			else:
-				value = self._serial_number_prefix
-		except Exception as ex:
-			raise ex
-		except (ValueError, KeyError, IndexError):
-			value = None
-		finally:
-			self._serial_number_prefix = value
-			return self._serial_number_prefix
-
-	@serial_number_prefix.setter
-	def serial_number_prefix(self, value: str):
-		self._serial_number_prefix = value
-
-	@property
-	def parts(self) -> List[Part]:
-		return self._parts
-
-	@parts.setter
-	def parts(self, value):
-		if value:
-			value = value.strip()
-			value = value.split(',')
-			if value != ['']:
-				if '206' in self.whole_build:
-					self._parts = list({Part(self._mssql, x, spec_build='206') for x in value})
-				elif '200' in self.whole_build:
-					self._parts = list({Part(self._mssql, x, spec_build='200') for x in value})
-				else:
-					self._parts = list({Part(self._mssql, x) for x in value})
-		else:
-			self._parts = None
-
-	@property
-	def datetime(self) -> datetime.datetime:
-		return self._datetime
-
-	@datetime.setter
-	def datetime(self, value: str):
-		if type(value) is str:
-			self._datetime = datetime.datetime.strptime(value, "%m/%d/%Y %I:%M:%S %p")
-		else:
-			self._datetime = value
-
-	@property
-	def operator_initials(self):
-		if self._operator_initials is None:
-			first, last = self._mssql.execute(
-					f"SELECT [FirstName],[LastName] FROM Users WHERE [Username] = '{self.operator}'")
-			self._operator_initials = first.strip()[0].upper() + last.strip()[0].upper()
-		return self._operator_initials
-
-	@operator_initials.setter
-	def operator_initials(self, value):
-		self._operator_initials = value
-
-	@property
-	def product(self):
-		if self._product is None:
-			data = self._mssql.execute(f"SELECT [Product] FROM Prefixes WHERE [Prefix] = '{self.serial_number_prefix}'")
-			if not data:
-				raise ValueError
-			self._product = data[0]
-		return self._product
-
-	@product.setter
-	def product(self, value):
-		self._product = value
-
-
-class Unit_ALT:
-	def __init__(self, mssql: MS_SQL, slsql: MS_SQL, sn: str):
-		self.SKIPME = False
-		self._mssql = mssql
-		self._slsql = slsql
-		self.serial_number = sn
-		self._serial_number_prefix = self.eff_date = self.sro_num = self.sro_line = self.SRO_Operations_status = self.SRO_Line_status = None
-		sn1 = sn2 = f"{self.serial_number_prefix}{self.serial_number}"
-		if self.serial_number_prefix == 'BE':
-			sn2 = f"ACB{self.serial_number}"
-		build_data = self._slsql.execute("Select top 1 * from ("
-		                                 "select ser_num, item, "
-		                                 "Case when loc is null then 'Out of Inventory' "
-		                                 "else loc "
-		                                 "end as [Inv_Stat], whse "
-		                                 f"from serial (nolock) where ser_num = '{sn1}' "
-		                                 "Union All "
-		                                 "select ser_num, item, "
-		                                 "Case when loc is null then 'Out of Inventory' "
-		                                 "else loc "
-		                                 "end as [Inv_Stat], whse "
-		                                 f"from serial (nolock) where ser_num = '{sn2}') t")
-		if build_data is None:
-			self.SKIPME = True
-		else:
-			gc, item, loc, whse = build_data
-			if gc.upper().startswith('BE'):
-				self.serial_number_prefix = 'BE'
-			elif gc.upper().startswith('ACB'):
-				self.serial_number_prefix = 'ACB'
-			self.update_sl_data()
-		if self.sl_data is None:
-			self.SKIPME = True
-		elif self.SRO_Line_status == 'Closed':
-			self.SKIPME = True
-		elif self.SRO_Operations_status == 'Closed':
-			self.SKIPME = True
-
-	def update_sl_data(self):
-		try:
-			self.sro_num, self.sro_line, self.eff_date, self.SRO_Operations_status, self.SRO_Line_status = self.sl_data
-		except TypeError as ex:
-			if re.search(r"NoneType.*not iterable", str(exc_info()[1])) is None:
-				raise ex
-
-	@property
-	def sl_data(self) -> NamedTuple:
-		return self._slsql.execute("Select TOP 1 s.sro_num, l.sro_line, c.eff_date as 'Eff Date', "
-		                           "Case when o.stat = 'C' then 'Closed' else 'Open' end as [SRO Operation Status], "
-		                           "Case when l.stat = 'C' then 'Closed' else 'Open' end as [SRO Line Status] "
-		                           "From fs_sro s (nolock) "
-		                           "Inner join fs_sro_line l (nolock) "
-		                           "on s.sro_num = l.sro_num "
-		                           "Inner join fs_unit_cons c (nolock) "
-		                           "on l.ser_num = c.ser_num "
-		                           "Inner join fs_sro_oper o (nolock) "
-		                           "on l.sro_num = o.sro_num and l.sro_line = o.sro_line "
-		                           "Left join fs_unit_cons c2 (nolock) "
-		                           "on c.ser_num = c2.ser_num and c.eff_date < c2.eff_date "
-		                           "Where c2.eff_date IS NULL AND "
-		                           f"l.ser_num = '{self.serial_number_prefix+self.serial_number}' "
-		                           "Order by s.open_date DESC")
-
-	def get_serial_build(self) -> NamedTuple:
-		return self._slsql.execute("Select top 1 * from "
-		                           "(Select ser_num, item from serial "
-		                           f"(nolock) where ser_num = '{self.serial_number_prefix+self.serial_number}' "
-		                           "Union All "
-		                           "Select ser_num, item from fs_unit "
-		                           f"(nolock) where ser_num = '{self.serial_number_prefix+self.serial_number}') t")
-
-	@property
-	def serial_number_prefix(self) -> str:
-		try:
-			if self._serial_number_prefix is None:
-				value = self._mssql.execute(
-						f"SELECT p.[Prefix] FROM Prefixes p INNER JOIN Prefixes r ON r.[Product]=p.[Product] WHERE r.[Prefix] = '{self.serial_number[:2]}' AND r.[Type] = 'N' AND p.[Type] = 'P'")[
-					0]
-			else:
-				value = self._serial_number_prefix
-		except Exception as ex:
-			raise ex
-		except (ValueError, KeyError, IndexError):
-			value = None
-		finally:
-			self._serial_number_prefix = value
-			return self._serial_number_prefix
-
-	@serial_number_prefix.setter
-	def serial_number_prefix(self, value: str):
-		self._serial_number_prefix = value
-
-
-class Application(psutil.Process):
-	def __init__(self, fp: Union[str, pathlib.Path], exclude: Union[int, Iterable[int]] = None):
-		if type(fp) is pathlib.Path:
-			fp = str(fp)
-		# TODO: Improve catching already open and available application instances
-		if is_running(fp, exclude):
-			super().__init__(process_pid(fp, exclude))
-		else:
-			super().__init__(psutil.Popen(fp).pid)
-		self.fp = fp
-		self.nice(psutil.HIGH_PRIORITY_CLASS)
-		self.win32 = pwn.Application(backend='win32').connect(process=self.pid)
-		self.uia = pwn.Application(backend='uia').connect(process=self.pid)
-		self._user = None
-		self.logged_in = False
-
-	def log_in(self, usr: str, pwd: str):
-		if not self.logged_in and self.win32.SignIn.exists(10, 0.09):
-			log.info("SyteLine not logged in, starting login procedure")
-			self.win32.SignIn.UserLoginEdit.set_text(usr)
-			self.win32.SignIn.PasswordEdit.set_text(pwd)
-			self.win32.SignIn.set_focus()
-			self.win32.SignIn.OKButton.click()
-			if not self.win32.SignIn.exists(10, 0.09):
-				self.win32.window(title_re=SYTELINE_WINDOW_TITLE).wait('ready', 2, 0.09)
-				self.logged_in = True
-				log.info(f"Successfully logged in as '{usr}'")
-				sleep(4)
-			else:
-				log.warning(f"Login attempt as '{usr}' unsuccessful")
-
-	def log_out(self):
-		if self.logged_in and self.uia.window(title_re=SYTELINE_WINDOW_TITLE).exists(10, 0.09):
-			log.info("SyteLine logged in, starting logout procedure")
-			sl_uia = self.uia.window(title_re=SYTELINE_WINDOW_TITLE)
-			so = [item for item in sl_uia.MenuBar.items() if item.texts()[0].lower().strip() == 'sign out'][0]
-			sl_uia.set_focus()
-			r_i = so.rectangle()
-			c_coords = center(x1=r_i.left, y1=r_i.top, x2=r_i.right, y2=r_i.bottom)
-			pag.click(*c_coords)
-			if self.win32.SignIn.exists(10, 0.09):
-				self.win32.SignIn.wait('ready', 2, 0.09)
-				self.logged_in = False
-				log.info(f"Successfully logged out")
-				sleep(4)
-			else:
-				log.warning(f"Logout attempt unsuccessful")
-
-	def move_and_resize(self, left: int, top: int, right: int, bottom: int):
-		self._hwnd = self.win32.handle
-		# hwnd = win32gui.GetForegroundWindow()
-		# coord = Coordinates(left=left, top=top, right=right, bottom=bottom)
-		coord = {'left': left, 'top': top, 'right': right, 'bottom': bottom}
-		win32gui.MoveWindow(self._hwnd, int(coord['left']) - 7, coord['top'], coord['right'] - coord['left'],
-		                    coord['bottom'] - coord['top'], True)
-
-	def open_form(self, *names):
-		open_forms = self.forms.keys()
-		log.debug(f"Opening form(s): {', '.join(names)}")
-		for name in names:
-			if name in open_forms:
-				raise ValueError(f"Form '{name}' already open")
-			sl_win = self.win32.window(title_re=SYTELINE_WINDOW_TITLE)
-			sl_win.send_keystrokes('^o')
-			self.win32.SelectForm.AllContainingEdit.set_text(name)
-			self.win32.SelectForm.set_focus()
-			self.win32.SelectForm.FilterButton.click()
-			common_controls.ListViewWrapper(self.win32.SelectForm.ListView).item(name).click()
-			self.win32.SelectForm.set_focus()
-			self.win32.SelectForm.OKButton.click()
-			log.debug(f"Form '{name}' opened")
-			sleep(4)
-
-	def find_value_in_collection(self, collection: str, property_: str, value, case_sensitive=False):
-		sl_win = self.win32.window(title_re=SYTELINE_WINDOW_TITLE)
-		sl_win.send_keystrokes('%e')
-		sleep(0.02)
-		sl_win.send_keystrokes('v')
-		find_window = self.win32['Find']
-		find_window.InCollectionComboBox.select(collection)
-		find_window.InPropertyComboBox.select(property_)
-		find_window.FindEdit.set_text(value)
-		if case_sensitive:
-			find_window.CaseSensitiveButton.check()
-		find_window.set_focus()
-		find_window.OKButton.click()
-
-	def change_form(self, name: str):
-		forms = self.forms
-		if name in forms:
-			if name == self.get_focused_form():
-				pass
-			else:
-				forms[name].select()
-		else:
-			raise ValueError(f"Form '{name}' not open")
-
-	@property
-	def forms(self) -> Dict[str, uia_controls.MenuItemWrapper]:
-		# TODO: Possible form object including 'is_checked' property
-		sl_uia = self.uia.window(title_re=SYTELINE_WINDOW_TITLE)
-		retval = {REGEX_WINDOW_MENU_FORM_NAME.search(item.texts()[0]).group(1): item for item in
-		          sl_uia.WindowMenu.items()
-		          if (item.texts()[0].lower() != 'cascade') and (item.texts()[0].lower() != 'tile') and (
-			          item.texts()[0].lower() != 'close all')}
-		log.debug(f"Forms open: {', '.join(retval.keys())}")
-		return retval
-
-	def get_focused_form(self) -> str:
-		"""0x100000  1048576  0b100000000000000000000  focusable
-		   0x100004  1048580  0b100000000000000000100  focusable, focused
-		   0x100084  1048708  0b100000000000010000100  focusable, focused, hot-tracked
-		   0x100094  1048724  0b100000000000010010100  focusable, focused, hot-tracked, checked
-		   0x100010  1048592  0b100000000000000010000  focusable, checked
-
-		   0x000004  0000004  0b000000000000000000100  focused
-		   0x000010  0000016  0b000000000000000010000  checked
-		   0x000040  0000064  0b000000000000001000000  read-only
-		   0x000080  0000128  0b000000000000010000000  hot-tracked
-		   0x100000  1048576  0b100000000000000000000  focusable"""
-		for item in self.forms.items():
-			name, form = item
-			state = form.legacy_properties()['State']
-			bin_state = bin(state)
-			log.debug(f"Form State: {state}")
-			if int(bin_state[-5], base=2):  # If the fifth bit == 1
-				return name
-
-	def verify_form(self, name: str):
-		if name not in self.forms.keys():
-			self.open_form(name)
-		if name != self.get_focused_form():
-			self.change_form(name)
-
-	def get_popup(self, timeout=2) -> Dialog:
-		dlg = self.win32.window(class_name="#32770")
-		if dlg.exists(timeout, 0.09):
-			title = ''.join(text.strip() for text in dlg.texts())
-			text = ''.join(text.replace('\r\n\r\n', '\r\n').strip() for cls in dlg.children() if
-			               cls.friendly_class_name() == 'Static' for text in cls.texts())
-			buttons = {text.strip(punctuation + ' '): cls for cls in dlg.children() if
-			           cls.friendly_class_name() == 'Button' for text in cls.texts()}
-			return Dialog(dlg, title, text, buttons)
-		else:
-			return None
-
-
-class Application_ALT(psutil.Process):
-	def __init__(self, fp: Union[str, pathlib.Path], exclude: Union[int, Iterable[int]] = None):
-		if type(fp) is pathlib.Path:
-			fp = str(fp)
-		if is_running(fp, exclude):
-			super().__init__(process_pid(fp, exclude))
-		else:
-			super().__init__(psutil.Popen(fp).pid)
-		self.fp = fp
-		self.nice(psutil.HIGH_PRIORITY_CLASS)
-		self.win32 = pwn.Application(backend='win32').connect(process=self.pid)
-		self.uia = pwn.Application(backend='uia').connect(process=self.pid)
-		self._user = None
-		self.logged_in = False
-
-	def log_in(self, usr: str, pwd: str):
-		if not self.logged_in and self.win32.SignIn.exists(10, 0.09):
-			self.win32.SignIn.UserLoginEdit.set_text(usr)
-			self.win32.SignIn.PasswordEdit.set_text(pwd)
-			self.win32.SignIn.set_focus()
-			self.win32.SignIn.OKButton.click()
-			if not self.win32.SignIn.exists(10, 0.09):
-				self.win32.window(title_re=SYTELINE_WINDOW_TITLE).wait('ready', 2, 0.09)
-				self.logged_in = True
-				sleep(4)
-
-	def open_form(self, *names):
-		open_forms = self.forms.keys()
-		for name in names:
-			if name in open_forms:
-				raise ValueError(f"Form '{name}' already open")
-			sl_win = self.win32.window(title_re=SYTELINE_WINDOW_TITLE)
-			sl_win.send_keystrokes('^o')
-			self.win32.SelectForm.AllContainingEdit.set_text(name)
-			self.win32.SelectForm.set_focus()
-			self.win32.SelectForm.FilterButton.click()
-			common_controls.ListViewWrapper(self.win32.SelectForm.ListView).item(name).click()
-			self.win32.SelectForm.set_focus()
-			self.win32.SelectForm.OKButton.click()
-			sleep(4)
-
-	def find_value_in_collection(self, collection: str, property_: str, value, case_sensitive=False):
-		sl_win = self.win32.window(title_re=SYTELINE_WINDOW_TITLE)
-		sl_win.send_keystrokes('%e')
-		sl_win.send_keystrokes('v')
-		find_window = self.win32['Find']
-		find_window.InCollectionComboBox.select(collection)
-		find_window.InPropertyComboBox.select(property_)
-		find_window.FindEdit.set_text(value)
-		if case_sensitive:
-			find_window.CaseSensitiveButton.check()
-		find_window.set_focus()
-		find_window.OKButton.click()
-
-	def change_form(self, name: str):
-		forms = self.forms
-		if name in forms:
-			if name == self.get_focused_form():
-				pass
-			else:
-				forms[name].select()
-		else:
-			raise ValueError(f"Form '{name}' not open")
-
-	@property
-	def forms(self) -> Dict[str, uia_controls.MenuItemWrapper]:
-		sl_uia = self.uia.window(title_re=SYTELINE_WINDOW_TITLE)
-		retval = {REGEX_WINDOW_MENU_FORM_NAME.search(item.texts()[0]).group(1): item for item in
-		          sl_uia.WindowMenu.items()
-		          if (item.texts()[0].lower() != 'cascade') and (item.texts()[0].lower() != 'tile') and (
-			          item.texts()[0].lower() != 'close all')}
-		return retval
-
-	def get_focused_form(self) -> str:
-		for item in self.forms.items():
-			name, form = item
-			state = form.legacy_properties()['State']
-			bin_state = bin(state)
-			if int(bin_state[-5], base=2):  # If the fifth bit == 1
-				return name
-
-	def verify_form(self, name: str):
-		if name not in self.forms.keys():
-			self.open_form(name)
-		if name != self.get_focused_form():
-			self.change_form(name)
-
-	def get_popup(self, timeout=2) -> Dialog:
-		dlg = self.win32.window(class_name="#32770")
-		if dlg.exists(timeout, 0.09):
-			title = ''.join(text.strip() for text in dlg.texts())
-			text = ''.join(text.replace('\r\n\r\n', '\r\n').strip() for cls in dlg.children() if
-			               cls.friendly_class_name() == 'Static' for text in cls.texts())
-			buttons = {text.strip(punctuation + ' '): cls for cls in dlg.children() if
-			           cls.friendly_class_name() == 'Button' for text in cls.texts()}
-			return Dialog(dlg, title, text, buttons)
-		else:
-			return None
-
-
-class PuppetMaster:
-	_children = set()
-	pids = defaultdict(list)
-
-	def __init__(self, fp: Optional[Union[str, pathlib.Path]] = None):
-		if fp is not None:
-			self.start(fp)
-
-	def start(self, fp: Union[str, pathlib.Path]) -> Application:
-		name = ''.join(choice(ascii_lowercase) for i in range(4))
-		while name in self._children:
-			name = ''.join(choice(ascii_lowercase) for i in range(4))
-		self.__setattr__(name, Application(fp, exclude=list(self.pids.values())))
-		self.pids[fp].append(self.__getattribute__(name).pid)
-		self._children.add(name)
-		return self.__getattribute__(name)
-
-	def children(self):
-		return [self.__getattribute__(ch) for ch in self._children]
-
-	def __enter__(self):
-		return self
-
-	def __exit__(self, type, value, traceback):
-		procs = self.children()
-		for p in procs:
-			# print(p)
-			p.terminate()
-		gone, still_alive = psutil.wait_procs(procs, timeout=3)
-		for p in still_alive:
-			# print(p)
-			p.kill()
-
-
-class TestTimer:
-	def __init__(self):
-		self._start_time = None
-
-	def start(self):
-		self._start_time = datetime.datetime.now()
-
-	def lap(self):
-		if self._start_time:
-			retval = datetime.datetime.now() - self._start_time
-			return retval
-		else:
-			return datetime.timedelta(0)
-
-	def reset(self):
-		self._start_time = None
-
-	def stop(self):
-		retval = self.lap()
-		self.reset()
-		return retval
-
-
-# - - - - - - - - - - - - - - - - - - - FUNCTIONS - - - - - - - - - - - - - - - - - - - -
-def process_pid(filename: str, exclude: Optional[Union[int, Iterable[int]]] = None) -> int:
-	for proc in psutil.process_iter():
-		try:
-			if exclude is not None and ((isinstance(exclude, int) and proc.pid == exclude) or proc.pid in exclude):
-				continue
-			if proc.exe().lower() == filename.lower():
-				return proc.pid
-		except psutil.NoSuchProcess:
-			pass
-	return None
-
-
-def is_running(filename: str, exclude: Optional[Union[int, Iterable[int]]] = None) -> bool:
-	# processes = win32process.EnumProcesses()    # get PID list
-	# for pid in processes:
-	# 	try:
-	# 		if exclude is not None and ((type(exclude) is int and exclude == pid) or (pid in exclude)):
-	# 			continue
-	# 		handle = win32api.OpenProcess(win32con.PROCESS_ALL_ACCESS, False, pid)
-	# 		exe = win32process.GetModuleFileNameEx(handle, 0)
-	# 		if exe.lower() == filename.lower():
-	# 			return True
-	# 	except:
-	# 		pass
-	# return False
-	for proc in psutil.process_iter():
-		try:
-			if exclude is not None and ((isinstance(exclude, int) and proc.pid == exclude) or proc.pid in exclude):
-				continue
-			if proc.exe().lower() == filename.lower():
-				return True
-		except (psutil.NoSuchProcess, psutil.AccessDenied):
-			pass
-	return False
-
-
-def _adapt_cell(x):
-	if x == '(null)':
-		return None
-	elif x == 'False':
-		return False
-	elif x == 'True':
-		return True
-	elif '.' in x:
-		if x.rsplit('.', 1)[0].isnumeric():
-			return int(x.rsplit('.', 1)[0].isnumeric())
-	else:
-		return x
-
-
-def access_grid(grid: uia_controls.ListViewWrapper, columns: Union[str, Iterable[str]],
-                condition: Optional[Tuple[str, Any]] = None, requirement: str = None) -> List[NamedTuple]:
-	if type(columns) is str:
-		columns = [columns]
-	# TODO: regex datetime
-	# TODO: better condition handling (exec string?)
-	DataRow = namedtuple('DataRow', field_names=[col.replace(' ', '_') for col in columns])
-	if requirement is not None:
-		if condition is None:
-			retval = [DataRow(**{
-				col.replace(' ', '_'): _adapt_cell(
-						uia_controls.ListViewWrapper(row.element_info).item(
-								grid.children()[grid.children_texts().index('Top Row')].children_texts().index(
-										col)).legacy_properties()['Value'].strip())
-				for col in columns}) for row in grid.children()[grid.children_texts().index('Row 0'):] if _adapt_cell(
-					uia_controls.ListViewWrapper(row.element_info).item(
-							grid.children()[grid.children_texts().index('Top Row')].children_texts().index(
-									requirement)).legacy_properties()['Value'].strip()) != None]
-		else:
-			retval = [DataRow(**{
-				col.replace(' ', '_'): _adapt_cell(
-						uia_controls.ListViewWrapper(row.element_info).item(
-								grid.children()[grid.children_texts().index('Top Row')].children_texts().index(
-										col)).legacy_properties()['Value'].strip())
-				for col in columns}) for row in grid.children()[grid.children_texts().index('Row 0'):] if _adapt_cell(
-					uia_controls.ListViewWrapper(row.element_info).item(
-							grid.children()[grid.children_texts().index('Top Row')].children_texts().index(
-									condition[0])).legacy_properties()[
-						'Value'].strip()) == condition[1] and _adapt_cell(
-					uia_controls.ListViewWrapper(row.element_info).item(
-							grid.children()[grid.children_texts().index('Top Row')].children_texts().index(
-									requirement)).legacy_properties()['Value'].strip()) != None]
-	else:
-		if condition is None:
-			retval = [DataRow(**{col.replace(' ', '_'): _adapt_cell(uia_controls.ListViewWrapper(row.element_info).item(
-					grid.children()[grid.children_texts().index('Top Row')].children_texts().index(
-							col)).legacy_properties()['Value'].strip())
-			                     for col in columns}) for row in grid.children()[grid.children_texts().index('Row 0'):]]
-		else:
-			retval = [DataRow(**{
-				col.replace(' ', '_'): _adapt_cell(uia_controls.ListViewWrapper(row.element_info).item(
-						grid.children()[grid.children_texts().index('Top Row')].children_texts().index(
-								col)).legacy_properties()['Value'].strip())
-				for col in columns}) for row in grid.children()[grid.children_texts().index('Row 0'):] if _adapt_cell(
-					uia_controls.ListViewWrapper(row.element_info).item(
-							grid.children()[grid.children_texts().index('Top Row')].children_texts().index(
-									condition[0])).legacy_properties()['Value'].strip()) == condition[1]]
-	log.debug(f"Grid Accessed: {retval}")
-	return retval
-
-
-# Not one Item Price exists for Item that has
-# @overload
-def center(x1: int, y1: int, x2: int, y2: int) -> Tuple[int, int]:
-	assert 0 < x1 < x2
-	assert 0 < y1 < y2
-	x2 -= x1
-	y2 -= y1
-	return x1 + (x2 // 2), y1 + (y2 // 2)
-
-
-# noinspection SpellCheckingInspection
-def sigfig(template, x):
-	x_str, y_str = map(str, [template, x])
-	x_len = len(x_str.split('.', 1)[1].strip())
-	y_sub1, y_sub2 = y_str.split('.', 1)
-	y_sub2 = y_sub2.ljust(x_len, '0')
-	y_new = eval(f"{y_sub1}.{y_sub2[:x_len]}")
-	if len(y_sub2) > x_len and eval(y_sub2[x_len]) >= 5:
-		val = 10 ** x_len
-		y_new = ((y_new * val) + 1) / val
-	return y_new
-
-
-# def center(x: int, y: int, w: int, h: int) -> Tuple[int, int]:
-# 	return x + (w // 2), y + (h // 2)
-
-
-def parse_numeric_ranges(x: Union[str, List[int]], sep: str = ',') -> List[Tuple[int, int]]:
-	"""Inclusive (min, max) range parser"""
-	nums = sorted([int(y) for y in x.split(sep)]) if type(x) is str else sorted(x)
-	retval = []
-	temp_set = set([])
-	for x in nums:
-		if not temp_set:
-			temp_set.add(x)
-		elif max(temp_set) + 1 == x:
-			temp_set.add(x)
-		else:
-			if len(temp_set) > 1:
-				retval.append((min(temp_set), max(temp_set)))
-			else:
-				retval.append((max(temp_set), max(temp_set)))
-			temp_set = {x}
-	else:
-		if len(temp_set) > 1:
-			retval.append((min(temp_set), max(temp_set)))
-		elif len(temp_set) == 1:
-			retval.append((max(temp_set), max(temp_set)))
-	return retval
-
-
-timer = TestTimer()
Index: eom_closeout.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- eom_closeout.py	(revision Local Version)
+++ eom_closeout.py	(revision Local Version)
@@ -1,140 +0,0 @@
-import datetime
-import pathlib
-import sys
-from queue import Queue
-from time import sleep
-
-import pyautogui as pag
-import pywinauto.timings
-from pywinauto import keyboard
-from pywinauto.controls import win32_controls
-
-from common import Application_ALT, Unit_ALT
-from constants import SYTELINE_WINDOW_TITLE
-from crypt import decrypt
-from sql_alt import MS_SQL
-
-
-def main():
-	fp = pathlib.WindowsPath.home() / 'AppData' / 'Local' / 'Apps' / '2.0' / 'QQC2A2CQ.YNL' / 'K5YT3MK7.VDY' / 'sl8...ient_002c66e0bc74a4c9_0008.0003_1fdd36ef61625f38' / 'WinStudio.exe'
-	app = Application_ALT(fp.as_posix())
-	usr = 'BISync01'
-	pwd = 'N0Trans@cti0ns'
-	_assorted_lengths_of_string = ('30803410313510753080335510753245107531353410',
-	                               '3660426037804620468050404740384034653780366030253080',
-	                               '474046203600486038404260432039003960',
-	                               '63004620S875486038404260S875432039003960',
-	                               '58803900396063004620360048603840426038404620',
-	                               '54005880Q750516045004500',
-	                               '1121327')
-	_adr_data, _adr_data_sl, _usr_data, _pwd_data, _db_data, _db_data_sl, _key = _assorted_lengths_of_string
-	mssql = MS_SQL(address=decrypt(_adr_data, _key), username=decrypt(_usr_data, _key),
-	               password=decrypt(_pwd_data, _key), database=decrypt(_db_data, _key))
-	slsql = MS_SQL(address=decrypt(_adr_data_sl, _key), username=decrypt(_usr_data, _key),
-	               password=decrypt(_pwd_data, _key), database=decrypt(_db_data_sl, _key))
-	q = Queue(maxsize=0)
-	app.log_in(usr, pwd)
-	print("Loading units...")
-	results = mssql.execute(
-			"Select distinct [Serial Number] From Operations Where Operation = 'QC' and Convert(date, DateTime) Between '9/1/2017' and '10/1/2017'",
-			fetchall=True)
-	for x in results:
-		q.put(Unit_ALT(mssql, slsql, x[0]))
-	print(f"~{q.qsize()} units loaded!")
-	app.verify_form('Units')
-	pywinauto.timings.Timings.Fast()
-	print(f"Running...")
-	while not q.empty():
-		try:
-			unit = q.get()
-			if unit.SKIPME:
-				continue
-			sl_win = app.win32.window(title_re=SYTELINE_WINDOW_TITLE)
-			sl_uia = app.uia.window(title_re=SYTELINE_WINDOW_TITLE)
-			if not sl_win.exists():
-				sys.exit(1)
-			app.verify_form('Units')
-			sleep(0.2)
-			sl_win.UnitEdit.set_text(unit.serial_number_prefix + unit.serial_number)
-			sleep(0.2)
-			sl_win.send_keystrokes('{F4}')
-			count = 0
-			while (sl_win.UnitEdit.texts()[0].strip() != unit.serial_number_prefix + unit.serial_number) and \
-					sl_win.UnitEdit.texts()[0].strip():
-				if count >= 30:
-					raise ZeroDivisionError()
-				sleep(0.4)
-				count += 1
-			if sl_win.UnitEdit.texts()[0].strip() != unit.serial_number_prefix + unit.serial_number:
-				raise ZeroDivisionError()
-			if not sl_win.ServiceOrderLinesButton.is_enabled():
-				raise ZeroDivisionError()
-			sl_win.set_focus()
-			sl_win.ServiceOrderLinesButton.click()
-			sl_win.ServiceOrderOperationsButton.wait('visible', 2, 0.09)
-			app.find_value_in_collection('Service Order Lines', 'SRO (SroNum)', unit.sro_num)
-			dlg = app.get_popup(0.5)
-			count = 0
-			while dlg:
-				dlg[0].close()
-				count += 1
-				dlg = app.get_popup()
-			else:
-				if count > 0:
-					raise ZeroDivisionError()
-			sl_win.set_focus()
-			sl_win.ServiceOrderOperationsButton.click()
-			sl_win.SROLinesButton.wait('visible', 2, 0.09)
-			sl_win.CompletedDateEdit.set_text(datetime.datetime.now().strftime('%m/%d/%Y %I:%M:%S %p'))
-			sl_win.CompletedDateEdit.send_keystrokes('^s')
-			sleep(0.5)
-			pag.hotkey('ctrl', 's')
-			status = win32_controls.EditWrapper(sl_win.StatusEdit3.element_info)
-			sl_win.set_focus()
-			status.set_keyboard_focus()
-			status.send_keystrokes('{DOWN}{DOWN}')
-			try:
-				status.send_keystrokes('^s')
-				sleep(1)
-			except TimeoutError:
-				pass
-			finally:
-				keyboard.SendKeys('{ESC}')
-			for presses in range(2):
-				sl_uia.CancelCloseButton.click()
-			sl_win.UnitEdit.wait('visible', 2, 0.09)
-			sleep(0.2)
-			sl_win.send_keystrokes('{F4}')  # Clear Filter
-			sleep(0.2)
-			sl_win.send_keystrokes('{F5}')  # Clear Filter
-			sleep(0.2)
-		except Exception as ex:
-			sl_win = app.win32.window(title_re=SYTELINE_WINDOW_TITLE)
-			sl_uia = app.uia.window(title_re=SYTELINE_WINDOW_TITLE)
-			if sl_uia.exists(2, 0.09):
-				if 'SRO Transactions' in app.forms:
-					sl_uia.CancelCloseButton.click()
-					dlg = app.get_popup()
-					while dlg:
-						dlg[0].close()
-						dlg = app.get_popup()
-				if 'Service Order Operations' in app.forms:
-					sl_uia.CancelCloseButton.click()
-					dlg = app.get_popup()
-					while dlg:
-						dlg[0].close()
-						dlg = app.get_popup()
-				if 'Service Order Lines' in app.forms:
-					sl_uia.CancelCloseButton.click()
-					dlg = app.get_popup()
-					while dlg:
-						dlg[0].close()
-						dlg = app.get_popup()
-				sl_win.send_keystrokes('{F4}')
-				sl_win.send_keystrokes('{F5}')
-	print(f"Done!")
-	input('Press any key to exit...')
-
-
-if __name__ == '__main__':
-	main()
Index: utils/__init__.py
===================================================================
--- utils/__init__.py	(revision Shelved Version)
+++ utils/__init__.py	(revision Shelved Version)
@@ -0,0 +1,2 @@
+from utils.crypt import *
+from utils.sql import *
Index: processes/__init__.py
===================================================================
--- processes/__init__.py	(revision Shelved Version)
+++ processes/__init__.py	(revision Shelved Version)
@@ -0,0 +1,47 @@
+"""Make sure the SyteLine Application is currently up and running"""
+
+from processes import renew_password, runthrough, status_report, transact
+# from _common import Application, PuppetMaster, is_running
+# from config import *
+from processes.preprogram.preprogram import Preprogram as preprogram
+from processes.reason.reason import Reason as reason
+from processes.scrap.scrap import Scrap as scrap
+
+# host.start(application_filepath)
+# if is_running(application_filepath):
+# 	app = Application.connect(application_filepath)
+#
+# else:
+# 	app = Application.start(application_filepath)
+#
+# if not app.logged_in:
+# 	app.log_in()
+
+# TODO: Initialization
+__all__ = ['preprogram', 'reason', 'scrap', 'transact', 'status_report', 'runthrough',
+           'renew_password']
+
+'''import tkinter as tk
+
+class Application(tk.Frame):
+    def __init__(self, master=None):
+        super().__init__(master)
+        self.pack()
+        self.create_widgets()
+
+    def create_widgets(self):
+        self.hi_there = tk.Button(self)
+        self.hi_there["text"] = "Hello World\n(click me)"
+        self.hi_there["command"] = self.say_hi
+        self.hi_there.pack(side="top")
+
+        self.quit = tk.Button(self, text="QUIT", fg="red",
+                              command=root.destroy)
+        self.quit.pack(side="bottom")
+
+    def say_hi(self):
+        print("hi there, everyone!")
+
+root = tk.Tk()
+app = Application(master=root)
+app.mainloop()'''
Index: constants.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- constants.py	(revision Local Version)
+++ constants.py	(revision Shelved Version)
@@ -15,24 +15,27 @@
 REGEX_BUILD = re.compile(r"(?P<prefix>[A-Z]{2,3})-(?P<build>\d{3}(?P<carrier>[VS])?)(?:-(?P<suffix>M|DEMO|R|T))?")
 REGEX_BUILD_ALT = re.compile(r"(?P<prefix>[A-Z]{2,3})-(?P<build>(?P<carrier>\d)\d{3})(?:-(?P<suffix>M|DEMO|R|T))?")
 REGEX_RESOLUTION = re.compile(r"(?P<general>\d+),(?P<specific>\d+)")
-
+REGEX_NUMERIC_RANGES = re.compile(r"(\d{1,2})-(\d{1,2})|(\d{1,2})")
+part_number_regex = re.compile(r"\d-\d{2}-\d{5}-\d")  # FIXME: UNIT TEST THIS FOR CONSISTENCY
 # - - - - - - - - - - - - - - - - - - - - COMMON  - - - - - - - - - - - - - - - - - - - -
 # noinspection SpellCheckingInspection
 # language=RegExp
 SYTELINE_WINDOW_TITLE = r'Infor ERP SL \(EM\).*'
 
-CELLULAR_BUILDS = ('EX-600-M', 'EX-625S-M', 'EX-600-T', 'EX-600', 'EX-625-M', 'EX-600-DEMO', 'EX-600S', 'EX-600S-DEMO', 'EX-600V-M',
-                   'EX-600V', 'EX-680V-M', 'EX-600V-DEMO', 'EX-680V', 'EX-680S', 'EX-680V-DEMO', 'EX-600V-R',
-                   'EX-680S-M', 'HG-2200-M',
-                   'CL-4206-DEMO', 'CL-3206-T', 'CL-3206', 'CL-4206', 'CL-4206', 'CL-3206-DEMO', 'CL-4206-M',
-                   'CL-3206-M', 'HB-110',
-                   'HB-110-DEMO', 'HB-110-M', 'HB-110S-DEMO', 'HB-110S-M', 'HB-110S', 'LC-800V-M', 'LC-800S-M',
-                   'LC-825S-M', 'LC-800V-DEMO',
-                   'LC-825V-M', 'LC-825V-DEMO', 'LC-825V', 'LC-825S', 'LC-825S-DEMO', 'LC-800S-DEMO')
+# FIXME: 110 = Verizon, 110S = Sprint
 
-# noinspection SpellCheckingInspection
-SUFFIX_DICT = {'M': 'Monitoring', 'R': 'Refurb',
-               'T': 'Trial', 'DEMO': 'Demo', '-': 'Direct'}
+verizon_only = {'100'}
+numeric_carriers = {'200', '206'}
+alphabetic_carriers = {'600', '110', '625', '680', '800', '825'}
+cellular_builds = verizon_only | numeric_carriers | alphabetic_carriers
+carrier_dict = {'V': 'Verizon', 'S': 'Sprint', 3: 'Verizon', 4: 'Sprint', 2: None, None: 'Verizon'}
+unit_type_dict = {'M': 'Monitoring', 'R': 'Refurb', 'T': 'Trial', 'DEMO': 'Demo'}
 
-CARRIER_DICT = {'V': 'Verizon', 'S': 'Sprint', '-': None,
-                '3': 'Verizon', '4': 'Sprint', '2': None}
+WHITE = (255, 255, 255)
+
+DB_TABLE = 'PyComm'
+TRANSACTION_STATUS = 'Queued'
+SCRAP_STATUS = 'Scrap'
+REASON_STATUS = 'Reason'
+
+# The quick brown fox jumps over the lazy dog.
Index: transact.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- transact.py	(revision Local Version)
+++ processes/preprogram/preprogram.py	(revision Shelved Version)
@@ -1,6 +1,5 @@
-import logging.config
+import logging
 import sys
-import warnings
 from time import sleep
 from typing import List
 
@@ -9,15 +8,18 @@
 from pywinauto import keyboard
 from pywinauto.controls import common_controls, uia_controls, win32_controls
 
-from common import Application, TestTimer, Unit, access_grid, center, timer
+from _common import *
 from constants import REGEX_CREDIT_HOLD, REGEX_NEGATIVE_ITEM, SYTELINE_WINDOW_TITLE
 from exceptions import *
 
-logging.config.fileConfig('config.ini')
-log = logging
+log = logging.getLogger(__name__)
 
 
-def Transact(app: Application, units: List[Unit]):
+# SN, Item, MEID, MDN, MIN, Firmware rev
+# TODO: Complete process
+
+
+def Preprogram(app: Application, units: List[Unit]):
 	try:
 		pywinauto.timings.Timings.Fast()
 		units = units if type(units) is list else [units]
@@ -38,8 +40,7 @@
 		sl_win.send_keystrokes('{F4}')  # Filter in Place
 		count = 0
 		# or (not sl_uia.UnitEdit.legacy_properties()['IsReadOnly'])
-		while (sl_win.UnitEdit.texts()[0].strip() != unit.serial_number_prefix + unit.serial_number) and \
-				sl_win.UnitEdit.texts()[0].strip():  # While actual serial number != attempted serial number
+		while (sl_win.UnitEdit.texts()[0].strip() != unit.serial_number_prefix + unit.serial_number) and sl_win.UnitEdit.texts()[0].strip():  # While actual serial number != attempted serial number
 			if count >= 30:
 				raise SyteLineFilterInPlaceError(unit.serial_number)
 			sleep(0.4)
@@ -55,8 +56,7 @@
 			x.start()
 		log.debug(sl_win.ServiceOrderLinesButton.get_properties())
 		if not sl_win.ServiceOrderLinesButton.is_enabled():
-			raise NoOpenSROError(serial_number=unit.serial_number, sro=unit.sro_num,
-			                     msg="Service Order Lines Button is disabled")
+			raise NoOpenSROError(serial_number=unit.serial_number, sro=unit.sro_num, msg="Service Order Lines Button is disabled")
 		log.debug("Service Order Lines Button clicked")
 		sl_win.set_focus()
 		timer.start()
@@ -64,8 +64,7 @@
 		sl_win.ServiceOrderOperationsButton.wait('visible', 2, 0.09)
 		# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 		t_temp = timer.stop()
-		log.debug(
-				f"Time waited for Service Order Lines: {t_temp.seconds}.{str(t_temp.microseconds/1000).split('.', 1)[0].rjust(3, '0')}")
+		log.debug(f"Time waited for Service Order Lines: {t_temp.seconds}.{str(t_temp.microseconds/1000).split('.', 1)[0].rjust(3, '0')}")
 		app.find_value_in_collection('Service Order Lines', 'SRO (SroNum)', unit.sro_num)
 		dlg = app.get_popup(0.5)
 		count = 0
@@ -84,8 +83,7 @@
 		sl_win.SROLinesButton.wait('visible', 2, 0.09)
 		# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 		t_temp = timer.stop()
-		log.debug(
-				f"Time waited for Service Order Operations: {t_temp.seconds}.{str(t_temp.microseconds/1000).split('.', 1)[0].rjust(3, '0')}")
+		log.debug(f"Time waited for Service Order Operations: {t_temp.seconds}.{str(t_temp.microseconds/1000).split('.', 1)[0].rjust(3, '0')}")
 		unit.sro_operations_timer.start()
 		if sl_win.StatusEdit3.texts()[0].strip() == 'Closed':
 			status = win32_controls.EditWrapper(sl_win.StatusEdit3.element_info)
@@ -114,21 +112,17 @@
 				log.debug("SRO Transactions Button clicked")
 				sl_win.FilterDateRangeEdit.wait('ready', 2, 0.09)
 				t_temp = timer.stop()
-				log.debug(
-						f"Time waited for SRO Transactions: {t_temp.seconds}.{str(t_temp.microseconds/1000).split('.', 1)[0].rjust(3, '0')}")
+				log.debug(f"Time waited for SRO Transactions: {t_temp.seconds}.{str(t_temp.microseconds/1000).split('.', 1)[0].rjust(3, '0')}")
 				log.info("Starting transactions")
 				sl_win.FilterDateRangeEdit.set_text(unit.eff_date.strftime('%m/%d/%Y'))
 				timer.start()
 				sl_win.ApplyFilterButton.click()
 				sl_win.ApplyFilterButton.wait('ready', 2, 0.09)
 				t_temp = timer.stop()
-				log.debug(
-						f"Time waited for first Application of Filter: {t_temp.seconds}.{str(t_temp.microseconds/1000).split('.', 1)[0].rjust(3, '0')}")
+				log.debug(f"Time waited for first Application of Filter: {t_temp.seconds}.{str(t_temp.microseconds/1000).split('.', 1)[0].rjust(3, '0')}")
 				transaction_grid = uia_controls.ListViewWrapper(sl_uia.DataGridView.element_info)
 				log.debug(transaction_grid.get_properties())
-				posted_parts = access_grid(transaction_grid,
-				                           ['Posted', 'Item', 'Location', 'Quantity', 'Billing Code', 'Trans Date'],
-				                           condition=('Posted', True), requirement='Item')
+				posted_parts = access_grid(transaction_grid, ['Posted', 'Item', 'Location', 'Quantity', 'Billing Code', 'Trans Date'], condition=('Posted', True), requirement='Item')
 				log.debug(f"Posted parts: {posted_parts}")
 				posted_part_numbers = {p.Item for p in posted_parts}
 				sl_win.IncludePostedButton.click()
@@ -136,11 +130,8 @@
 				sl_win.ApplyFilterButton.click()
 				sl_win.ApplyFilterButton.wait('ready', 2, 0.09)
 				t_temp = timer.stop()
-				log.debug(
-						f"Time waited for second Application of Filter: {t_temp.seconds}.{str(t_temp.microseconds/1000).split('.', 1)[0].rjust(3, '0')}")
-				unposted_parts = access_grid(transaction_grid,
-				                             ['Posted', 'Item', 'Location', 'Quantity', 'Billing Code', 'Trans Date'],
-				                             requirement='Item')
+				log.debug(f"Time waited for second Application of Filter: {t_temp.seconds}.{str(t_temp.microseconds/1000).split('.', 1)[0].rjust(3, '0')}")
+				unposted_parts = access_grid(transaction_grid, ['Posted', 'Item', 'Location', 'Quantity', 'Billing Code', 'Trans Date'], requirement='Item')
 				log.debug(f"Unposted parts: {unposted_parts}")
 				unposted_part_numbers = {p.Item for p in unposted_parts}
 				row_i = None
@@ -169,29 +160,22 @@
 						row_i = -1
 					log.debug(f"Attempting to transact part {part}")
 					last_row = uia_controls.ListViewWrapper(transaction_grid.children()[row_i].element_info)
-					item = uia_controls.ListItemWrapper(
-							last_row.item(top_row.children_texts().index('Item')).element_info)
+					item = uia_controls.ListItemWrapper(last_row.item(top_row.children_texts().index('Item')).element_info)
 					r_i = item.rectangle()
 					# sl_win.set_focus()
 					c_coords = center(x1=r_i.left, y1=r_i.top, x2=r_i.right, y2=r_i.bottom)
 					pag.click(*c_coords)
 					last_row = uia_controls.ListViewWrapper(transaction_grid.children()[-2].element_info)
-					location = uia_controls.ListItemWrapper(
-							last_row.item(top_row.children_texts().index('Location')).element_info)
-					quantity = uia_controls.ListItemWrapper(
-							last_row.item(top_row.children_texts().index('Quantity')).element_info)
-					billcode = uia_controls.ListItemWrapper(
-							last_row.item(top_row.children_texts().index('Billing Code')).element_info)
+					location = uia_controls.ListItemWrapper(last_row.item(top_row.children_texts().index('Location')).element_info)
+					quantity = uia_controls.ListItemWrapper(last_row.item(top_row.children_texts().index('Quantity')).element_info)
+					billcode = uia_controls.ListItemWrapper(last_row.item(top_row.children_texts().index('Billing Code')).element_info)
 					r_loc = location.rectangle()
 					r_qty = quantity.rectangle()
 					r_bill = billcode.rectangle()
-					loc_rec_list.append(
-							(center(x1=r_loc.left, y1=r_loc.top, x2=r_loc.right, y2=r_loc.bottom), str(part.location), i))
+					loc_rec_list.append((center(x1=r_loc.left, y1=r_loc.top, x2=r_loc.right, y2=r_loc.bottom), str(part.location), i))
 					if part.quantity > 1:
-						qty_rec_list.append((center(x1=r_qty.left, y1=r_qty.top, x2=r_qty.right, y2=r_qty.bottom),
-						                     str(part.quantity), i))
-					bc_rec_list.append(
-							(center(x1=r_bill.left, y1=r_bill.top, x2=r_bill.right, y2=r_bill.bottom), bc, i))
+						qty_rec_list.append((center(x1=r_qty.left, y1=r_qty.top, x2=r_qty.right, y2=r_qty.bottom), str(part.quantity), i))
+					bc_rec_list.append((center(x1=r_bill.left, y1=r_bill.top, x2=r_bill.right, y2=r_bill.bottom), bc, i))
 					pag.typewrite(str(part.part_number))
 					sleep(0.5)
 					pag.press('enter', 10, interval=0.05)
@@ -274,8 +258,7 @@
 							dlg = app.get_popup(2)
 						elif m2 is not None:
 							pag.press('enter')
-							warnings.warn(NegativeQuantityWarning(part=m2.group('item'), qty=m2.group('quantity'),
-							                                      loc=m2.group('location')))
+							# warnings.warn(NegativeQuantityWarning(part=m2.group('item'), qty=m2.group('quantity'), loc=m2.group('location')))
 							log.warning("Negative Quantity!")
 							dlg = app.get_popup(4)
 						else:
@@ -303,8 +286,7 @@
 			sl_win.ServiceOrderOperationsButton.click()
 			sl_win.SROLinesButton.wait('visible', 2, 0.09)
 			t_temp = timer.stop()
-			log.debug(
-					f"Time waited for Service Order Lines(part 2): {t_temp.seconds}.{str(t_temp.microseconds/1000).split('.', 1)[0].rjust(3, '0')}")
+			log.debug(f"Time waited for Service Order Lines(part 2): {t_temp.seconds}.{str(t_temp.microseconds/1000).split('.', 1)[0].rjust(3, '0')}")
 			i2 = [i for i, x in enumerate(units) if x.parts]
 			srot_time = unit.sro_transactions_timer.stop() / len(i2)
 			for i in i2:
@@ -343,16 +325,12 @@
 		common_controls.TabControlWrapper(sl_win.TabControl).select('Reasons')  # Open 'Reasons' Tab
 		if has_qc:
 			reason_grid = uia_controls.ListViewWrapper(sl_uia.DataGridView.element_info)
-			reason_rows = access_grid(reason_grid, ['General Reason', 'Specific Reason', 'General Resolution',
-			                                        'Specific Resolution'])
+			reason_rows = access_grid(reason_grid, ['General Reason', 'Specific Reason', 'General Resolution', 'Specific Resolution'])
 			full_row = None
 			empty_row_i = len(reason_rows) - 1
 			partial = False
 			for i, row in enumerate(reason_rows[::-1]):
-				if {row.General_Reason, row.Specific_Reason, row.General_Resolution, row.Specific_Resolution} == {None,
-				                                                                                                  None,
-				                                                                                                  None,
-				                                                                                                  None}:
+				if {row.General_Reason, row.Specific_Reason, row.General_Resolution, row.Specific_Resolution} == {None, None, None, None}:
 					empty_row_i = len(reason_rows) - (i + 1)
 					partial = False
 				elif {row.Specific_Reason, row.General_Resolution, row.Specific_Resolution} == {None, None, None}:
@@ -367,21 +345,17 @@
 			top_row = reason_grid.children()[top_row_i]
 			open_row = uia_controls.ListViewWrapper(reason_grid.children()[empty_row_i + top_row_i + 1].element_info)
 
-			gen_resn = uia_controls.ListItemWrapper(
-					open_row.item(top_row.children_texts().index('General Reason')).element_info)
+			gen_resn = uia_controls.ListItemWrapper(open_row.item(top_row.children_texts().index('General Reason')).element_info)
 			gen_resn_i = gen_resn.rectangle()
 			c_coords = center(x1=gen_resn_i.left, y1=gen_resn_i.top, x2=gen_resn_i.right, y2=gen_resn_i.bottom)
 
-			spec_resn = uia_controls.ListItemWrapper(
-					open_row.item(top_row.children_texts().index('Specific Reason')).element_info)
+			spec_resn = uia_controls.ListItemWrapper(open_row.item(top_row.children_texts().index('Specific Reason')).element_info)
 			spec_resn_i = spec_resn.rectangle()
 
-			gen_reso = uia_controls.ListItemWrapper(
-					open_row.item(top_row.children_texts().index('General Resolution')).element_info)
+			gen_reso = uia_controls.ListItemWrapper(open_row.item(top_row.children_texts().index('General Resolution')).element_info)
 			gen_reso_i = gen_reso.rectangle()
 
-			spec_reso = uia_controls.ListItemWrapper(
-					open_row.item(top_row.children_texts().index('Specific Resolution')).element_info)
+			spec_reso = uia_controls.ListItemWrapper(open_row.item(top_row.children_texts().index('Specific Resolution')).element_info)
 			spec_reso_i = spec_reso.rectangle()
 
 			pag.click(*c_coords)
@@ -511,11 +485,3 @@
 		log.info(f"Unit: {unit.serial_number_prefix+unit.serial_number} completed")
 		for x in units:
 			x.complete(batch_amt=len(units))
-
-
-"""Select m.Item, m.matl_qty from fs_sro_matl m(nolock)
-Inner join fs_sro_line l(nolock)
-on m.sro_num = l.sro_num and l.sro_line = m.sro_line
-left join fs_sro_line l2(nolock)
-on l.ser_num = l2.ser_num and l.recorddate < l2.recorddate
-where l2.RecordDate is null and l.ser_num = 'OT1154319'"""
Index: .idea/codeStyleSettings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/codeStyleSettings.xml	(revision Local Version)
+++ .idea/codeStyleSettings.xml	(revision Shelved Version)
@@ -3,6 +3,7 @@
   <component name="ProjectCodeStyleSettingsManager">
     <option name="PER_PROJECT_SETTINGS">
       <value>
+        <option name="RIGHT_MARGIN" value="200" />
         <Python>
           <option name="DICT_ALIGNMENT" value="1" />
           <option name="USE_CONTINUATION_INDENT_FOR_ARGUMENTS" value="true" />
@@ -11,8 +12,20 @@
           <option name="FROM_IMPORT_PARENTHESES_FORCE_IF_MULTILINE" value="true" />
           <option name="HANG_CLOSING_BRACKETS" value="true" />
         </Python>
+        <SqlCodeStyleSettings>
+          <option name="ALIGN_AS_IN_SELECT_STATEMENT" value="false" />
+          <option name="NEW_LINE_BEFORE_FROM" value="false" />
+          <option name="NEW_LINE_BEFORE_JOIN_CONDITION" value="true" />
+          <option name="QUOTE_IDENTIFIER" value="1" />
+          <option name="ALIAS_CASE" value="1" />
+        </SqlCodeStyleSettings>
         <codeStyleSettings language="Python">
-          <option name="RIGHT_MARGIN" value="200" />
+          <indentOptions>
+            <option name="USE_TAB_CHARACTER" value="true" />
+            <option name="SMART_TABS" value="true" />
+          </indentOptions>
+        </codeStyleSettings>
+        <codeStyleSettings language="SQL">
           <indentOptions>
             <option name="USE_TAB_CHARACTER" value="true" />
             <option name="SMART_TABS" value="true" />
Index: reason.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- reason.py	(revision Local Version)
+++ processes/reason/reason.py	(revision Shelved Version)
@@ -1,5 +1,5 @@
 import datetime
-import logging.config
+import logging
 import sys
 from time import sleep
 from typing import List
@@ -8,15 +8,15 @@
 import pywinauto.timings
 from pywinauto.controls import common_controls, uia_controls, win32_controls
 
-from common import Application, Unit, access_grid, center
+from _common import *
 from constants import SYTELINE_WINDOW_TITLE
 from exceptions import *
 
 pag.FAILSAFE = False
+log = logging.getLogger(__name__)
 
-logging.config.fileConfig('config.ini')
-log = logging
 
+# TODO: Rework process
 
 def Reason(app: Application, units: List[Unit]):
 	try:
@@ -36,8 +36,7 @@
 		sl_win.send_keystrokes('{F4}')  # Filter in Place
 		count = 0
 		# or (not sl_uia.UnitEdit.legacy_properties()['IsReadOnly'])
-		while (sl_win.UnitEdit.texts()[0].strip() != unit.serial_number_prefix + unit.serial_number) and \
-				sl_win.UnitEdit.texts()[0].strip():  # While actual serial number != attempted serial number
+		while (sl_win.UnitEdit.texts()[0].strip() != unit.serial_number_prefix + unit.serial_number) and sl_win.UnitEdit.texts()[0].strip():  # While actual serial number != attempted serial number
 			if count >= 30:
 				raise SyteLineFilterInPlaceError(unit.serial_number)
 			sleep(0.4)
@@ -52,8 +51,7 @@
 		for x in units:
 			x.start()
 		if not sl_win.ServiceOrderLinesButton.is_enabled():
-			raise NoOpenSROError(serial_number=unit.serial_number, sro=unit.sro_num,
-			                     msg="Service Order Lines Button is disabled")
+			raise NoOpenSROError(serial_number=unit.serial_number, sro=unit.sro_num, msg="Service Order Lines Button is disabled")
 		log.debug("Service Order Lines Button clicked")
 		sl_win.set_focus()
 		sl_win.ServiceOrderLinesButton.click()
@@ -89,8 +87,7 @@
 		common_controls.TabControlWrapper(sl_win.TabControl).select('Reasons')  # Open 'Reasons' Tab
 		for sub_unit in units:
 			reason_grid = uia_controls.ListViewWrapper(sl_uia.DataGridView.element_info)
-			reason_rows = access_grid(reason_grid, ['General Reason', 'Specific Reason', 'General Resolution',
-			                                        'Specific Resolution'])
+			reason_rows = access_grid(reason_grid, ['General Reason', 'Specific Reason', 'General Resolution', 'Specific Resolution'])
 			done = False
 			for row in reason_rows:
 				if str(row.General_Resolution).strip() == str(sub_unit.general_resolution).strip() and \
@@ -101,30 +98,24 @@
 				if len(reason_rows) >= 6:
 					top_row_temp = reason_grid.children()[reason_grid.children_texts().index('Top Row')]
 					try:
-						open_row_temp = uia_controls.ListViewWrapper(
-								reason_grid.children()[reason_grid.children_texts().index('Top Row') + 7].element_info)
+						open_row_temp = uia_controls.ListViewWrapper(reason_grid.children()[reason_grid.children_texts().index('Top Row') + 7].element_info)
 					except IndexError:
-						open_row_temp = uia_controls.ListViewWrapper(
-								reason_grid.children()[reason_grid.children_texts().index('Top Row') + 6].element_info)
-					gen_resn_temp = uia_controls.ListItemWrapper(
-							open_row_temp.item(top_row_temp.children_texts().index('General Reason')).element_info)
+						open_row_temp = uia_controls.ListViewWrapper(reason_grid.children()[reason_grid.children_texts().index('Top Row') + 6].element_info)
+					gen_resn_temp = uia_controls.ListItemWrapper(open_row_temp.item(top_row_temp.children_texts().index('General Reason')).element_info)
 					gen_resn_temp_i = gen_resn_temp.rectangle()
-					c_coords = center(x1=gen_resn_temp_i.left, y1=gen_resn_temp_i.top, x2=gen_resn_temp_i.right,
-					                  y2=gen_resn_temp_i.bottom)
+					c_coords = center(x1=gen_resn_temp_i.left, y1=gen_resn_temp_i.top, x2=gen_resn_temp_i.right, y2=gen_resn_temp_i.bottom)
 					pag.click(*c_coords)
 					log.debug("CLICKED")
 					pag.scroll(-(10 * (len(reason_rows) // 6)))
 					log.debug("SCROLLED")
 					reason_grid = uia_controls.ListViewWrapper(sl_uia.DataGridView.element_info)
-					reason_rows = access_grid(reason_grid, ['General Reason', 'Specific Reason', 'General Resolution',
-					                                        'Specific Resolution'])
+					reason_rows = access_grid(reason_grid, ['General Reason', 'Specific Reason', 'General Resolution', 'Specific Resolution'])
 
 				full_row = None
 				empty_row_i = len(reason_rows) - 1
 				partial = False
 				for i, row in enumerate(reason_rows[::-1]):
-					if {row.General_Reason, row.Specific_Reason, row.General_Resolution, row.Specific_Resolution} == {
-						None, None, None, None}:
+					if {row.General_Reason, row.Specific_Reason, row.General_Resolution, row.Specific_Resolution} == {None, None, None, None}:
 						empty_row_i = len(reason_rows) - (i + 1)
 						partial = False
 					elif {row.Specific_Reason, row.General_Resolution, row.Specific_Resolution} == {None, None, None}:
@@ -137,24 +128,20 @@
 						break
 				top_row_i = reason_grid.children_texts().index('Top Row')
 				top_row = reason_grid.children()[top_row_i]
-				open_row = uia_controls.ListViewWrapper(
-						reason_grid.children()[empty_row_i + top_row_i + 1].element_info)
+				first_row = uia_controls.ListViewWrapper(reason_grid.children()[top_row_i + 1].element_info)
+				open_row = uia_controls.ListViewWrapper(reason_grid.children()[empty_row_i + top_row_i + 1].element_info)
 
-				gen_resn = uia_controls.ListItemWrapper(
-						open_row.item(top_row.children_texts().index('General Reason')).element_info)
+				gen_resn = uia_controls.ListItemWrapper(open_row.item(top_row.children_texts().index('General Reason')).element_info)
 				gen_resn_i = gen_resn.rectangle()
 				c_coords = center(x1=gen_resn_i.left, y1=gen_resn_i.top, x2=gen_resn_i.right, y2=gen_resn_i.bottom)
 
-				spec_resn = uia_controls.ListItemWrapper(
-						open_row.item(top_row.children_texts().index('Specific Reason')).element_info)
+				spec_resn = uia_controls.ListItemWrapper(open_row.item(top_row.children_texts().index('Specific Reason')).element_info)
 				spec_resn_i = spec_resn.rectangle()
 
-				gen_reso = uia_controls.ListItemWrapper(
-						open_row.item(top_row.children_texts().index('General Resolution')).element_info)
+				gen_reso = uia_controls.ListItemWrapper(open_row.item(top_row.children_texts().index('General Resolution')).element_info)
 				gen_reso_i = gen_reso.rectangle()
 
-				spec_reso = uia_controls.ListItemWrapper(
-						open_row.item(top_row.children_texts().index('Specific Resolution')).element_info)
+				spec_reso = uia_controls.ListItemWrapper(open_row.item(top_row.children_texts().index('Specific Resolution')).element_info)
 				spec_reso_i = spec_reso.rectangle()
 
 				pag.click(*c_coords)
@@ -180,7 +167,13 @@
 					pag.typewrite(str(num))
 					sleep(0.5)
 				pag.hotkey('ctrl', 's')
-				pag.press('up', 40)
+				if len(reason_rows) >= 6:
+					pag.click(*coord)
+					pag.scroll(10 * (len(reason_rows) // 6))
+				gen_resn = uia_controls.ListItemWrapper(first_row.item(top_row.children_texts().index('General Reason')).element_info)
+				gen_resn_i = gen_resn.rectangle()
+				c_coords = center(x1=gen_resn_i.left, y1=gen_resn_i.top, x2=gen_resn_i.right, y2=gen_resn_i.bottom)
+				pag.click(*c_coords)
 				if int(sub_unit.general_resolution) == 10000 and int(sub_unit.specific_resolution) == 100:
 					if sl_win.ReasonNotesEdit.texts()[0].strip():
 						sl_win.ReasonNotesEdit.set_text(sl_win.ReasonNotesEdit.texts()[0].strip() +
@@ -199,8 +192,7 @@
 					sl_win.ResolutionNotesEdit.set_text(sl_win.ResolutionNotesEdit.texts()[0].strip() +
 					                                    f"\n[{sub_unit.operator_initials} {sub_unit.datetime.strftime('%m/%d/%Y')}]")
 				else:
-					sl_win.ResolutionNotesEdit.set_text(
-							f"[{sub_unit.operator_initials} {sub_unit.datetime.strftime('%m/%d/%Y')}]")
+					sl_win.ResolutionNotesEdit.set_text(f"[{sub_unit.operator_initials} {sub_unit.datetime.strftime('%m/%d/%Y')}]")
 			sl_win.ResolutionNotesEdit.send_keystrokes('^s')
 		if units[0].SRO_Operations_status == 'Closed':
 			common_controls.TabControlWrapper(sl_win.TabControl).select('General')  # Open 'General' Tab
Index: utils/tools.py
===================================================================
--- utils/tools.py	(revision Shelved Version)
+++ utils/tools.py	(revision Shelved Version)
@@ -0,0 +1,56 @@
+# coding=utf-8
+from collections import Counter
+from typing import Tuple
+
+import numpy as np
+from pywinauto.base_wrapper import BaseWrapper
+
+
+def prepare_string(text: str, strip_chars: str = None, *, remove_all_whitespace: bool = False) -> str:  # THINK: Maybe as decorator?
+	if text is None:
+		return text
+	strip_chars = ' ' if strip_chars is None else strip_chars + ' '
+	text = text.strip(strip_chars)
+	if remove_all_whitespace:
+		while ' ' in text:
+			text = text.replace(' ', '')
+	if not text:
+		return None
+	return text
+
+
+def get_background_color(control: BaseWrapper) -> Tuple[int, int, int]:
+	img = control.capture_as_image()
+	im = np.array(img)
+	assert im.ndim == 3
+	counter = Counter([str(tuple(im[y, x])) for y in np.arange(im.shape[0]) for x in np.arange(im.shape[1])])
+	retval = counter.most_common(1)[0][0].strip('()').replace(' ', '')
+	return tuple(int(n) for n in retval.split(','))
+
+# TODO: TA Login
+# https://ta.bi.com/
+"""
+<body>
+	<form name="loginForm" class="loginForm" id="loginForm" onsubmit="javascript:return WebForm_OnSubmit();" action="./login.aspx" method="post">
+        <div id="centeredDiv">
+            <div id="body">
+                <div id="loginbox">
+                    <div class="loginRow" id="loginUsername">
+                        <label>User Name:</label>
+                        <input name="logAppLogin$UserName" tabindex="1" class="inputF" id="logAppLogin_UserName" type="text">
+                        <span class="val" id="logAppLogin_UserNameRequired" style="color: red; visibility: hidden;">*</span>
+                    </div>
+                    <div class="loginRow" id="loginPassword">
+                        <label>Password:</label>
+                        <input name="logAppLogin$Password" tabindex="2" class="inputF" id="logAppLogin_Password" type="password">
+                        <span class="val" id="logAppLogin_PasswordRequired" style="color: red; visibility: hidden;">*</span>
+                    </div>
+                    <div class="loginRow">
+                        <input name="logAppLogin$Login" tabindex="4" class="loginBtn" id="logAppLogin_Login" style="border-width: 0px;" onmousedown="src='Image/Login-button-p.png'" onmouseup="src='Image/Login-button.png'" onclick='javascript:WebForm_DoPostBackWithOptions(new WebForm_PostBackOptions("logAppLogin$Login", "", true, "", "", false, false))' type="image" src="Image/Login-button.png" text="Login">
+                    </div>
+                </div>
+            </div>
+        </div>
+	</form>
+</body>
+"""
Index: processes/renew_password/__init__.py
===================================================================
--- processes/renew_password/__init__.py	(revision Shelved Version)
+++ processes/renew_password/__init__.py	(revision Shelved Version)
@@ -0,0 +1,1 @@
+from processes.renew_password.renew_password import run, starting_forms
\ No newline at end of file
Index: scrap.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- scrap.py	(revision Local Version)
+++ processes/scrap/scrap.py	(revision Shelved Version)
@@ -1,4 +1,4 @@
-import logging.config
+import logging
 import sys
 from operator import attrgetter
 from time import sleep
@@ -9,24 +9,22 @@
 from pywinauto import keyboard
 from pywinauto.controls import common_controls, uia_controls, win32_controls
 
-from common import Application, Unit, access_grid, center
+from _common import *
 from constants import SYTELINE_WINDOW_TITLE
-from crypt import decrypt
 from exceptions import *
-from sql import MS_SQL, SQL_Lite
 
-logging.config.fileConfig('config.ini')
-log = logging
+log = logging.getLogger(__name__)
 reason_dict = {'Monitoring': 22, 'RTS': 24, 'Direct': 24}
 
 
+# TODO: Rework process
+
 def Scrap(app: Application, units: List[Unit]):
 	completed_units = []
 	global_units = []
 	try:
 		pywinauto.timings.Timings.Fast()
-		log.debug(
-				f"Starting Scrap script with units: {', '.join(unit.serial_number_prefix+unit.serial_number for unit in units)}")
+		log.debug(f"Starting Scrap script with units: {', '.join(unit.serial_number_prefix+unit.serial_number for unit in units)}")
 		sl_win = app.win32.window(title_re=SYTELINE_WINDOW_TITLE)
 		sl_uia = app.uia.window(title_re=SYTELINE_WINDOW_TITLE)
 		if not sl_win.exists():
@@ -46,25 +44,19 @@
 		                               '54005880Q750516045004500',
 		                               '1121327')
 		_adr_data, _adr_data_sl, _usr_data, _pwd_data, _db_data, _db_data_sl, _key = _assorted_lengths_of_string
-		mssql = MS_SQL(address=decrypt(_adr_data, _key), username=decrypt(_usr_data, _key),
-		               password=decrypt(_pwd_data, _key), database=decrypt(_db_data, _key))
+		mssql = MS_SQL.legacy_encrypted_connection(_key, address=_adr_data, username=_usr_data, password=_pwd_data, database=_db_data)
 
 		sql = SQL_Lite(':memory:')
-		sql.execute(
-				"CREATE TABLE scrap (id integer, serial_number text, build text, location text, datetime text, operator text)")
+		sql.execute("CREATE TABLE scrap (id INTEGER, serial_number TEXT, build TEXT, location TEXT, datetime TEXT, operator TEXT)")
 		for unit in units:
 			sql.execute(
 					f"INSERT INTO scrap(id, serial_number, build, location, datetime, operator) VALUES "
-					f"({unit.id}, '{unit.serial_number}', '{unit.whole_build}', '{unit.location}', '{unit.datetime.strftime('%m/%d/%Y %H:%M:%S')}', '{unit.operator}')")
-		results = sql.execute(
-				f"SELECT build,location,COUNT(location) AS count FROM scrap GROUP BY build, location ORDER BY count DESC",
-				fetchall=True)
+					f"({unit.id}, '{unit.serial_number}', '{unit.whole_build}', '{unit.location}', '{unit.datetime.strftime('%m/%d/%Y %H:%M:%S')}', '{unit.operator}')")  # FIXME: SQL command w/ parameters
+		results = sql.execute(f"SELECT build,location,COUNT(location) AS count FROM scrap GROUP BY build, location ORDER BY count DESC", fetchall=True)  # FIXME: SQL command w/ parameters
 		sleep(1)
 		id_list = []
 		for build, location, count in results:
-			for x in sql.execute(
-					f"SELECT * FROM scrap WHERE build = '{build}' AND location = '{location}' ORDER BY datetime ASC",
-					fetchall=True):
+			for x in sql.execute(f"SELECT * FROM scrap WHERE build = '{build}' AND location = '{location}' ORDER BY datetime ASC", fetchall=True):  # FIXME: SQL command w/ parameters
 				id_list.append(x.id)
 				if len(id_list) >= 10:
 					break
@@ -93,9 +85,8 @@
 						global_units.append(unit)
 					continue
 				operator = sql.execute(
-						f"SELECT operator, COUNT(operator) AS count FROM scrap WHERE {' OR '.join([f'id = {x.id}' for x in units])} GROUP BY operator ORDER BY count DESC")
-				op = ''.join([x[0].upper() for x in mssql.execute(
-						f"SELECT [FirstName],[LastName] FROM Users WHERE [Username] = '{operator[0].strip()}'")])
+					f"SELECT operator, COUNT(operator) AS count FROM scrap WHERE {' OR '.join([f'id = {x.id}' for x in units])} GROUP BY operator ORDER BY count DESC")  # FIXME: SQL command w/ parameters
+				op = ''.join([x[0].upper() for x in mssql.execute(f"SELECT [FirstName],[LastName] FROM Users WHERE [Username] = '{operator[0].strip()}'")])  # FIXME: SQL command w/ parameters
 				docnum = f"SCRAP {op}"
 				qty = len(units)
 				sl_win.LocationEdit.wait('ready', 2, 0.09)
@@ -122,15 +113,13 @@
 				for unit in units:
 					unit.misc_issue_timer.start()
 					unit.misc_issue_time += (unit._life_timer.lap() / len(units))
-					app.find_value_in_collection(collection='SLSerials', property_='S/N (SerNum)',
-					                             value=unit.serial_number)
+					app.find_value_in_collection(collection='SLSerials', property_='S/N (SerNum)', value=unit.serial_number)
 					cell = sl_win.get_focus()
 					cell.send_keystrokes('{SPACE}')
 					unit.misc_issue_time += unit.misc_issue_timer.stop()
 					global_units.append(unit)
 				sl_win.SelectedQtyEdit.wait('ready', 2, 0.09)
-				text1, text2, text3 = [x.strip() for x in (
-					sl_win.SelectedQtyEdit.texts()[0], sl_win.TargetQtyEdit.texts()[0], sl_win.RangeQtyEdit.texts()[0])]
+				text1, text2, text3 = [x.strip() for x in (sl_win.SelectedQtyEdit.texts()[0], sl_win.TargetQtyEdit.texts()[0], sl_win.RangeQtyEdit.texts()[0])]
 				if text1 == text2:
 					log.debug(f"{text1} == {text2}")
 				else:
@@ -156,8 +145,8 @@
 			app.verify_form('Units')
 			sl_win.UnitEdit.set_text(unit.serial_number_prefix + unit.serial_number)
 			sl_win.UnitEdit.send_keystrokes('{F4}')  # Filter in Place
-			while (sl_win.UnitEdit.texts()[0].strip() != unit.serial_number_prefix + unit.serial_number) and \
-					sl_win.UnitEdit.texts()[0].strip():  # While actual serial number != attempted serial number
+			while (sl_win.UnitEdit.texts()[0].strip() != unit.serial_number_prefix + unit.serial_number) and sl_win.UnitEdit.texts()[
+				0].strip():  # While actual serial number != attempted serial number
 				state = sl_uia.UnitEdit.legacy_properties()['State']
 				bin_state = bin(state)
 				log.debug(f"Units Textbox State: {state}")
@@ -166,11 +155,9 @@
 				sleep(0.4)
 			if sl_win.UnitEdit.texts()[0].strip() != unit.serial_number_prefix + unit.serial_number:
 				if not sl_win.UnitEdit.texts()[0].strip():
-					raise InvalidSerialNumberError(
-							f"Expected input serial number '{unit.serial_number_prefix+unit.serial_number}', returned None")
+					raise InvalidSerialNumberError(f"Expected input serial number '{unit.serial_number_prefix+unit.serial_number}', returned None")
 				else:
-					raise SyteLineFilterInPlaceError(
-							f"Expected input serial number '{unit.serial_number_prefix+unit.serial_number}', returned '{sl_win.UnitEdit.texts()[0].strip()}'")
+					raise SyteLineFilterInPlaceError(f"Expected input serial number '{unit.serial_number_prefix+unit.serial_number}', returned '{sl_win.UnitEdit.texts()[0].strip()}'")
 			sl_win.set_focus()
 			customer_number = 302
 			ship_to = int(unit.phone) + 1  # if unit.phone: 2, else: 1
@@ -224,14 +211,12 @@
 				sl_win.SROTransactionsButton.wait('enabled', 2, 0.09)
 				common_controls.TabControlWrapper(sl_win.TabControl).select('Reasons')  # Open 'Reasons' Tab
 				reason_grid = uia_controls.ListViewWrapper(sl_uia.DataGridView.element_info)
-				reason_rows = access_grid(reason_grid, ['General Reason', 'Specific Reason', 'General Resolution',
-				                                        'Specific Resolution'])
+				reason_rows = access_grid(reason_grid, ['General Reason', 'Specific Reason', 'General Resolution', 'Specific Resolution'])
 				full_row = None
 				empty_row_i = len(reason_rows) - 1
 				partial = False
 				for i, row in enumerate(reason_rows[::-1]):
-					if {row.General_Reason, row.Specific_Reason, row.General_Resolution, row.Specific_Resolution} == {
-						None, None, None, None}:
+					if {row.General_Reason, row.Specific_Reason, row.General_Resolution, row.Specific_Resolution} == {None, None, None, None}:
 						empty_row_i = len(reason_rows) - (i + 1)
 						partial = False
 					elif {row.Specific_Reason, row.General_Resolution, row.Specific_Resolution} == {None, None, None}:
@@ -244,24 +229,19 @@
 						break
 				top_row_i = reason_grid.children_texts().index('Top Row')
 				top_row = reason_grid.children()[top_row_i]
-				open_row = uia_controls.ListViewWrapper(
-						reason_grid.children()[empty_row_i + top_row_i + 1].element_info)
+				open_row = uia_controls.ListViewWrapper(reason_grid.children()[empty_row_i + top_row_i + 1].element_info)
 
-				gen_resn = uia_controls.ListItemWrapper(
-						open_row.item(top_row.children_texts().index('General Reason')).element_info)
+				gen_resn = uia_controls.ListItemWrapper(open_row.item(top_row.children_texts().index('General Reason')).element_info)
 				gen_resn_i = gen_resn.rectangle()
 				c_coords = center(x1=gen_resn_i.left, y1=gen_resn_i.top, x2=gen_resn_i.right, y2=gen_resn_i.bottom)
 
-				spec_resn = uia_controls.ListItemWrapper(
-						open_row.item(top_row.children_texts().index('Specific Reason')).element_info)
+				spec_resn = uia_controls.ListItemWrapper(open_row.item(top_row.children_texts().index('Specific Reason')).element_info)
 				spec_resn_i = spec_resn.rectangle()
 
-				gen_reso = uia_controls.ListItemWrapper(
-						open_row.item(top_row.children_texts().index('General Resolution')).element_info)
+				gen_reso = uia_controls.ListItemWrapper(open_row.item(top_row.children_texts().index('General Resolution')).element_info)
 				gen_reso_i = gen_reso.rectangle()
 
-				spec_reso = uia_controls.ListItemWrapper(
-						open_row.item(top_row.children_texts().index('Specific Resolution')).element_info)
+				spec_reso = uia_controls.ListItemWrapper(open_row.item(top_row.children_texts().index('Specific Resolution')).element_info)
 				spec_reso_i = spec_reso.rectangle()
 
 				pag.click(*c_coords)
@@ -289,11 +269,17 @@
 				pag.hotkey('ctrl', 's')
 				if sl_win.ReasonNotesEdit.texts()[0].strip():
 					sl_win.ReasonNotesEdit.set_text(sl_win.ReasonNotesEdit.texts()[0].strip() +
-					                                f"\n[{unit.specific_resolution_name.upper()} {unit.general_resolution_name.upper()}]\n[{unit.operator_initials} {unit.datetime.strftime('%m/%d/%Y')}]")
+					                                f"\n[{unit.specific_resolution_name.upper()} {unit.general_resolution_name.upper()}]")
 				else:
 					sl_win.ReasonNotesEdit.set_text(
-							f"[{unit.specific_resolution_name.upper()} {unit.general_resolution_name.upper()}]\n[{unit.operator_initials} {unit.datetime.strftime('%m/%d/%Y')}]")
+							f"[{unit.specific_resolution_name.upper()} {unit.general_resolution_name.upper()}]")
 				sl_win.ReasonNotesEdit.send_keystrokes('^s')
+
+				if sl_win.ResolutionNotesEdit.texts()[0].strip():
+					sl_win.ResolutionNotesEdit.set_text(sl_win.ResolutionNotesEdit.texts()[0].strip() + f"\n[{unit.operator_initials} {unit.datetime.strftime('%m/%d/%Y')}]")
+				else:
+					sl_win.ResolutionNotesEdit.set_text(f"[{unit.operator_initials} {unit.datetime.strftime('%m/%d/%Y')}]")
+				sl_win.ResolutionNotesEdit.send_keystrokes('^s')
 				status = win32_controls.EditWrapper(sl_win.StatusEdit3.element_info)
 				sl_win.set_focus()
 				status.set_keyboard_focus()
@@ -314,8 +300,7 @@
 			sleep(0.2)
 			sl_win.send_keystrokes('o')  # Notes For Current, (O)
 			sleep(0.5)
-			app.find_value_in_collection(collection='Object Notes', property_='Subject (DerDesc)', value='NOTES',
-			                             case_sensitive=True)
+			app.find_value_in_collection(collection='Object Notes', property_='Subject (DerDesc)', value='NOTES', case_sensitive=True)
 			dlg = app.get_popup(2)
 			if dlg:
 				dlg[0].send_keystrokes('{ENTER}')
@@ -324,11 +309,9 @@
 			sl_uia.window(auto_id='DerContentEdit').set_focus()
 			note_txt = sl_win.get_focus()
 			if note_txt.texts()[0].strip():
-				note_txt.set_text(note_txt.texts()[
-					                  0].strip() + f"\n[{unit.specific_resolution_name} {unit.general_resolution_name}]\n[{unit.operator_initials} {unit.datetime.strftime('%m/%d/%Y')}]")
+				note_txt.set_text(note_txt.texts()[0].strip() + f"\n[{unit.specific_resolution_name} {unit.general_resolution_name}]\n[{unit.operator_initials} {unit.datetime.strftime('%m/%d/%Y')}]")
 			else:
-				note_txt.set_text(
-						f"[{unit.specific_resolution_name} {unit.general_resolution_name}]\n[{unit.operator_initials} {unit.datetime.strftime('%m/%d/%Y')}]")
+				note_txt.set_text(f"[{unit.specific_resolution_name} {unit.general_resolution_name}]\n[{unit.operator_initials} {unit.datetime.strftime('%m/%d/%Y')}]")
 			sl_win.send_keystrokes('^s')
 			sl_uia.CancelCloseButton.click()
 			sl_win.send_keystrokes('{F4}')
Index: processes/reason/__init__.py
===================================================================
--- processes/reason/__init__.py	(revision Shelved Version)
+++ processes/reason/__init__.py	(revision Shelved Version)
@@ -0,0 +1,2 @@
+"""Makes sure 'Units' form is open"""
+# TODO: Initialization
Index: .idea/dataSources/94484664-fd08-47d2-9dfa-66ccb3761007/storage.xml
===================================================================
--- .idea/dataSources/94484664-fd08-47d2-9dfa-66ccb3761007/storage.xml	(revision Shelved Version)
+++ .idea/dataSources/94484664-fd08-47d2-9dfa-66ccb3761007/storage.xml	(revision Shelved Version)
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<storage-settings staging-layout="plain" base-layout="schema-zip" language="TSQL"/>
\ No newline at end of file
Index: __init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- __init__.py	(revision Local Version)
+++ __init__.py	(revision Shelved Version)
@@ -1,3 +1,5 @@
+#!/usr/bin/env python
+#  coding=utf-8
 __author__ = 'jsh0x'
 __version__ = '1.3.4'
 
@@ -17,37 +19,6 @@
 packages = ['matplotlib', 'numpy', 'PIL', 'psutil', 'win32api',
             'pyautogui', 'pymssql', 'pywinauto', 'win32gui']
 
-# class OneLineExceptionFormatter(logging.Formatter):
-#	 def formatException(self, exc_info):
-#		 """
-#		 Format an exception so that it prints on a single line.
-#		 """
-#		 result = super(OneLineExceptionFormatter, self).formatException(exc_info)
-#		 return repr(result)  # or format into one line however you want to
-#
-#	 def format(self, record):
-#		 s = super(OneLineExceptionFormatter, self).format(record)
-#		 if record.exc_text:
-#			 s = s.replace('\n', '') + '|'
-#		 return s
-#
-# def configure_logging():
-#	 fh = logging.FileHandler('output.txt', 'w')
-#	 f = OneLineExceptionFormatter('%(asctime)s|%(levelname)s|%(message)s|',
-#								   '%d/%m/%Y %H:%M:%S')
-#	 fh.setFormatter(f)
-#	 root = logging.getLogger()
-#	 root.setLevel(logging.DEBUG)
-#	 root.addHandler(fh)
-#
-# def main():
-#	 configure_logging()
-#	 logging.info('Sample message')
-#	 try:
-#		 x = 1 / 0
-#	 except ZeroDivisionError as e:
-#		 logging.exception('ZeroDivisionError: %s', e)
-
 FILE_NAME = sys.executable
 DIR_NAME = os.path.dirname(sys.executable)
 os.environ["TCL_LIBRARY"] = os.path.join(DIR_NAME, r"tcl\tcl8.6")
@@ -96,20 +67,6 @@
 	move(abs_path, 'config.ini')
 
 
-# def get_outdated_modules(pip_dir) -> dict:
-# 	retval = {}
-# 	mods = str(subprocess.Popen([pip_dir, 'list', '--format=legacy', '--outdated'], stdout=subprocess.PIPE).communicate()[0])
-# 	mods = (mods.split("'")[1]).split('\\r\\n')
-# 	for mod in mods:
-# 		try:
-# 			mod = mod.split(' ')
-# 			name, old, new = mod[0], (mod[1].rstrip(')')).lstrip('('), mod[4]
-# 			retval[name] = (old, new)
-# 		except:
-# 			continue
-# 	return retval
-
-
 def write_config(usr: str = '???', pwd: str = '???', fp: str = None):
 	fp = find_file('WinStudio.exe') if fp is None else fp
 	path = (os.path.dirname(sys.executable)).replace('\\', '/') + "/Scripts/pip3.6.exe"
@@ -140,20 +97,18 @@
 	config['loggers'] = {'keys': list_to_string(loggers)}
 	config['handlers'] = {'keys': list_to_string(handlers)}
 	config['formatters'] = {'keys': list_to_string(formatters)}
-	config['formatter_errorFormatter'] = {
-		'format':  "[{asctime}][{levelname}][{filename}, function:{funcName}, line:{lineno!s}]  {message}",
-		'datefmt': "%X",
-		'style':   "{",
-		'class':   "logging.Formatter"}
+	config['formatter_errorFormatter'] = {'format':  "[{asctime}][{levelname}][{filename}, function:{funcName}, line:{lineno!s}]  {message}",
+	                                      'datefmt': "%X",
+	                                      'style':   "{",
+	                                      'class':   "logging.Formatter"}
 	config['formatter_infoFormatter'] = {'format':  "[{asctime}]{levelname!s:<8} {message}",
 	                                     'datefmt': "%x %X",
 	                                     'style':   "{",
 	                                     'class':   "logging.Formatter"}
-	config['formatter_debugFormatter'] = {
-		'format':  "[{asctime}.{msecs:0>3.0f}] {levelname!s:<5} {module!s:>8}.{funcName}:{lineno!s:<5} {message}",
-		'datefmt': "%X",
-		'style':   "{",
-		'class':   "logging.Formatter"}
+	config['formatter_debugFormatter'] = {'format':  "[{asctime}.{msecs:0>3.0f}] {levelname!s:<5} {module!s:>8}.{funcName}:{lineno!s:<5} {message}",
+	                                      'datefmt': "%X",
+	                                      'style':   "{",
+	                                      'class':   "logging.Formatter"}
 	config['handler_errorHandler'] = {'class':     "StreamHandler",
 	                                  'level':     "WARNING",
 	                                  'formatter': "errorFormatter",
@@ -197,8 +152,7 @@
 desktop = pathlib.WindowsPath.home() / 'Desktop'
 shortcut = desktop / 'bi_entry.lnk'
 if not shortcut.exists():
-	create_shortcut(name='bi_entry', exe_path=pathlib.WindowsPath.cwd() / 'bi_entry.exe',
-	                startin=pathlib.WindowsPath.home() / 'Desktop' / 'build',
+	create_shortcut(name='bi_entry', exe_path=pathlib.WindowsPath.cwd() / 'bi_entry.exe', startin=pathlib.WindowsPath.home() / 'Desktop' / 'build',
 	                icon_path=pathlib.WindowsPath.cwd() / 'bi_entry.ico')
 	sys.exit()
 
Index: processes/runthrough/__init__.py
===================================================================
--- processes/runthrough/__init__.py	(revision Shelved Version)
+++ processes/runthrough/__init__.py	(revision Shelved Version)
@@ -0,0 +1,0 @@
Index: .idea/dataSources/94484664-fd08-47d2-9dfa-66ccb3761007.xml
===================================================================
--- .idea/dataSources/94484664-fd08-47d2-9dfa-66ccb3761007.xml	(revision Shelved Version)
+++ .idea/dataSources/94484664-fd08-47d2-9dfa-66ccb3761007.xml	(revision Shelved Version)
@@ -0,0 +1,2450 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<dataSource name="MfgTraveler@172.16.4.27">
+  <database-model serializer="dbm" rdbms="MSSQL" format-version="4.4">
+    <root id="1">
+      <ServerType>standalone</ServerType>
+    </root>
+    <database id="2" parent="1" name="MfgTraveler">
+      <ObjectId>38</ObjectId>
+      <Current>1</Current>
+      <Visible>1</Visible>
+    </database>
+    <database id="3" parent="1" name="master">
+      <ObjectId>1</ObjectId>
+    </database>
+    <database id="4" parent="1" name="tempdb">
+      <ObjectId>2</ObjectId>
+    </database>
+    <database id="5" parent="1" name="model">
+      <ObjectId>3</ObjectId>
+    </database>
+    <database id="6" parent="1" name="msdb">
+      <ObjectId>4</ObjectId>
+    </database>
+    <database id="7" parent="1" name="accutrax">
+      <ObjectId>5</ObjectId>
+    </database>
+    <database id="8" parent="1" name="KRONOS7">
+      <ObjectId>6</ObjectId>
+    </database>
+    <database id="9" parent="1" name="Kofax">
+      <ObjectId>7</ObjectId>
+    </database>
+    <database id="10" parent="1" name="FileBound">
+      <ObjectId>8</ObjectId>
+    </database>
+    <database id="11" parent="1" name="ReportServer">
+      <ObjectId>9</ObjectId>
+    </database>
+    <database id="12" parent="1" name="ReportServerTempDB">
+      <ObjectId>10</ObjectId>
+    </database>
+    <database id="13" parent="1" name="ReportServer_BI_SCOM">
+      <ObjectId>11</ObjectId>
+    </database>
+    <database id="14" parent="1" name="ReportServer_BI_SCOMTempDB">
+      <ObjectId>12</ObjectId>
+    </database>
+    <database id="15" parent="1" name="BESTSYS">
+      <ObjectId>13</ObjectId>
+    </database>
+    <database id="16" parent="1" name="Sage_FAS">
+      <ObjectId>14</ObjectId>
+    </database>
+    <database id="17" parent="1" name="BI_GEO_Assets">
+      <ObjectId>15</ObjectId>
+    </database>
+    <database id="18" parent="1" name="SharePoint_Config2013">
+      <ObjectId>16</ObjectId>
+    </database>
+    <database id="19" parent="1" name="SharePoint_AdminContent_ccc6e16b-1203-4565-ac69-2c2fc935ed57">
+      <ObjectId>17</ObjectId>
+    </database>
+    <database id="20" parent="1" name="WSS_Content_BoucoSharePoint2013">
+      <ObjectId>18</ObjectId>
+    </database>
+    <database id="21" parent="1" name="TranslationService_b89445f8483d4698b98392379402236b">
+      <ObjectId>19</ObjectId>
+    </database>
+    <database id="22" parent="1" name="WordAutomationServices_1a8b885660bb41c0a2596b774c5cdcda">
+      <ObjectId>20</ObjectId>
+    </database>
+    <database id="23" parent="1" name="Secure_Store_Service_DB_c55a04f4ff114a14b00425190106e73f">
+      <ObjectId>21</ObjectId>
+    </database>
+    <database id="24" parent="1" name="StateService_929ced3ca4344c8ea2685921ea61ac08">
+      <ObjectId>22</ObjectId>
+    </database>
+    <database id="25" parent="1" name="AppMng_Service_DB_5ec2258fe00c4d67bce0fc739cf4afa0">
+      <ObjectId>23</ObjectId>
+    </database>
+    <database id="26" parent="1" name="WSS_Logging">
+      <ObjectId>24</ObjectId>
+    </database>
+    <database id="27" parent="1" name="User Profile Service Application_ProfileDB_3a38d93fd51c41c2891d9ba5a9627f38">
+      <ObjectId>25</ObjectId>
+    </database>
+    <database id="28" parent="1" name="User Profile Service Application_SyncDB_266f02c06b174269a7971eeb0095975e">
+      <ObjectId>26</ObjectId>
+    </database>
+    <database id="29" parent="1" name="User Profile Service Application_SocialDB_1df5440351124016ab68a118ff2c581d">
+      <ObjectId>27</ObjectId>
+    </database>
+    <database id="30" parent="1" name="Bdc_Service_DB_ebcbea3f6c9245f78a1b766c35415c6f">
+      <ObjectId>28</ObjectId>
+    </database>
+    <database id="31" parent="1" name="2013MetadataDB">
+      <ObjectId>29</ObjectId>
+    </database>
+    <database id="32" parent="1" name="SharePoint_Service_Search_Service">
+      <ObjectId>30</ObjectId>
+    </database>
+    <database id="33" parent="1" name="SharePoint_Service_Search_Service_CrawlStore">
+      <ObjectId>31</ObjectId>
+    </database>
+    <database id="34" parent="1" name="SharePoint_Service_Search_Service_AnalyticsReportingStore">
+      <ObjectId>32</ObjectId>
+    </database>
+    <database id="35" parent="1" name="SharePoint_Service_Search_Service_LinksStore">
+      <ObjectId>33</ObjectId>
+    </database>
+    <database id="36" parent="1" name="DocAve6_ControlDB">
+      <ObjectId>34</ObjectId>
+    </database>
+    <database id="37" parent="1" name="WSS_Content_ISP_Protocol">
+      <ObjectId>35</ObjectId>
+    </database>
+    <database id="38" parent="1" name="WSS_Content_MySites">
+      <ObjectId>36</ObjectId>
+    </database>
+    <database id="39" parent="1" name="CIPSYS">
+      <ObjectId>37</ObjectId>
+    </database>
+    <schema id="40" parent="2" name="dbo">
+      <ObjectId>1</ObjectId>
+      <IntrospectionTimestamp>2017-11-06.07:22:12.440</IntrospectionTimestamp>
+      <Current>1</Current>
+      <Visible>1</Visible>
+    </schema>
+    <schema id="41" parent="2" name="guest">
+      <ObjectId>2</ObjectId>
+    </schema>
+    <schema id="42" parent="2" name="INFORMATION_SCHEMA">
+      <ObjectId>3</ObjectId>
+    </schema>
+    <schema id="43" parent="2" name="sys">
+      <ObjectId>4</ObjectId>
+    </schema>
+    <schema id="44" parent="2" name="db_owner">
+      <ObjectId>16384</ObjectId>
+    </schema>
+    <schema id="45" parent="2" name="db_accessadmin">
+      <ObjectId>16385</ObjectId>
+    </schema>
+    <schema id="46" parent="2" name="db_securityadmin">
+      <ObjectId>16386</ObjectId>
+    </schema>
+    <schema id="47" parent="2" name="db_ddladmin">
+      <ObjectId>16387</ObjectId>
+    </schema>
+    <schema id="48" parent="2" name="db_backupoperator">
+      <ObjectId>16389</ObjectId>
+    </schema>
+    <schema id="49" parent="2" name="db_datareader">
+      <ObjectId>16390</ObjectId>
+    </schema>
+    <schema id="50" parent="2" name="db_datawriter">
+      <ObjectId>16391</ObjectId>
+    </schema>
+    <schema id="51" parent="2" name="db_denydatareader">
+      <ObjectId>16392</ObjectId>
+    </schema>
+    <schema id="52" parent="2" name="db_denydatawriter">
+      <ObjectId>16393</ObjectId>
+    </schema>
+    <table id="53" parent="40" name="Assemblies">
+      <ObjectId>334624235</ObjectId>
+      <CreatedTimestamp>2016-09-14.14:36:08.107</CreatedTimestamp>
+      <ModifiedTimestamp>2016-09-23.15:23:53.380</ModifiedTimestamp>
+    </table>
+    <table id="54" parent="40" name="Builds">
+      <ObjectId>135671531</ObjectId>
+      <CreatedTimestamp>2017-02-23.11:35:29.210</CreatedTimestamp>
+      <ModifiedTimestamp>2017-02-24.07:57:56.433</ModifiedTimestamp>
+    </table>
+    <table id="55" parent="40" name="Code_Refs">
+      <ObjectId>1716201164</ObjectId>
+      <CreatedTimestamp>2017-10-10.09:07:41.060</CreatedTimestamp>
+      <ModifiedTimestamp>2017-10-10.09:07:41.090</ModifiedTimestamp>
+    </table>
+    <table id="56" parent="40" name="Configs">
+      <ObjectId>1678629023</ObjectId>
+      <CreatedTimestamp>2016-10-11.14:42:09.460</CreatedTimestamp>
+      <ModifiedTimestamp>2017-06-29.12:39:44.583</ModifiedTimestamp>
+    </table>
+    <table id="57" parent="40" name="Events">
+      <ObjectId>1943677972</ObjectId>
+      <CreatedTimestamp>2017-07-24.13:34:25.170</CreatedTimestamp>
+      <ModifiedTimestamp>2017-07-24.13:34:25.170</ModifiedTimestamp>
+    </table>
+    <table id="58" parent="40" name="FA">
+      <ObjectId>325576198</ObjectId>
+      <CreatedTimestamp>2015-10-12.14:28:58.023</CreatedTimestamp>
+      <ModifiedTimestamp>2015-10-12.14:28:58.037</ModifiedTimestamp>
+    </table>
+    <table id="59" parent="40" name="Failure_Paths">
+      <ObjectId>1940201962</ObjectId>
+      <CreatedTimestamp>2017-10-13.11:18:42.030</CreatedTimestamp>
+      <ModifiedTimestamp>2017-10-13.11:18:42.053</ModifiedTimestamp>
+    </table>
+    <table id="60" parent="40" name="FailuresRepairs">
+      <ObjectId>1220199397</ObjectId>
+      <CreatedTimestamp>2017-09-19.09:27:25.280</CreatedTimestamp>
+      <ModifiedTimestamp>2017-09-19.09:27:25.303</ModifiedTimestamp>
+    </table>
+    <table id="61" parent="40" name="Images">
+      <ObjectId>1659152956</ObjectId>
+      <CreatedTimestamp>2017-02-08.09:51:22.413</CreatedTimestamp>
+      <ModifiedTimestamp>2017-02-08.09:51:22.427</ModifiedTimestamp>
+    </table>
+    <table id="62" parent="40" name="Inventory">
+      <ObjectId>1218103380</ObjectId>
+      <CreatedTimestamp>2016-08-03.14:32:38.360</CreatedTimestamp>
+      <ModifiedTimestamp>2016-09-23.10:41:39.240</ModifiedTimestamp>
+    </table>
+    <table id="63" parent="40" name="LOC8Beacon">
+      <ObjectId>1269579561</ObjectId>
+      <CreatedTimestamp>2016-06-02.16:09:15.043</CreatedTimestamp>
+      <ModifiedTimestamp>2016-10-21.13:45:15.607</ModifiedTimestamp>
+    </table>
+    <table id="64" parent="40" name="LOC8BeaconSerials">
+      <ObjectId>2030630277</ObjectId>
+      <CreatedTimestamp>2016-10-27.11:47:11.753</CreatedTimestamp>
+      <ModifiedTimestamp>2017-02-07.10:58:07.453</ModifiedTimestamp>
+    </table>
+    <table id="65" parent="40" name="LOC8Data">
+      <ObjectId>1486628339</ObjectId>
+      <CreatedTimestamp>2016-09-29.08:13:16.297</CreatedTimestamp>
+      <ModifiedTimestamp>2017-03-01.07:54:37.943</ModifiedTimestamp>
+    </table>
+    <table id="66" parent="40" name="MEID">
+      <ObjectId>439672614</ObjectId>
+      <CreatedTimestamp>2017-03-27.09:08:25.027</CreatedTimestamp>
+      <ModifiedTimestamp>2017-08-10.11:24:29.913</ModifiedTimestamp>
+    </table>
+    <table id="67" parent="40" name="Messages">
+      <ObjectId>7671075</ObjectId>
+      <CreatedTimestamp>2017-02-21.11:18:00.873</CreatedTimestamp>
+      <ModifiedTimestamp>2017-04-17.09:33:31.370</ModifiedTimestamp>
+    </table>
+    <table id="68" parent="40" name="Operations">
+      <ObjectId>302624121</ObjectId>
+      <CreatedTimestamp>2016-09-08.15:42:55.430</CreatedTimestamp>
+      <ModifiedTimestamp>2017-10-12.10:06:22.850</ModifiedTimestamp>
+    </table>
+    <table id="69" parent="40" name="Parts">
+      <ObjectId>967674495</ObjectId>
+      <CreatedTimestamp>2017-05-10.07:42:34.260</CreatedTimestamp>
+      <ModifiedTimestamp>2017-05-10.07:42:34.277</ModifiedTimestamp>
+    </table>
+    <table id="70" parent="40" name="Prefixes">
+      <ObjectId>180195692</ObjectId>
+      <CreatedTimestamp>2017-09-05.08:42:14.377</CreatedTimestamp>
+      <ModifiedTimestamp>2017-09-05.08:43:50.693</ModifiedTimestamp>
+    </table>
+    <table id="71" parent="40" name="ProcSeq">
+      <ObjectId>148195578</ObjectId>
+      <CreatedTimestamp>2017-09-01.12:07:53.250</CreatedTimestamp>
+      <ModifiedTimestamp>2017-09-01.12:07:53.323</ModifiedTimestamp>
+    </table>
+    <table id="72" parent="40" name="ProcessFlow">
+      <ObjectId>663673412</ObjectId>
+      <CreatedTimestamp>2017-04-18.08:31:21.070</CreatedTimestamp>
+      <ModifiedTimestamp>2017-04-18.08:32:52.993</ModifiedTimestamp>
+    </table>
+    <table id="73" parent="40" name="Processes">
+      <ObjectId>1122103038</ObjectId>
+      <CreatedTimestamp>2016-07-29.13:23:34.233</CreatedTimestamp>
+      <ModifiedTimestamp>2017-06-28.10:23:04.453</ModifiedTimestamp>
+    </table>
+    <table id="74" parent="40" name="PyComm">
+      <ObjectId>1284199625</ObjectId>
+      <CreatedTimestamp>2017-09-27.13:58:35.310</CreatedTimestamp>
+      <ModifiedTimestamp>2017-09-27.13:58:35.350</ModifiedTimestamp>
+    </table>
+    <table id="75" parent="40" name="PyComm2">
+      <ObjectId>1364199910</ObjectId>
+      <CreatedTimestamp>2017-09-27.14:27:07.137</CreatedTimestamp>
+      <ModifiedTimestamp>2017-09-27.14:27:07.610</ModifiedTimestamp>
+    </table>
+    <table id="76" parent="40" name="Reports">
+      <ObjectId>103671417</ObjectId>
+      <CreatedTimestamp>2017-02-23.11:21:02.093</CreatedTimestamp>
+      <ModifiedTimestamp>2017-02-23.11:21:02.093</ModifiedTimestamp>
+    </table>
+    <table id="77" parent="40" name="SL2Update">
+      <ObjectId>468196718</ObjectId>
+      <CreatedTimestamp>2017-09-05.10:50:27.117</CreatedTimestamp>
+      <ModifiedTimestamp>2017-09-05.11:31:35.267</ModifiedTimestamp>
+    </table>
+    <table id="78" parent="40" name="SL8Records">
+      <ObjectId>1780201392</ObjectId>
+      <CreatedTimestamp>2017-10-10.11:33:59.367</CreatedTimestamp>
+      <ModifiedTimestamp>2017-10-10.12:38:05.970</ModifiedTimestamp>
+    </table>
+    <table id="79" parent="40" name="SL_Codes">
+      <ObjectId>436196604</ObjectId>
+      <CreatedTimestamp>2017-09-05.10:37:10.543</CreatedTimestamp>
+      <ModifiedTimestamp>2017-09-05.10:37:10.557</ModifiedTimestamp>
+    </table>
+    <table id="80" parent="40" name="ScrapLog">
+      <ObjectId>1991678143</ObjectId>
+      <CreatedTimestamp>2017-08-17.10:48:55.123</CreatedTimestamp>
+      <ModifiedTimestamp>2017-09-07.15:33:27.127</ModifiedTimestamp>
+    </table>
+    <table id="81" parent="40" name="SerialRanges">
+      <ObjectId>875150163</ObjectId>
+      <CreatedTimestamp>2017-01-05.13:57:03.217</CreatedTimestamp>
+      <ModifiedTimestamp>2017-01-05.13:57:03.233</ModifiedTimestamp>
+    </table>
+    <table id="82" parent="40" name="Statistics">
+      <ObjectId>1028198713</ObjectId>
+      <CreatedTimestamp>2017-09-18.08:35:15.973</CreatedTimestamp>
+      <ModifiedTimestamp>2017-09-18.10:06:48.107</ModifiedTimestamp>
+    </table>
+    <table id="83" parent="40" name="Technician">
+      <ObjectId>1566628624</ObjectId>
+      <CreatedTimestamp>2016-09-30.12:47:45.800</CreatedTimestamp>
+      <ModifiedTimestamp>2016-09-30.12:47:45.800</ModifiedTimestamp>
+    </table>
+    <table id="84" parent="40" name="Training">
+      <ObjectId>1662628966</ObjectId>
+      <CreatedTimestamp>2016-10-10.08:17:02.307</CreatedTimestamp>
+      <ModifiedTimestamp>2017-04-20.13:03:43.353</ModifiedTimestamp>
+    </table>
+    <table id="85" parent="40" name="UnitData">
+      <ObjectId>1207675350</ObjectId>
+      <CreatedTimestamp>2017-05-22.11:23:24.773</CreatedTimestamp>
+      <ModifiedTimestamp>2017-07-20.12:34:46.563</ModifiedTimestamp>
+    </table>
+    <table id="86" parent="40" name="Unit_Flags">
+      <ObjectId>2087678485</ObjectId>
+      <CreatedTimestamp>2017-08-18.16:07:27.950</CreatedTimestamp>
+      <ModifiedTimestamp>2017-08-18.16:22:16.820</ModifiedTimestamp>
+    </table>
+    <table id="87" parent="40" name="Users">
+      <ObjectId>94623380</ObjectId>
+      <CreatedTimestamp>2016-09-08.13:44:41.927</CreatedTimestamp>
+      <ModifiedTimestamp>2017-02-24.11:45:21.853</ModifiedTimestamp>
+    </table>
+    <table id="88" parent="40" name="version">
+      <ObjectId>485576768</ObjectId>
+      <CreatedTimestamp>2015-10-14.09:21:04.090</CreatedTimestamp>
+      <ModifiedTimestamp>2015-10-14.09:21:04.093</ModifiedTimestamp>
+    </table>
+    <routine id="89" parent="40" name="Split">
+      <ObjectId>1287675635</ObjectId>
+      <CreatedTimestamp>2017-06-27.11:41:23.707</CreatedTimestamp>
+      <ModifiedTimestamp>2017-06-27.11:41:23.707</ModifiedTimestamp>
+      <RoutineKind>function</RoutineKind>
+      <RoutineType>tab-fun</RoutineType>
+    </routine>
+    <routine id="90" parent="40" name="getFailurePaths">
+      <ObjectId>1972202076</ObjectId>
+      <CreatedTimestamp>2017-10-13.11:38:44.277</CreatedTimestamp>
+      <ModifiedTimestamp>2017-10-13.11:42:31.373</ModifiedTimestamp>
+      <RoutineKind>procedure</RoutineKind>
+      <RoutineType>proc</RoutineType>
+    </routine>
+    <routine id="91" parent="40" name="getSL8PW">
+      <ObjectId>1764201335</ObjectId>
+      <CreatedTimestamp>2017-10-10.11:30:21.900</CreatedTimestamp>
+      <ModifiedTimestamp>2017-10-11.10:34:35.553</ModifiedTimestamp>
+      <RoutineKind>procedure</RoutineKind>
+      <RoutineType>proc</RoutineType>
+    </routine>
+    <routine id="92" parent="40" name="getSL8SC">
+      <ObjectId>1860201677</ObjectId>
+      <CreatedTimestamp>2017-10-10.12:59:22.967</CreatedTimestamp>
+      <ModifiedTimestamp>2017-10-10.12:59:22.967</ModifiedTimestamp>
+      <RoutineKind>procedure</RoutineKind>
+      <RoutineType>proc</RoutineType>
+    </routine>
+    <routine id="93" parent="40" name="getTravelLog">
+      <ObjectId>581577110</ObjectId>
+      <CreatedTimestamp>2015-10-28.09:40:18.057</CreatedTimestamp>
+      <ModifiedTimestamp>2015-10-28.09:47:39.530</ModifiedTimestamp>
+      <RoutineKind>procedure</RoutineKind>
+      <RoutineType>proc</RoutineType>
+    </routine>
+    <routine id="94" parent="40" name="getValidFWVersion">
+      <ObjectId>501576825</ObjectId>
+      <CreatedTimestamp>2015-10-27.14:42:26.497</CreatedTimestamp>
+      <ModifiedTimestamp>2015-10-27.14:43:38.440</ModifiedTimestamp>
+      <RoutineKind>procedure</RoutineKind>
+      <RoutineType>proc</RoutineType>
+    </routine>
+    <routine id="95" parent="40" name="insertLOC8BeaconTest">
+      <ObjectId>1253579504</ObjectId>
+      <CreatedTimestamp>2016-06-02.15:58:29.283</CreatedTimestamp>
+      <ModifiedTimestamp>2016-10-21.13:56:40.743</ModifiedTimestamp>
+      <RoutineKind>procedure</RoutineKind>
+      <RoutineType>proc</RoutineType>
+    </routine>
+    <routine id="96" parent="40" name="insertLOC8Test">
+      <ObjectId>533576939</ObjectId>
+      <CreatedTimestamp>2015-10-27.15:22:08.217</CreatedTimestamp>
+      <ModifiedTimestamp>2015-10-27.15:22:08.217</ModifiedTimestamp>
+      <RoutineKind>procedure</RoutineKind>
+      <RoutineType>proc</RoutineType>
+    </routine>
+    <column id="97" parent="53" name="Product">
+      <Position>1</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="98" parent="53" name="Process">
+      <Position>2</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="99" parent="53" name="Assembly">
+      <Position>3</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="100" parent="53" name="ID">
+      <Position>4</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <index id="101" parent="53" name="PK_Assemblies">
+      <Position>1</Position>
+      <ColNames>ID</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="102" parent="53" name="PK_Assemblies">
+      <ObjectId>510624862</ObjectId>
+      <CreatedTimestamp>2016-09-23.15:23:53.377</CreatedTimestamp>
+      <ModifiedTimestamp>2016-09-23.15:23:53.377</ModifiedTimestamp>
+      <ColNames>ID</ColNames>
+      <UnderlyingIndexName>PK_Assemblies</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="103" parent="54" name="Product">
+      <Position>1</Position>
+      <DataType>nvarchar(max)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="104" parent="54" name="Prefix">
+      <Position>2</Position>
+      <DataType>nvarchar(max)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="105" parent="54" name="Build">
+      <Position>3</Position>
+      <DataType>nvarchar(max)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="106" parent="54" name="Id">
+      <Position>4</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <index id="107" parent="54" name="PK_Types">
+      <Position>1</Position>
+      <ColNames>Id</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="108" parent="54" name="PK_Types">
+      <ObjectId>151671588</ObjectId>
+      <CreatedTimestamp>2017-02-23.11:35:29.213</CreatedTimestamp>
+      <ModifiedTimestamp>2017-02-23.11:35:29.220</ModifiedTimestamp>
+      <ColNames>Id</ColNames>
+      <UnderlyingIndexName>PK_Types</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="109" parent="55" name="Code">
+      <Position>1</Position>
+      <DataType>varchar(3)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="110" parent="55" name="Description">
+      <Position>2</Position>
+      <DataType>varchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="111" parent="55" name="Ref">
+      <Position>3</Position>
+      <DataType>varchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="112" parent="55" name="ID">
+      <Position>4</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <index id="113" parent="55" name="ID">
+      <Position>1</Position>
+      <ColNames>ID</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <index id="114" parent="55" name="Desc">
+      <Position>2</Position>
+      <ColNames>Code</ColNames>
+      <Unique>1</Unique>
+    </index>
+    <key id="115" parent="55" name="ID">
+      <ObjectId>1732201221</ObjectId>
+      <CreatedTimestamp>2017-10-10.09:07:41.063</CreatedTimestamp>
+      <ModifiedTimestamp>2017-10-10.09:07:41.077</ModifiedTimestamp>
+      <ColNames>ID</ColNames>
+      <UnderlyingIndexName>ID</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <key id="116" parent="55" name="Desc">
+      <ObjectId>1748201278</ObjectId>
+      <CreatedTimestamp>2017-10-10.09:07:41.067</CreatedTimestamp>
+      <ModifiedTimestamp>2017-10-10.09:07:41.077</ModifiedTimestamp>
+      <ColNames>Code</ColNames>
+      <UnderlyingIndexName>Desc</UnderlyingIndexName>
+    </key>
+    <column id="117" parent="56" name="MachineName">
+      <Position>1</Position>
+      <DataType>varchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <column id="118" parent="56" name="DefaultUser">
+      <Position>2</Position>
+      <DataType>varchar(max)|0</DataType>
+    </column>
+    <column id="119" parent="56" name="DefaultProduct">
+      <Position>3</Position>
+      <DataType>varchar(max)|0</DataType>
+    </column>
+    <column id="120" parent="56" name="DefaultOperation">
+      <Position>4</Position>
+      <DataType>varchar(max)|0</DataType>
+    </column>
+    <column id="121" parent="56" name="DefaultPrinter">
+      <Position>5</Position>
+      <DataType>varchar(max)|0</DataType>
+    </column>
+    <column id="122" parent="56" name="DymoLabel">
+      <Position>6</Position>
+      <DataType>varchar(max)|0</DataType>
+    </column>
+    <column id="123" parent="56" name="Dedicated">
+      <Position>7</Position>
+      <DataType>bit|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <column id="124" parent="56" name="RightLabel">
+      <Position>8</Position>
+      <DataType>varchar(max)|0</DataType>
+    </column>
+    <column id="125" parent="56" name="Tablet">
+      <Position>9</Position>
+      <DataType>bit|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <index id="126" parent="56" name="PK_Table">
+      <Position>1</Position>
+      <ColNames>MachineName</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="127" parent="56" name="PK_Table">
+      <ObjectId>1694629080</ObjectId>
+      <CreatedTimestamp>2016-10-11.14:42:09.460</CreatedTimestamp>
+      <ModifiedTimestamp>2016-10-11.14:42:09.460</ModifiedTimestamp>
+      <ColNames>MachineName</ColNames>
+      <UnderlyingIndexName>PK_Table</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="128" parent="57" name="EventName">
+      <Position>1</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="129" parent="57" name="Operation">
+      <Position>2</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="130" parent="57" name="Product">
+      <Position>3</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="131" parent="57" name="Id">
+      <Position>4</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <index id="132" parent="57" name="PK__Events__3214EC07DCF233E5">
+      <Position>1</Position>
+      <NameSurrogate>1</NameSurrogate>
+      <ColNames>Id</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="133" parent="57" name="PK__Events__3214EC07DCF233E5">
+      <ObjectId>1959678029</ObjectId>
+      <NameSurrogate>1</NameSurrogate>
+      <CreatedTimestamp>2017-07-24.13:34:25.173</CreatedTimestamp>
+      <ModifiedTimestamp>2017-07-24.13:34:25.173</ModifiedTimestamp>
+      <ColNames>Id</ColNames>
+      <UnderlyingIndexName>PK__Events__3214EC07DCF233E5</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="134" parent="58" name="timeStamp">
+      <Position>1</Position>
+      <DataType>datetime|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="135" parent="58" name="seid">
+      <Position>2</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="136" parent="58" name="Summary">
+      <Position>3</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="137" parent="58" name="Result">
+      <Position>4</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <index id="138" parent="58" name="PK_FA">
+      <Position>1</Position>
+      <ColNames>timeStamp
+seid</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="139" parent="58" name="PK_FA">
+      <ObjectId>341576255</ObjectId>
+      <CreatedTimestamp>2015-10-12.14:28:58.030</CreatedTimestamp>
+      <ModifiedTimestamp>2015-10-12.14:28:58.030</ModifiedTimestamp>
+      <ColNames>timeStamp
+seid</ColNames>
+      <UnderlyingIndexName>PK_FA</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="140" parent="59" name="Cur_OP">
+      <Position>1</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="141" parent="59" name="Route_To">
+      <Position>2</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="142" parent="59" name="ID">
+      <Position>3</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <index id="143" parent="59" name="PK_Failure_Paths">
+      <Position>1</Position>
+      <ColNames>ID</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="144" parent="59" name="PK_Failure_Paths">
+      <ObjectId>1956202019</ObjectId>
+      <CreatedTimestamp>2017-10-13.11:18:42.033</CreatedTimestamp>
+      <ModifiedTimestamp>2017-10-13.11:18:42.050</ModifiedTimestamp>
+      <ColNames>ID</ColNames>
+      <UnderlyingIndexName>PK_Failure_Paths</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="145" parent="60" name="Operation">
+      <Position>1</Position>
+      <DataType>varchar(50)|0</DataType>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <column id="146" parent="60" name="Failure">
+      <Position>2</Position>
+      <DataType>varchar(50)|0</DataType>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <column id="147" parent="60" name="Product">
+      <Position>3</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="148" parent="60" name="Type">
+      <Position>4</Position>
+      <DataType>int|0</DataType>
+    </column>
+    <column id="149" parent="60" name="ID">
+      <Position>5</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <column id="150" parent="60" name="ReasonCodes">
+      <Position>6</Position>
+      <DataType>varchar(20)|0</DataType>
+    </column>
+    <index id="151" parent="60" name="PK_FailuresRepairs">
+      <Position>1</Position>
+      <ColNames>ID</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="152" parent="60" name="PK_FailuresRepairs">
+      <ObjectId>1236199454</ObjectId>
+      <CreatedTimestamp>2017-09-19.09:27:25.280</CreatedTimestamp>
+      <ModifiedTimestamp>2017-09-19.09:27:25.297</ModifiedTimestamp>
+      <ColNames>ID</ColNames>
+      <UnderlyingIndexName>PK_FailuresRepairs</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="153" parent="61" name="Id">
+      <Position>1</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <column id="154" parent="61" name="ImageName">
+      <Position>2</Position>
+      <DataType>nvarchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="155" parent="61" name="ImageDimensions">
+      <Position>3</Position>
+      <DataType>nvarchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="156" parent="61" name="ImageData">
+      <Position>4</Position>
+      <DataType>nvarchar(max)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="157" parent="61" name="UID">
+      <Position>5</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <index id="158" parent="61" name="PK_Images">
+      <Position>1</Position>
+      <ColNames>UID</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="159" parent="61" name="PK_Images">
+      <ObjectId>1675153013</ObjectId>
+      <CreatedTimestamp>2017-02-08.09:51:22.413</CreatedTimestamp>
+      <ModifiedTimestamp>2017-02-08.09:51:22.420</ModifiedTimestamp>
+      <ColNames>UID</ColNames>
+      <UnderlyingIndexName>PK_Images</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="160" parent="62" name="Product">
+      <Position>1</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="161" parent="62" name="Operation">
+      <Position>2</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="162" parent="62" name="Assembly">
+      <Position>3</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="163" parent="62" name="Operator">
+      <Position>4</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="164" parent="62" name="Quantity">
+      <Position>5</Position>
+      <DataType>int|0</DataType>
+    </column>
+    <column id="165" parent="62" name="Time">
+      <Position>6</Position>
+      <DataType>datetime|0</DataType>
+    </column>
+    <column id="166" parent="62" name="ID">
+      <Position>7</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <index id="167" parent="62" name="PK_Inventory">
+      <Position>1</Position>
+      <ColNames>ID</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="168" parent="62" name="PK_Inventory">
+      <ObjectId>494624805</ObjectId>
+      <CreatedTimestamp>2016-09-23.10:41:39.237</CreatedTimestamp>
+      <ModifiedTimestamp>2016-09-23.10:41:39.237</ModifiedTimestamp>
+      <ColNames>ID</ColNames>
+      <UnderlyingIndexName>PK_Inventory</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="169" parent="63" name="logId">
+      <Position>1</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <column id="170" parent="63" name="serialID">
+      <Position>2</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="171" parent="63" name="timeStamp">
+      <Position>3</Position>
+      <DataType>datetime|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="172" parent="63" name="version">
+      <Position>4</Position>
+      <DataType>varchar(1)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="173" parent="63" name="motion">
+      <Position>5</Position>
+      <DataType>varchar(1)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="174" parent="63" name="signalStrengh">
+      <Position>6</Position>
+      <DataType>varchar(1)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="175" parent="63" name="beaconTemp">
+      <Position>7</Position>
+      <DataType>varchar(1)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="176" parent="63" name="altitude">
+      <Position>8</Position>
+      <DataType>varchar(1)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="177" parent="63" name="DQLine">
+      <Position>9</Position>
+      <DataType>varchar(1)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="178" parent="63" name="caseTamper">
+      <Position>10</Position>
+      <DataType>varchar(1)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="179" parent="63" name="testTime">
+      <Position>11</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="180" parent="63" name="motionState">
+      <Position>12</Position>
+      <DataType>varchar(5)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="181" parent="63" name="signalState">
+      <Position>13</Position>
+      <DataType>varchar(5)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="182" parent="63" name="powerState">
+      <Position>14</Position>
+      <DataType>varchar(5)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="183" parent="63" name="caseState">
+      <Position>15</Position>
+      <DataType>varchar(5)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="184" parent="63" name="versionState">
+      <Position>16</Position>
+      <DataType>varchar(5)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="185" parent="63" name="power">
+      <Position>17</Position>
+      <DataType>varchar(1)|0</DataType>
+    </column>
+    <column id="186" parent="63" name="testType">
+      <Position>18</Position>
+      <DataType>nchar(1)|0</DataType>
+    </column>
+    <index id="187" parent="63" name="PK_LOC8Beacon">
+      <Position>1</Position>
+      <ColNames>logId
+serialID
+timeStamp</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="188" parent="63" name="PK_LOC8Beacon">
+      <ObjectId>1285579618</ObjectId>
+      <CreatedTimestamp>2016-06-02.16:09:15.050</CreatedTimestamp>
+      <ModifiedTimestamp>2016-06-02.16:09:15.050</ModifiedTimestamp>
+      <ColNames>logId
+serialID
+timeStamp</ColNames>
+      <UnderlyingIndexName>PK_LOC8Beacon</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="189" parent="64" name="Serial Number">
+      <Position>1</Position>
+      <DataType>varchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <column id="190" parent="64" name="Reworked">
+      <Position>3</Position>
+      <DataType>bit|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <column id="191" parent="64" name="Revision">
+      <Position>4</Position>
+      <DataType>nchar(1)|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>&apos;A&apos;</DefaultExpression>
+    </column>
+    <index id="192" parent="64" name="PK__LOC8Beac__83E5C62CCDE0EFF3">
+      <Position>1</Position>
+      <NameSurrogate>1</NameSurrogate>
+      <ColNames>Serial Number</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="193" parent="64" name="PK__LOC8Beac__83E5C62CCDE0EFF3">
+      <ObjectId>2046630334</ObjectId>
+      <NameSurrogate>1</NameSurrogate>
+      <CreatedTimestamp>2016-10-27.11:47:11.843</CreatedTimestamp>
+      <ModifiedTimestamp>2016-10-27.11:47:11.843</ModifiedTimestamp>
+      <ColNames>Serial Number</ColNames>
+      <UnderlyingIndexName>PK__LOC8Beac__83E5C62CCDE0EFF3</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="194" parent="65" name="SerialNumber">
+      <Position>1</Position>
+      <DataType>varchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <column id="195" parent="65" name="MEID">
+      <Position>2</Position>
+      <DataType>varchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <column id="196" parent="65" name="Date">
+      <Position>3</Position>
+      <DataType>date|0</DataType>
+    </column>
+    <column id="197" parent="65" name="Rev">
+      <Position>4</Position>
+      <DataType>nchar(10)|0</DataType>
+    </column>
+    <column id="198" parent="65" name="firmware">
+      <Position>5</Position>
+      <DataType>nchar(10)|0</DataType>
+    </column>
+    <column id="199" parent="65" name="Carrier">
+      <Position>8</Position>
+      <DataType>nchar(10)|0</DataType>
+    </column>
+    <column id="200" parent="65" name="Type">
+      <Position>9</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="201" parent="65" name="Build">
+      <Position>10</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="202" parent="65" name="Operator">
+      <Position>11</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="203" parent="65" name="ID">
+      <Position>12</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <column id="204" parent="65" name="ModemReplaced">
+      <Position>13</Position>
+      <DataType>bit|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <column id="205" parent="65" name="ProcessStatus">
+      <Position>14</Position>
+      <DataType>int|0</DataType>
+    </column>
+    <index id="206" parent="65" name="PK_LOC8Data">
+      <Position>1</Position>
+      <ColNames>SerialNumber
+MEID</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="207" parent="65" name="PK_LOC8Data">
+      <ObjectId>1502628396</ObjectId>
+      <CreatedTimestamp>2016-09-29.08:13:16.297</CreatedTimestamp>
+      <ModifiedTimestamp>2016-09-29.08:13:16.367</ModifiedTimestamp>
+      <ColNames>SerialNumber
+MEID</ColNames>
+      <UnderlyingIndexName>PK_LOC8Data</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="208" parent="66" name="DATE">
+      <Position>1</Position>
+      <DataType>datetime|0</DataType>
+    </column>
+    <column id="209" parent="66" name="MEID">
+      <Position>2</Position>
+      <DataType>nvarchar(255)|0</DataType>
+    </column>
+    <column id="210" parent="66" name="MDN">
+      <Position>3</Position>
+      <DataType>varchar(15)|0</DataType>
+    </column>
+    <column id="211" parent="66" name="MIN">
+      <Position>4</Position>
+      <DataType>varchar(15)|0</DataType>
+    </column>
+    <column id="212" parent="66" name="CARRIER">
+      <Position>5</Position>
+      <DataType>nvarchar(255)|0</DataType>
+    </column>
+    <column id="213" parent="66" name="ID">
+      <Position>6</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <index id="214" parent="66" name="PK_MEID">
+      <Position>1</Position>
+      <ColNames>ID</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="215" parent="66" name="PK_MEID">
+      <ObjectId>455672671</ObjectId>
+      <CreatedTimestamp>2017-03-27.09:49:49.407</CreatedTimestamp>
+      <ModifiedTimestamp>2017-03-27.09:49:49.407</ModifiedTimestamp>
+      <ColNames>ID</ColNames>
+      <UnderlyingIndexName>PK_MEID</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="216" parent="67" name="Id">
+      <Position>1</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <column id="217" parent="67" name="To">
+      <Position>2</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="218" parent="67" name="Message">
+      <Position>3</Position>
+      <DataType>varchar(max)|0</DataType>
+    </column>
+    <column id="219" parent="67" name="Status">
+      <Position>4</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="220" parent="67" name="From">
+      <Position>5</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="221" parent="67" name="DateTime">
+      <Position>6</Position>
+      <DataType>datetime|0</DataType>
+    </column>
+    <index id="222" parent="67" name="PK__Messages__3214EC079C3BDB67">
+      <Position>1</Position>
+      <NameSurrogate>1</NameSurrogate>
+      <ColNames>Id</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="223" parent="67" name="PK__Messages__3214EC079C3BDB67">
+      <ObjectId>23671132</ObjectId>
+      <NameSurrogate>1</NameSurrogate>
+      <CreatedTimestamp>2017-02-21.11:18:00.873</CreatedTimestamp>
+      <ModifiedTimestamp>2017-02-21.11:18:00.873</ModifiedTimestamp>
+      <ColNames>Id</ColNames>
+      <UnderlyingIndexName>PK__Messages__3214EC079C3BDB67</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="224" parent="68" name="Serial Number">
+      <Position>1</Position>
+      <DataType>varchar(15)|0</DataType>
+    </column>
+    <column id="225" parent="68" name="Operation">
+      <Position>2</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="226" parent="68" name="Resolution">
+      <Position>3</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="227" parent="68" name="Reasons">
+      <Position>4</Position>
+      <DataType>varchar(max)|0</DataType>
+      <DefaultExpression>&apos;None&apos;</DefaultExpression>
+    </column>
+    <column id="228" parent="68" name="Operator">
+      <Position>5</Position>
+      <DataType>varchar(50)|0</DataType>
+      <DefaultExpression>&apos;Unknown&apos;</DefaultExpression>
+    </column>
+    <column id="229" parent="68" name="DateTime">
+      <Position>6</Position>
+      <DataType>datetime|0</DataType>
+    </column>
+    <column id="230" parent="68" name="Notes">
+      <Position>7</Position>
+      <DataType>varchar(max)|0</DataType>
+      <DefaultExpression>&apos;None&apos;</DefaultExpression>
+    </column>
+    <column id="231" parent="68" name="Product">
+      <Position>8</Position>
+      <DataType>varchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <column id="232" parent="68" name="Repair">
+      <Position>9</Position>
+      <DataType>varchar(max)|0</DataType>
+      <DefaultExpression>&apos;None&apos;</DefaultExpression>
+    </column>
+    <column id="233" parent="68" name="Type">
+      <Position>10</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="234" parent="68" name="ID">
+      <Position>11</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <column id="235" parent="68" name="Result">
+      <Position>12</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <index id="236" parent="68" name="PK_Operations">
+      <Position>1</Position>
+      <ColNames>ID</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="237" parent="68" name="PK_Operations">
+      <ObjectId>766625774</ObjectId>
+      <CreatedTimestamp>2016-09-28.10:24:31.040</CreatedTimestamp>
+      <ModifiedTimestamp>2016-09-28.10:24:31.040</ModifiedTimestamp>
+      <ColNames>ID</ColNames>
+      <UnderlyingIndexName>PK_Operations</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="238" parent="69" name="Product">
+      <Position>1</Position>
+      <DataType>nvarchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="239" parent="69" name="DispName">
+      <Position>2</Position>
+      <DataType>nvarchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="240" parent="69" name="PartNum">
+      <Position>3</Position>
+      <DataType>nvarchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="241" parent="69" name="Location">
+      <Position>4</Position>
+      <DataType>nvarchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="242" parent="69" name="Qty">
+      <Position>5</Position>
+      <DataType>tinyint|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="243" parent="69" name="PartName">
+      <Position>6</Position>
+      <DataType>nvarchar(50)|0</DataType>
+    </column>
+    <column id="244" parent="69" name="Operation">
+      <Position>7</Position>
+      <DataType>nvarchar(50)|0</DataType>
+    </column>
+    <column id="245" parent="69" name="ID">
+      <Position>8</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <column id="246" parent="69" name="Build">
+      <Position>9</Position>
+      <DataType>varchar(10)|0</DataType>
+    </column>
+    <index id="247" parent="69" name="PK_Parts">
+      <Position>1</Position>
+      <ColNames>ID</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="248" parent="69" name="PK_Parts">
+      <ObjectId>983674552</ObjectId>
+      <CreatedTimestamp>2017-05-10.07:42:34.260</CreatedTimestamp>
+      <ModifiedTimestamp>2017-05-10.07:42:34.270</ModifiedTimestamp>
+      <ColNames>ID</ColNames>
+      <UnderlyingIndexName>PK_Parts</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="249" parent="70" name="Prefix">
+      <Position>1</Position>
+      <DataType>varchar(3)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="250" parent="70" name="Product">
+      <Position>2</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="251" parent="70" name="Type">
+      <Position>3</Position>
+      <DataType>nchar(1)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="252" parent="70" name="ID">
+      <Position>4</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <index id="253" parent="70" name="PK_Prefixes">
+      <Position>1</Position>
+      <ColNames>ID</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <index id="254" parent="70" name="uq_Prefixes">
+      <Position>2</Position>
+      <ColNames>Prefix</ColNames>
+      <Unique>1</Unique>
+    </index>
+    <key id="255" parent="70" name="PK_Prefixes">
+      <ObjectId>196195749</ObjectId>
+      <CreatedTimestamp>2017-09-05.08:42:14.380</CreatedTimestamp>
+      <ModifiedTimestamp>2017-09-05.08:42:14.380</ModifiedTimestamp>
+      <ColNames>ID</ColNames>
+      <UnderlyingIndexName>PK_Prefixes</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <key id="256" parent="70" name="uq_Prefixes">
+      <ObjectId>212195806</ObjectId>
+      <CreatedTimestamp>2017-09-05.08:43:50.693</CreatedTimestamp>
+      <ModifiedTimestamp>2017-09-05.08:43:50.693</ModifiedTimestamp>
+      <ColNames>Prefix</ColNames>
+      <UnderlyingIndexName>uq_Prefixes</UnderlyingIndexName>
+    </key>
+    <column id="257" parent="71" name="Id">
+      <Position>1</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <column id="258" parent="71" name="Process">
+      <Position>2</Position>
+      <DataType>varchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="259" parent="71" name="Seq">
+      <Position>3</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="260" parent="71" name="Type">
+      <Position>4</Position>
+      <DataType>nchar(2)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="261" parent="71" name="Product">
+      <Position>5</Position>
+      <DataType>varchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <index id="262" parent="71" name="PK__tmp_ms_x__3214EC0744D44846">
+      <Position>1</Position>
+      <NameSurrogate>1</NameSurrogate>
+      <ColNames>Id</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="263" parent="71" name="PK__tmp_ms_x__3214EC0744D44846">
+      <ObjectId>164195635</ObjectId>
+      <NameSurrogate>1</NameSurrogate>
+      <CreatedTimestamp>2017-09-01.12:07:53.253</CreatedTimestamp>
+      <ModifiedTimestamp>2017-09-01.12:07:53.253</ModifiedTimestamp>
+      <ColNames>Id</ColNames>
+      <UnderlyingIndexName>PK__tmp_ms_x__3214EC0744D44846</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="264" parent="72" name="Id">
+      <Position>1</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <column id="265" parent="72" name="Product">
+      <Position>2</Position>
+      <DataType>nvarchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="266" parent="72" name="PreviousProcess">
+      <Position>3</Position>
+      <DataType>nvarchar(50)|0</DataType>
+      <DefaultExpression>&apos;None&apos;</DefaultExpression>
+    </column>
+    <column id="267" parent="72" name="CurrentProcess">
+      <Position>4</Position>
+      <DataType>nvarchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="268" parent="72" name="NextProcess">
+      <Position>5</Position>
+      <DataType>nvarchar(50)|0</DataType>
+      <DefaultExpression>&apos;None&apos;</DefaultExpression>
+    </column>
+    <index id="269" parent="72" name="PK_ProcessFlow">
+      <Position>1</Position>
+      <ColNames>Id</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="270" parent="72" name="PK_ProcessFlow">
+      <ObjectId>679673469</ObjectId>
+      <CreatedTimestamp>2017-04-18.08:31:21.070</CreatedTimestamp>
+      <ModifiedTimestamp>2017-04-18.08:31:21.070</ModifiedTimestamp>
+      <ColNames>Id</ColNames>
+      <UnderlyingIndexName>PK_ProcessFlow</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="271" parent="73" name="Process">
+      <Position>1</Position>
+      <DataType>varchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="272" parent="73" name="Product">
+      <Position>2</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="273" parent="73" name="Type">
+      <Position>3</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <column id="274" parent="73" name="ID">
+      <Position>4</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <column id="275" parent="73" name="Form">
+      <Position>5</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="276" parent="73" name="VWI">
+      <Position>8</Position>
+      <DataType>varchar(max)|0</DataType>
+    </column>
+    <index id="277" parent="73" name="PK_Processes">
+      <Position>1</Position>
+      <ColNames>ID</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="278" parent="73" name="PK_Processes">
+      <ObjectId>350624292</ObjectId>
+      <CreatedTimestamp>2016-09-14.16:42:04.223</CreatedTimestamp>
+      <ModifiedTimestamp>2016-09-14.16:42:04.223</ModifiedTimestamp>
+      <ColNames>ID</ColNames>
+      <UnderlyingIndexName>PK_Processes</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="279" parent="74" name="Id">
+      <Position>1</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <column id="280" parent="74" name="Serial Number">
+      <Position>2</Position>
+      <DataType>nvarchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="281" parent="74" name="Build">
+      <Position>3</Position>
+      <DataType>nvarchar(50)|0</DataType>
+    </column>
+    <column id="282" parent="74" name="Suffix">
+      <Position>4</Position>
+      <DataType>nvarchar(50)|0</DataType>
+      <DefaultExpression>&apos;Monitoring&apos;</DefaultExpression>
+    </column>
+    <column id="283" parent="74" name="Operation">
+      <Position>5</Position>
+      <DataType>nvarchar(50)|0</DataType>
+    </column>
+    <column id="284" parent="74" name="Operator">
+      <Position>6</Position>
+      <DataType>nvarchar(50)|0</DataType>
+    </column>
+    <column id="285" parent="74" name="Parts">
+      <Position>7</Position>
+      <DataType>nvarchar(max)|0</DataType>
+    </column>
+    <column id="286" parent="74" name="DateTime">
+      <Position>8</Position>
+      <DataType>datetime|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>getdate()</DefaultExpression>
+    </column>
+    <column id="287" parent="74" name="Notes">
+      <Position>9</Position>
+      <DataType>nvarchar(50)|0</DataType>
+    </column>
+    <column id="288" parent="74" name="Status">
+      <Position>10</Position>
+      <DataType>nvarchar(50)|0</DataType>
+      <DefaultExpression>&apos;Queued&apos;</DefaultExpression>
+    </column>
+    <index id="289" parent="74" name="PK_PyCommTemp">
+      <Position>1</Position>
+      <ColNames>Id</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="290" parent="74" name="PK_PyCommTemp">
+      <ObjectId>1300199682</ObjectId>
+      <CreatedTimestamp>2017-09-27.13:58:35.313</CreatedTimestamp>
+      <ModifiedTimestamp>2017-09-27.13:58:35.343</ModifiedTimestamp>
+      <ColNames>Id</ColNames>
+      <UnderlyingIndexName>PK_PyCommTemp</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="291" parent="75" name="Serial Number">
+      <Position>1</Position>
+      <DataType>nvarchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="292" parent="75" name="Build">
+      <Position>2</Position>
+      <DataType>nvarchar(50)|0</DataType>
+    </column>
+    <column id="293" parent="75" name="Suffix">
+      <Position>3</Position>
+      <DataType>nvarchar(50)|0</DataType>
+      <DefaultExpression>&apos;Monitoring&apos;</DefaultExpression>
+    </column>
+    <column id="294" parent="75" name="Operation">
+      <Position>4</Position>
+      <DataType>nvarchar(50)|0</DataType>
+    </column>
+    <column id="295" parent="75" name="Operator">
+      <Position>5</Position>
+      <DataType>nvarchar(50)|0</DataType>
+    </column>
+    <column id="296" parent="75" name="Parts">
+      <Position>6</Position>
+      <DataType>nvarchar(max)|0</DataType>
+    </column>
+    <column id="297" parent="75" name="DateTime">
+      <Position>7</Position>
+      <DataType>datetime|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>getdate()</DefaultExpression>
+    </column>
+    <column id="298" parent="75" name="Notes">
+      <Position>8</Position>
+      <DataType>nvarchar(50)|0</DataType>
+    </column>
+    <column id="299" parent="75" name="Status">
+      <Position>9</Position>
+      <DataType>nvarchar(50)|0</DataType>
+      <DefaultExpression>&apos;Queued&apos;</DefaultExpression>
+    </column>
+    <column id="300" parent="75" name="Id">
+      <Position>10</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <index id="301" parent="75" name="PK_PyComm2">
+      <Position>1</Position>
+      <ColNames>Id</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="302" parent="75" name="PK_PyComm2">
+      <ObjectId>1380199967</ObjectId>
+      <CreatedTimestamp>2017-09-27.14:27:07.140</CreatedTimestamp>
+      <ModifiedTimestamp>2017-09-27.14:27:07.140</ModifiedTimestamp>
+      <ColNames>Id</ColNames>
+      <UnderlyingIndexName>PK_PyComm2</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="303" parent="76" name="Id">
+      <Position>1</Position>
+      <DataType>bigint|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <column id="304" parent="76" name="Serial Number">
+      <Position>2</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="305" parent="76" name="DateTime">
+      <Position>3</Position>
+      <DataType>datetime|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="306" parent="76" name="Build">
+      <Position>4</Position>
+      <DataType>nvarchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="307" parent="76" name="Suffix">
+      <Position>5</Position>
+      <DataType>nvarchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="308" parent="76" name="Operation">
+      <Position>6</Position>
+      <DataType>nvarchar(50)|0</DataType>
+    </column>
+    <column id="309" parent="76" name="Notes">
+      <Position>7</Position>
+      <DataType>nvarchar(max)|0</DataType>
+    </column>
+    <index id="310" parent="76" name="PK_Reports">
+      <Position>1</Position>
+      <ColNames>Id</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="311" parent="76" name="PK_Reports">
+      <ObjectId>119671474</ObjectId>
+      <CreatedTimestamp>2017-02-23.11:21:02.097</CreatedTimestamp>
+      <ModifiedTimestamp>2017-02-23.11:21:02.097</ModifiedTimestamp>
+      <ColNames>Id</ColNames>
+      <UnderlyingIndexName>PK_Reports</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="312" parent="77" name="SerialNumber">
+      <Position>1</Position>
+      <DataType>varchar(8)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="313" parent="77" name="MEID">
+      <Position>2</Position>
+      <DataType>varchar(20)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="314" parent="77" name="Type">
+      <Position>3</Position>
+      <DataType>varchar(1)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="315" parent="77" name="Operator">
+      <Position>4</Position>
+      <DataType>varchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="316" parent="77" name="BI_BUILT">
+      <Position>5</Position>
+      <DataType>bit|0</DataType>
+    </column>
+    <column id="317" parent="77" name="unit_create_date">
+      <Position>6</Position>
+      <DataType>datetime|0</DataType>
+    </column>
+    <column id="318" parent="77" name="in_warranty">
+      <Position>7</Position>
+      <DataType>bit|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <column id="319" parent="77" name="last_cal">
+      <Position>8</Position>
+      <DataType>date|0</DataType>
+    </column>
+    <column id="320" parent="77" name="cal_status">
+      <Position>9</Position>
+      <DataType>varchar(1)|0</DataType>
+    </column>
+    <column id="321" parent="77" name="cust_num">
+      <Position>10</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="322" parent="77" name="blows">
+      <Position>11</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <column id="323" parent="77" name="ret_for_cal">
+      <Position>12</Position>
+      <DataType>bit|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="324" parent="77" name="resolution">
+      <Position>13</Position>
+      <DataType>varchar(1)|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>&apos;R&apos;</DefaultExpression>
+    </column>
+    <column id="325" parent="77" name="fc_date">
+      <Position>14</Position>
+      <DataType>date|0</DataType>
+    </column>
+    <column id="326" parent="77" name="fc_style">
+      <Position>15</Position>
+      <DataType>varchar(1)|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>&apos;O&apos;</DefaultExpression>
+    </column>
+    <column id="327" parent="77" name="pos_cli_tamp">
+      <Position>16</Position>
+      <DataType>bit|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <column id="328" parent="77" name="fault_code">
+      <Position>17</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="329" parent="77" name="loose_pump">
+      <Position>18</Position>
+      <DataType>bit|0</DataType>
+    </column>
+    <column id="330" parent="77" name="pump_corr">
+      <Position>19</Position>
+      <DataType>bit|0</DataType>
+    </column>
+    <column id="331" parent="77" name="notes">
+      <Position>20</Position>
+      <DataType>varchar(max)|0</DataType>
+    </column>
+    <column id="332" parent="77" name="RecordDate">
+      <Position>21</Position>
+      <DataType>datetime|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>getdate()</DefaultExpression>
+    </column>
+    <column id="333" parent="78" name="SerialNumber">
+      <Position>1</Position>
+      <DataType>varchar(8)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="334" parent="78" name="Item">
+      <Position>2</Position>
+      <DataType>varchar(20)|0</DataType>
+    </column>
+    <column id="335" parent="78" name="Type">
+      <Position>3</Position>
+      <DataType>varchar(3)|0</DataType>
+    </column>
+    <column id="336" parent="78" name="Operation">
+      <Position>4</Position>
+      <DataType>int|0</DataType>
+    </column>
+    <column id="337" parent="78" name="Product">
+      <Position>5</Position>
+      <DataType>int|0</DataType>
+    </column>
+    <column id="338" parent="78" name="Operator">
+      <Position>6</Position>
+      <DataType>int|0</DataType>
+    </column>
+    <column id="339" parent="78" name="Parts">
+      <Position>7</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="340" parent="78" name="Codes">
+      <Position>8</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="341" parent="78" name="Rea_Notes">
+      <Position>9</Position>
+      <DataType>varchar(max)|0</DataType>
+    </column>
+    <column id="342" parent="78" name="Res_Notes">
+      <Position>10</Position>
+      <DataType>varchar(max)|0</DataType>
+    </column>
+    <column id="343" parent="78" name="blnkcol1">
+      <Position>11</Position>
+      <DataType>varchar(max)|0</DataType>
+    </column>
+    <column id="344" parent="78" name="blnkcol2">
+      <Position>12</Position>
+      <DataType>varchar(max)|0</DataType>
+    </column>
+    <column id="345" parent="78" name="blnkcol3">
+      <Position>13</Position>
+      <DataType>varchar(max)|0</DataType>
+    </column>
+    <column id="346" parent="78" name="Process">
+      <Position>14</Position>
+      <DataType>varchar(3)|0</DataType>
+    </column>
+    <column id="347" parent="78" name="Status">
+      <Position>15</Position>
+      <DataType>varchar(3)|0</DataType>
+    </column>
+    <column id="348" parent="78" name="Error">
+      <Position>16</Position>
+      <DataType>varchar(3)|0</DataType>
+    </column>
+    <column id="349" parent="78" name="DateTime">
+      <Position>17</Position>
+      <DataType>datetime|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>getdate()</DefaultExpression>
+    </column>
+    <column id="350" parent="78" name="Complete">
+      <Position>18</Position>
+      <DataType>bit|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <column id="351" parent="78" name="ID">
+      <Position>19</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <index id="352" parent="78" name="PK__tmp_ms_x__3214EC27C6313233">
+      <Position>1</Position>
+      <NameSurrogate>1</NameSurrogate>
+      <ColNames>ID</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="353" parent="78" name="PK__tmp_ms_x__3214EC27C6313233">
+      <ObjectId>1796201449</ObjectId>
+      <NameSurrogate>1</NameSurrogate>
+      <CreatedTimestamp>2017-10-10.11:33:59.367</CreatedTimestamp>
+      <ModifiedTimestamp>2017-10-10.11:33:59.367</ModifiedTimestamp>
+      <ColNames>ID</ColNames>
+      <UnderlyingIndexName>PK__tmp_ms_x__3214EC27C6313233</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="354" parent="79" name="Code">
+      <Position>1</Position>
+      <DataType>int|0</DataType>
+    </column>
+    <column id="355" parent="79" name="Description">
+      <Position>2</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="356" parent="79" name="Type">
+      <Position>3</Position>
+      <DataType>varchar(1)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="357" parent="79" name="ID">
+      <Position>4</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <index id="358" parent="79" name="PK_SL_Codes">
+      <Position>1</Position>
+      <ColNames>ID</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="359" parent="79" name="PK_SL_Codes">
+      <ObjectId>452196661</ObjectId>
+      <CreatedTimestamp>2017-09-05.10:37:10.547</CreatedTimestamp>
+      <ModifiedTimestamp>2017-09-05.10:37:10.550</ModifiedTimestamp>
+      <ColNames>ID</ColNames>
+      <UnderlyingIndexName>PK_SL_Codes</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="360" parent="80" name="Id">
+      <Position>1</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <column id="361" parent="80" name="SerialNumber">
+      <Position>2</Position>
+      <DataType>varchar(8)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="362" parent="80" name="Resolution">
+      <Position>3</Position>
+      <DataType>varchar(8)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="363" parent="80" name="ReasonScrapped">
+      <Position>4</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="364" parent="80" name="Notes">
+      <Position>5</Position>
+      <DataType>varchar(max)|0</DataType>
+    </column>
+    <column id="365" parent="80" name="ItemNum">
+      <Position>6</Position>
+      <DataType>varchar(12)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="366" parent="80" name="Type">
+      <Position>7</Position>
+      <DataType>varchar(7)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="367" parent="80" name="MEID">
+      <Position>8</Position>
+      <DataType>varchar(15)|0</DataType>
+    </column>
+    <column id="368" parent="80" name="MDN">
+      <Position>9</Position>
+      <DataType>varchar(20)|0</DataType>
+    </column>
+    <column id="369" parent="80" name="MIN">
+      <Position>10</Position>
+      <DataType>varchar(20)|0</DataType>
+    </column>
+    <column id="370" parent="80" name="Age_Days">
+      <Position>11</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="371" parent="80" name="SL8_Status">
+      <Position>12</Position>
+      <DataType>varchar(7)|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>&apos;Open&apos;</DefaultExpression>
+    </column>
+    <column id="372" parent="80" name="ScrappedDate">
+      <Position>13</Position>
+      <DataType>datetime|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>getdate()</DefaultExpression>
+    </column>
+    <column id="373" parent="80" name="mfg_rev">
+      <Position>14</Position>
+      <DataType>bit|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <column id="374" parent="80" name="acct_rev">
+      <Position>15</Position>
+      <DataType>bit|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <index id="375" parent="80" name="PK__ScrapLog__3214EC07D2558EF8">
+      <Position>1</Position>
+      <NameSurrogate>1</NameSurrogate>
+      <ColNames>Id</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <index id="376" parent="80" name="UQ__ScrapLog__048A000847940AC2">
+      <Position>16</Position>
+      <NameSurrogate>1</NameSurrogate>
+      <ColNames>SerialNumber</ColNames>
+      <Unique>1</Unique>
+    </index>
+    <key id="377" parent="80" name="PK__ScrapLog__3214EC07D2558EF8">
+      <ObjectId>2007678200</ObjectId>
+      <NameSurrogate>1</NameSurrogate>
+      <CreatedTimestamp>2017-08-17.10:48:55.123</CreatedTimestamp>
+      <ModifiedTimestamp>2017-08-17.10:48:55.123</ModifiedTimestamp>
+      <ColNames>Id</ColNames>
+      <UnderlyingIndexName>PK__ScrapLog__3214EC07D2558EF8</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <key id="378" parent="80" name="UQ__ScrapLog__048A000847940AC2">
+      <ObjectId>100195407</ObjectId>
+      <NameSurrogate>1</NameSurrogate>
+      <CreatedTimestamp>2017-08-30.14:15:25.550</CreatedTimestamp>
+      <ModifiedTimestamp>2017-08-30.14:15:25.550</ModifiedTimestamp>
+      <ColNames>SerialNumber</ColNames>
+      <UnderlyingIndexName>UQ__ScrapLog__048A000847940AC2</UnderlyingIndexName>
+    </key>
+    <column id="379" parent="81" name="MinSerial">
+      <Position>1</Position>
+      <DataType>int|0</DataType>
+    </column>
+    <column id="380" parent="81" name="MaxSerial">
+      <Position>2</Position>
+      <DataType>int|0</DataType>
+    </column>
+    <column id="381" parent="81" name="Build">
+      <Position>3</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="382" parent="81" name="Carrier">
+      <Position>4</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="383" parent="81" name="Product">
+      <Position>5</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="384" parent="81" name="Note">
+      <Position>6</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="385" parent="81" name="ID">
+      <Position>7</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <index id="386" parent="81" name="PK_SerialRanges">
+      <Position>1</Position>
+      <ColNames>ID</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="387" parent="81" name="PK_SerialRanges">
+      <ObjectId>891150220</ObjectId>
+      <CreatedTimestamp>2017-01-05.13:57:03.220</CreatedTimestamp>
+      <ModifiedTimestamp>2017-01-05.13:57:03.223</ModifiedTimestamp>
+      <ColNames>ID</ColNames>
+      <UnderlyingIndexName>PK_SerialRanges</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="388" parent="82" name="Id">
+      <Position>1</Position>
+      <DataType>bigint|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <column id="389" parent="82" name="Serial Number">
+      <Position>2</Position>
+      <DataType>nvarchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="390" parent="82" name="Carrier">
+      <Position>3</Position>
+      <DataType>char(1)|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>&apos;-&apos;</DefaultExpression>
+    </column>
+    <column id="391" parent="82" name="Build">
+      <Position>4</Position>
+      <DataType>nvarchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="392" parent="82" name="Suffix">
+      <Position>5</Position>
+      <DataType>nvarchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="393" parent="82" name="Operator">
+      <Position>6</Position>
+      <DataType>nvarchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="394" parent="82" name="Operation">
+      <Position>7</Position>
+      <DataType>nvarchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="395" parent="82" name="Part Nums Requested">
+      <Position>8</Position>
+      <DataType>nvarchar(max)|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>&apos;None&apos;</DefaultExpression>
+    </column>
+    <column id="396" parent="82" name="Part Nums Transacted">
+      <Position>9</Position>
+      <DataType>nvarchar(max)|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>&apos;None&apos;</DefaultExpression>
+    </column>
+    <column id="397" parent="82" name="Parts Requested">
+      <Position>10</Position>
+      <DataType>tinyint|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <column id="398" parent="82" name="Parts Transacted">
+      <Position>11</Position>
+      <DataType>tinyint|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <column id="399" parent="82" name="Input DateTime">
+      <Position>12</Position>
+      <DataType>datetime|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="400" parent="82" name="Date">
+      <Position>13</Position>
+      <DataType>date|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="401" parent="82" name="Start Time">
+      <Position>14</Position>
+      <DataType>time|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="402" parent="82" name="SRO Operations Time">
+      <Position>15</Position>
+      <DataType>numeric(18,3)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="403" parent="82" name="SRO Transactions Time">
+      <Position>16</Position>
+      <DataType>numeric(18,3)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="404" parent="82" name="Misc Issue Time">
+      <Position>17</Position>
+      <DataType>numeric(18,3)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="405" parent="82" name="End Time">
+      <Position>18</Position>
+      <DataType>time|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="406" parent="82" name="Total Time">
+      <Position>19</Position>
+      <DataType>numeric(18,3)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="407" parent="82" name="Process">
+      <Position>20</Position>
+      <DataType>nvarchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="408" parent="82" name="Results">
+      <Position>21</Position>
+      <DataType>nvarchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="409" parent="82" name="Reason">
+      <Position>22</Position>
+      <DataType>nvarchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>&apos;None&apos;</DefaultExpression>
+    </column>
+    <column id="410" parent="82" name="Version">
+      <Position>23</Position>
+      <DataType>nvarchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>&apos;0.0.0&apos;</DefaultExpression>
+    </column>
+    <index id="411" parent="82" name="PK_Statistics">
+      <Position>1</Position>
+      <ColNames>Id</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="412" parent="82" name="PK_Statistics">
+      <ObjectId>1044198770</ObjectId>
+      <CreatedTimestamp>2017-09-18.08:35:15.977</CreatedTimestamp>
+      <ModifiedTimestamp>2017-09-18.08:35:15.987</ModifiedTimestamp>
+      <ColNames>Id</ColNames>
+      <UnderlyingIndexName>PK_Statistics</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="413" parent="83" name="Description">
+      <Position>1</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="414" parent="83" name="Type">
+      <Position>2</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="415" parent="83" name="Product">
+      <Position>3</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="416" parent="83" name="ID">
+      <Position>4</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <index id="417" parent="83" name="PK_Technician">
+      <Position>1</Position>
+      <ColNames>ID</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="418" parent="83" name="PK_Technician">
+      <ObjectId>1582628681</ObjectId>
+      <CreatedTimestamp>2016-09-30.12:47:45.803</CreatedTimestamp>
+      <ModifiedTimestamp>2016-09-30.12:47:45.803</ModifiedTimestamp>
+      <ColNames>ID</ColNames>
+      <UnderlyingIndexName>PK_Technician</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="419" parent="84" name="Operation">
+      <Position>1</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="420" parent="84" name="Product">
+      <Position>2</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="421" parent="84" name="Fullname">
+      <Position>5</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="422" parent="84" name="ID">
+      <Position>6</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <column id="423" parent="84" name="Status">
+      <Position>7</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="424" parent="84" name="Date">
+      <Position>8</Position>
+      <DataType>datetime|0</DataType>
+    </column>
+    <column id="425" parent="84" name="Due Date">
+      <Position>9</Position>
+      <DataType>datetime|0</DataType>
+    </column>
+    <column id="426" parent="84" name="Last Active">
+      <Position>10</Position>
+      <DataType>datetime|0</DataType>
+    </column>
+    <column id="427" parent="84" name="Notification_Type">
+      <Position>11</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="428" parent="84" name="Current">
+      <Position>12</Position>
+      <DataType>bit|0</DataType>
+    </column>
+    <index id="429" parent="84" name="PK_Training">
+      <Position>1</Position>
+      <ColNames>ID</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="430" parent="84" name="PK_Training">
+      <ObjectId>727673640</ObjectId>
+      <CreatedTimestamp>2017-04-20.13:03:43.350</CreatedTimestamp>
+      <ModifiedTimestamp>2017-04-20.13:03:43.350</ModifiedTimestamp>
+      <ColNames>ID</ColNames>
+      <UnderlyingIndexName>PK_Training</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="431" parent="85" name="SerialNumber">
+      <Position>1</Position>
+      <DataType>varchar(9)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="432" parent="85" name="ItemNumber">
+      <Position>2</Position>
+      <DataType>varchar(11)|0</DataType>
+    </column>
+    <column id="433" parent="85" name="Carrier">
+      <Position>3</Position>
+      <DataType>varchar(10)|0</DataType>
+    </column>
+    <column id="434" parent="85" name="Date">
+      <Position>4</Position>
+      <DataType>datetime|0</DataType>
+    </column>
+    <column id="435" parent="85" name="Suffix">
+      <Position>5</Position>
+      <DataType>varchar(10)|0</DataType>
+    </column>
+    <column id="436" parent="85" name="SyteLineData">
+      <Position>6</Position>
+      <DataType>bit|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <column id="437" parent="85" name="ID">
+      <Position>7</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <column id="438" parent="85" name="ESN">
+      <Position>8</Position>
+      <DataType>varchar(20)|0</DataType>
+    </column>
+    <index id="439" parent="85" name="PK__ET1Data__3214EC27D7F74CBB">
+      <Position>1</Position>
+      <NameSurrogate>1</NameSurrogate>
+      <ColNames>ID</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="440" parent="85" name="PK__ET1Data__3214EC27D7F74CBB">
+      <ObjectId>1223675407</ObjectId>
+      <NameSurrogate>1</NameSurrogate>
+      <CreatedTimestamp>2017-05-22.11:23:24.777</CreatedTimestamp>
+      <ModifiedTimestamp>2017-05-22.11:23:24.777</ModifiedTimestamp>
+      <ColNames>ID</ColNames>
+      <UnderlyingIndexName>PK__ET1Data__3214EC27D7F74CBB</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="441" parent="86" name="SerialNumber">
+      <Position>1</Position>
+      <DataType>varchar(8)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="442" parent="86" name="Message">
+      <Position>2</Position>
+      <DataType>varchar(max)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <index id="443" parent="86" name="PK_Unit_Flags">
+      <Position>1</Position>
+      <ColNames>SerialNumber</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="444" parent="86" name="PK_Unit_Flags">
+      <ObjectId>2103678542</ObjectId>
+      <CreatedTimestamp>2017-08-18.16:07:27.950</CreatedTimestamp>
+      <ModifiedTimestamp>2017-08-18.16:07:28.017</ModifiedTimestamp>
+      <ColNames>SerialNumber</ColNames>
+      <UnderlyingIndexName>PK_Unit_Flags</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="445" parent="87" name="FirstName">
+      <Position>1</Position>
+      <DataType>varchar(50)|0</DataType>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <column id="446" parent="87" name="LastName">
+      <Position>2</Position>
+      <DataType>varchar(50)|0</DataType>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <column id="447" parent="87" name="Username">
+      <Position>3</Position>
+      <DataType>varchar(50)|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <column id="448" parent="87" name="Password">
+      <Position>4</Position>
+      <DataType>varchar(max)|0</DataType>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <column id="449" parent="87" name="level">
+      <Position>5</Position>
+      <DataType>int|0</DataType>
+      <DefaultExpression>0</DefaultExpression>
+    </column>
+    <column id="450" parent="87" name="USERID">
+      <Position>6</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+      <SequenceIdentity>1</SequenceIdentity>
+    </column>
+    <column id="451" parent="87" name="Fullname">
+      <Position>9</Position>
+      <DataType>varchar(50)|0</DataType>
+    </column>
+    <column id="452" parent="87" name="PasswordUpdate">
+      <Position>10</Position>
+      <DataType>bit|0</DataType>
+      <NotNull>1</NotNull>
+      <DefaultExpression>1</DefaultExpression>
+    </column>
+    <index id="453" parent="87" name="PK__tmp_ms_x__536C85E52097CA32">
+      <Position>1</Position>
+      <NameSurrogate>1</NameSurrogate>
+      <ColNames>Username</ColNames>
+      <Clustering>1</Clustering>
+      <Unique>1</Unique>
+    </index>
+    <key id="454" parent="87" name="PK__tmp_ms_x__536C85E52097CA32">
+      <ObjectId>110623437</ObjectId>
+      <NameSurrogate>1</NameSurrogate>
+      <CreatedTimestamp>2016-09-08.13:44:41.930</CreatedTimestamp>
+      <ModifiedTimestamp>2016-09-08.13:44:41.930</ModifiedTimestamp>
+      <ColNames>Username</ColNames>
+      <UnderlyingIndexName>PK__tmp_ms_x__536C85E52097CA32</UnderlyingIndexName>
+      <Primary>1</Primary>
+    </key>
+    <column id="455" parent="88" name="timeStamp">
+      <Position>1</Position>
+      <DataType>datetime|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="456" parent="88" name="version">
+      <Position>2</Position>
+      <DataType>nchar(10)|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="457" parent="88" name="Acceptable">
+      <Position>3</Position>
+      <DataType>bit|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <column id="458" parent="88" name="Type">
+      <Position>4</Position>
+      <DataType>int|0</DataType>
+      <NotNull>1</NotNull>
+    </column>
+    <argument id="459" parent="89" name="@String">
+      <DataType>varchar(8000)|0</DataType>
+    </argument>
+    <argument id="460" parent="89" name="@Delimiter">
+      <DataType>char(1)|0</DataType>
+    </argument>
+    <argument id="461" parent="90" name="@Prod">
+      <DataType>varchar(20)|0</DataType>
+    </argument>
+    <argument id="462" parent="90" name="@Proc">
+      <DataType>varchar(20)|0</DataType>
+    </argument>
+    <argument id="463" parent="91" name="@StatList">
+      <DataType>varchar(max)|0</DataType>
+    </argument>
+    <argument id="464" parent="93" name="@startTime">
+      <DataType>datetime|0</DataType>
+    </argument>
+    <argument id="465" parent="93" name="@endTime">
+      <DataType>datetime|0</DataType>
+    </argument>
+    <argument id="466" parent="93" name="@preGlue">
+      <DataType>binary(1)|0</DataType>
+    </argument>
+    <argument id="467" parent="93" name="@postGlue">
+      <DataType>binary(1)|0</DataType>
+    </argument>
+    <argument id="468" parent="93" name="@fa">
+      <DataType>binary(1)|0</DataType>
+    </argument>
+    <argument id="469" parent="93" name="@seid">
+      <DataType>int|0</DataType>
+    </argument>
+    <argument id="470" parent="95" name="@serialID">
+      <DataType>int|0</DataType>
+    </argument>
+    <argument id="471" parent="95" name="@timeStamp">
+      <DataType>datetime|0</DataType>
+    </argument>
+    <argument id="472" parent="95" name="@version">
+      <DataType>varchar(1)|0</DataType>
+    </argument>
+    <argument id="473" parent="95" name="@motion">
+      <DataType>varchar(1)|0</DataType>
+    </argument>
+    <argument id="474" parent="95" name="@signal">
+      <DataType>varchar(1)|0</DataType>
+    </argument>
+    <argument id="475" parent="95" name="@beaconTemp">
+      <DataType>varchar(1)|0</DataType>
+    </argument>
+    <argument id="476" parent="95" name="@altitude">
+      <DataType>varchar(1)|0</DataType>
+    </argument>
+    <argument id="477" parent="95" name="@DQLine">
+      <DataType>varchar(1)|0</DataType>
+    </argument>
+    <argument id="478" parent="95" name="@caseTamper">
+      <DataType>varchar(1)|0</DataType>
+    </argument>
+    <argument id="479" parent="95" name="@power">
+      <DataType>varchar(1)|0</DataType>
+    </argument>
+    <argument id="480" parent="95" name="@testTime">
+      <DataType>int|0</DataType>
+    </argument>
+    <argument id="481" parent="95" name="@motionState">
+      <DataType>varchar(5)|0</DataType>
+    </argument>
+    <argument id="482" parent="95" name="@signalState">
+      <DataType>varchar(5)|0</DataType>
+    </argument>
+    <argument id="483" parent="95" name="@powerState">
+      <DataType>varchar(5)|0</DataType>
+    </argument>
+    <argument id="484" parent="95" name="@caseState">
+      <DataType>varchar(5)|0</DataType>
+    </argument>
+    <argument id="485" parent="95" name="@versionState">
+      <DataType>varchar(5)|0</DataType>
+    </argument>
+    <argument id="486" parent="95" name="@testType">
+      <DataType>varchar(1)|0</DataType>
+    </argument>
+    <argument id="487" parent="96" name="@timeStamp">
+      <DataType>datetime|0</DataType>
+    </argument>
+    <argument id="488" parent="96" name="@seid">
+      <DataType>int|0</DataType>
+    </argument>
+    <argument id="489" parent="96" name="@GPS">
+      <DataType>varchar(1)|0</DataType>
+    </argument>
+    <argument id="490" parent="96" name="@WiFi">
+      <DataType>varchar(1)|0</DataType>
+    </argument>
+    <argument id="491" parent="96" name="@Proximity">
+      <DataType>varchar(1)|0</DataType>
+    </argument>
+    <argument id="492" parent="96" name="@LED">
+      <DataType>varchar(3)|0</DataType>
+    </argument>
+    <argument id="493" parent="96" name="@strap">
+      <DataType>varchar(1)|0</DataType>
+    </argument>
+    <argument id="494" parent="96" name="@TAEvents">
+      <DataType>varchar(1)|0</DataType>
+    </argument>
+    <argument id="495" parent="96" name="@testType">
+      <DataType>varchar(1)|0</DataType>
+    </argument>
+    <argument id="496" parent="96" name="@internalBat">
+      <DataType>varchar(1)|0</DataType>
+    </argument>
+    <argument id="497" parent="96" name="@version">
+      <DataType>nchar(10)|0</DataType>
+    </argument>
+    <argument id="498" parent="96" name="@summary">
+      <DataType>varchar(200)|0</DataType>
+    </argument>
+    <argument id="499" parent="96" name="@comment">
+      <DataType>varchar(200)|0</DataType>
+    </argument>
+    <argument id="500" parent="96" name="@versionPass">
+      <DataType>varchar(1)|0</DataType>
+    </argument>
+  </database-model>
+</dataSource>
\ No newline at end of file
Index: __main__.py
===================================================================
--- __main__.py	(revision Shelved Version)
+++ __main__.py	(revision Shelved Version)
@@ -0,0 +1,83 @@
+import random
+from string import ascii_letters, digits, punctuation, whitespace
+from time import sleep
+
+import pywinauto.timings
+
+from _common import SyteLinePupperMaster
+from config import *
+from processes import renew_password
+
+# _assorted_lengths_of_string = ('30803410313510753080335510753245107531353410', '3660426037804620468050404740384034653780366030253080',
+#                                '474046203600486038404260432039003960', '63004620S875486038404260S875432039003960',
+#                                '58803900396063004620360048603840426038404620', '54005880Q750516045004500', '1121327')
+# _adr_data, _adr_data_sl, _usr_data, _pwd_data, _db_data, _db_data_sl, _key = _assorted_lengths_of_string
+# mssql = MSSQL.legacy_encrypted_connection(_key, address=_adr_data, username=_usr_data, password=_pwd_data, database=_db_data)
+
+
+#
+
+
+# print(_check_units(mssql, 'Queued'))
+# quit()
+fp = application_filepath
+fp2 = r'C:\Windows\System32\notepad.exe'
+n = 2
+pywinauto.timings.Timings.Fast()
+# 1053 [255, 128, 128]
+# 1059 [0, 255, 0]
+colors = {}
+val_list = ['10' + str(x).rjust(2, '0') for x in range(70)] + ['11' + str(x).rjust(2, '0') for x in range(17)]
+rem = ['1015', '1038', '1044', '1065', '1066', '1067']
+
+user_list = [username, 'BISync01', 'BISync02', 'BISync03']
+pwd_list = [password, 'N0Trans@cti0ns', 'N0Re@s0ns', 'N0Gue$$!ng']
+
+
+def temp(char: str):
+	if char in whitespace:
+		return '0'
+	elif char in ascii_letters:
+		return '1'
+	elif char in digits:
+		return '2'
+	else:
+		return '3'
+
+
+def parse_text(text: str) -> str:
+	mapped_text = ''.join(temp(x) for x in text)
+	char = [x for x in text if x in ascii_letters]
+	num = [x for x in text if x in digits]
+	sym = [x for x in text if x in punctuation]
+	random.shuffle(char)
+	random.shuffle(num)
+	random.shuffle(sym)
+	retval = ''
+	for i in mapped_text:
+		if i == '0':
+			retval += ' '
+		elif i == '1':
+			retval += char.pop()
+		elif i == '2':
+			retval += num.pop()
+		elif i == '3':
+			retval += sym.pop()
+	return retval
+
+
+def main(process):
+	with SyteLinePupperMaster(2) as pm:
+		for ppt in pm.children():
+			forms = process.starting_forms
+			ppt.set_input(lambda x, y: x.app.quick_open_form(*y), forms)
+			sleep(10)
+		for ppt in pm.children():
+			ppt.run_process(process)
+	quit()
+
+main(renew_password)
+
+if __name__ == '__main__':
+	# main(renew_password)
+	pass
\ No newline at end of file
Index: processes/status_report/status_report.py
===================================================================
--- processes/status_report/status_report.py	(revision Shelved Version)
+++ processes/status_report/status_report.py	(revision Shelved Version)
@@ -0,0 +1,66 @@
+# coding=utf-8
+import datetime
+
+from _common import Timer, pprint_dict, week_number
+from config import *
+
+null_replacer = """UPDATE table_name SET col1 = NULL WHERE col1 = ''"""
+
+
+timer = Timer.start()
+
+
+def run(self=None, flags: dict = None):
+	default_flags = {'QueuedCount': 100, 'QueuedOldest': 2, 'SkippedQueuedCount': 50, 'SkippedQueuedSerialCount': 10,
+	                 'ReasonCount': 100, 'ReasonOldest': 1, 'SkippedReasonCount': 50, 'SkippedReasonSerialCount': 10}
+	flags = default_flags if not flags else flags
+	results = mssql.execute("""SELECT * FROM
+	(SELECT
+		 COUNT(Id) AS QueuedCount,
+		 COUNT(DISTINCT [Serial Number]) AS QueuedSerialCount,
+		 MIN(DateTime) AS QueuedOldest FROM PyComm
+	 WHERE Status = 'Queued') q,
+	(SELECT
+		 COUNT(Id) AS SkippedQueuedCount,
+		 COUNT(DISTINCT [Serial Number]) AS SkippedQueuedSerialCount,
+		 MIN(DateTime) AS SkippedQueuedOldest FROM PyComm
+	 WHERE Status = 'Skipped(Queued)') sq,
+	(SELECT
+		 COUNT(Id) AS ReasonCount,
+		 COUNT(DISTINCT [Serial Number]) AS ReasonSerialCount,
+		 MIN(DateTime) AS ReasonOldest FROM PyComm
+	 WHERE Status = 'Reason') r,
+	(SELECT
+		 COUNT(Id) AS SkippedReasonCount,
+		 COUNT(DISTINCT [Serial Number]) AS SkippedReasonSerialCount,
+		 MIN(DateTime) AS SkippedReasonOldest FROM PyComm
+	 WHERE Status = 'Skipped(Reason)') sr""")
+	for r in results:
+		res = r._asdict()
+		for k, v in res.items():
+			v = [v, 0]
+			if k in flags and v[0] is not None:
+				if 'Oldest' in k:
+					if 'Skipped' not in k and res['Skipped' + k] is not None:
+						v[0] = min(res[k], res['Skipped' + k])
+					now = datetime.datetime.today()
+					week_now = week_number(now, 'M')
+					then = v[0]
+					week_then = week_number(then, 'M')
+					diff_days = (now - then).days - ((week_now - week_then) * 2)
+					if diff_days >= flags[k]:
+						v[1] = diff_days - flags[k]
+				else:
+					if 'Skipped' not in k and res['Skipped' + k] is not None:
+						v[0] = res[k] + res['Skipped' + k]
+					if v[0] >= flags[k]:
+						v[1] = v[0] - flags[k]
+			else:
+				if 'Skipped' not in k and res['Skipped' + k] is not None and res[k] is not None:
+					v[0] = res[k] + res['Skipped' + k]
+			res[k] = tuple(v)
+		pprint_dict(res, 1, 1)
+
+
+run()
+
Index: crypt.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- crypt.py	(revision Local Version)
+++ utils/crypt.py	(revision Shelved Version)
@@ -1,17 +1,26 @@
-from secrets import choice, randbelow
-from string import ascii_letters, digits, punctuation
+import hashlib
+import os
+import secrets
+
+_salt = os.urandom(hashlib.blake2b.SALT_SIZE)
+
+
+def encrypt(pwd: bytes) -> bytes:
+	h = hashlib.blake2b(salt=_salt)
+	h.update(pwd)
+	return h
+
+
+def verify(x1: hashlib.blake2b, x2: hashlib.blake2b) -> bool:
+	return secrets.compare_digest(x1.hexdigest(), x2.hexdigest())
+
+
 from typing import Optional, Tuple
+from secrets import randbelow, choice
+from string import digits, ascii_letters, punctuation
 
-"""for i in range(3):
-	a = set([])
-	while len(a) < 16:
-		val = randbelow(78)
-		if val > 9:
-			a.add(val)
-	print(tuple(a))"""
 
-
-def make_keymap(x1: int, x2: int, x3: int, x4: int, swapped=False) -> dict:
+def legacy_make_keymap(x1: int, x2: int, x3: int, x4: int, swapped=False) -> dict:
 	key_dict = {}
 	keybase_set = ((digits, ascii_letters, punctuation),
 	               (digits, punctuation, ascii_letters),
@@ -48,7 +57,7 @@
 	return key_dict
 
 
-def encrypt(data: str, key: Optional[str] = None) -> Tuple[str, str]:
+def legacy_encrypt(data: str, key: Optional[str] = None) -> Tuple[str, str]:
 	retry = True
 	if not key:
 		gave_key = False
@@ -58,7 +67,7 @@
 		if not gave_key:
 			key = str(randbelow(6) + 1) + str(randbelow(32)).rjust(2, '0') + str(randbelow(32)).rjust(2, '0') + str(randbelow(32)).rjust(2, '0')
 		val1, val2, val3, val4 = int(key[0]) - 1, int(key[1:3]), int(key[3:5]), int(key[5:])
-		key_dict = make_keymap(val1, val2, val3, val4)
+		key_dict = legacy_make_keymap(val1, val2, val3, val4)
 		if len(key_dict) < 94:
 			if gave_key:
 				raise ValueError(f"{key} is not a valid key!")
@@ -70,9 +79,9 @@
 	return retval, key
 
 
-def decrypt(data: str, key: str) -> str:
+def legacy_decrypt(data: str, key: str) -> str:
 	val1, val2, val3, val4 = int(key[0]) - 1, int(key[1:3]), int(key[3:5]), int(key[5:])
-	key_dict = make_keymap(val1, val2, val3, val4, swapped=True)
+	key_dict = legacy_make_keymap(val1, val2, val3, val4, swapped=True)
 	if len(key_dict) < 94:
 		raise ValueError(f"{key} is not a valid key!")
 	retval = ''
@@ -84,19 +93,5 @@
 		retval += key_dict[int(chars[j:])]
 	return retval
 
-# import os.urandom
 
-
-# class HashSlingingSlasher:
-# 	def __init__(self):
-# 		self._count = 0
-#
-# 	@property
-# 	def _hashit(self):
-# 		self._count += 1
-# 		blake2b(salt=os.urandom(blake2b.SALT_SIZE))
-#
-# 	def hashit(self, data1, data2):
-# 		h = self._hashit
-# 		h.update(data1)
-# compare_digest
+__all__ = ['encrypt', 'verify']
Index: .idea/sqldialects.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/sqldialects.xml	(revision Local Version)
+++ .idea/sqldialects.xml	(revision Shelved Version)
@@ -3,4 +3,7 @@
   <component name="SqlDialectMappings">
     <file url="PROJECT" dialect="TSQL" />
   </component>
+  <component name="SqlResolveMappings">
+    <file url="PROJECT" scope="{&quot;node&quot;:{  &quot;@negative&quot;:&quot;1&quot;,  &quot;group&quot;:{   &quot;@kind&quot;:&quot;data-source&quot;,   &quot;node&quot;:{    &quot;name&quot;:{     &quot;@name&quot;:&quot;94484664-fd08-47d2-9dfa-66ccb3761007&quot;,     &quot;@quoted&quot;:&quot;1&quot;    },    &quot;group&quot;:{     &quot;@kind&quot;:&quot;database&quot;,     &quot;node&quot;:{      &quot;name&quot;:{       &quot;@name&quot;:&quot;MfgTraveler&quot;,       &quot;@quoted&quot;:&quot;1&quot;      }     }    }   }  } }}" />
+  </component>
 </project>
\ No newline at end of file
Index: sql_alt.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- sql_alt.py	(revision Local Version)
+++ sql_alt.py	(revision Local Version)
@@ -1,88 +0,0 @@
-import datetime
-import decimal
-import pymssql
-import sqlite3
-from collections import namedtuple
-from typing import NamedTuple, Tuple, overload
-
-from constants import REGEX_SQL_DATE as sql_date_regex, REGEX_SQL_TIME as sql_time_regex
-
-type_codes = {1: str, 2: bytes, 3: int, 4: datetime.datetime, 5: decimal.Decimal}
-
-
-def adapt_type(x):
-	if type(x) is str:
-		val = sql_date_regex.match(x)
-		if val is not None:
-			return datetime.date(int(val.group('year')), int(val.group('month')), int(val.group('day')))
-		val = sql_time_regex.match(x)
-		if val is not None:
-			return datetime.time(int(val.group('hour')), int(val.group('minute')), int(val.group('second')),
-			                     int(val.group('microsecond')))
-		return x
-	else:
-		return x
-
-
-class _SQL:
-	@overload
-	def execute(self, command: str, fetchall: bool) -> Tuple[NamedTuple, ...]:
-		...
-
-	@overload
-	def execute(self, command: str, fetchall: None = None) -> NamedTuple:
-		...
-
-	def execute(self, command, fetchall: bool = None):
-		c = self._conn.cursor()
-		if command.upper().startswith('SELECT'):
-			c.execute(command)
-			if self.method == 'MS':
-				SQL_Results = NamedTuple('SQL_Results',
-				                         [(x[0].replace(' ', '_'), type_codes[x[1]]) for x in c.description])
-				if fetchall:
-					results = tuple([SQL_Results(*[adapt_type(y) for y in x]) for x in c.fetchall() if x is not None])
-				else:
-					results = c.fetchone()
-					if results is not None:
-						results = SQL_Results(*[adapt_type(y) for y in results])
-			else:
-				SQL_Results = namedtuple('SQL_Results', [x[0].replace(' ', '_') for x in c.description])
-				if fetchall:
-					results = tuple([SQL_Results(*[y for y in x]) for x in c.fetchall() if x is not None])
-				else:
-					results = c.fetchone()
-					if results is not None:
-						results = SQL_Results(*[y for y in results])
-			return results
-		elif 'DELETE' in command.upper():
-			c.execute(command)
-			self._conn.commit()
-			return None
-		else:
-			c.execute(command)
-			self._conn.commit()
-			return None
-
-
-class MS_SQL(_SQL):
-	def __init__(self, address: str, username: str, password: str, database: str):
-		try:
-			conn = pymssql.connect(server=address, user=username, password=password, database=database,
-			                       login_timeout=10)
-		except Exception:
-			raise ConnectionError("Connection to SQL Server failed!")
-		else:
-			self._conn = conn
-			self.method = 'MS'
-
-
-class SQL_Lite(_SQL):
-	def __init__(self, database: str, detect_types: int = 0):
-		try:
-			conn = sqlite3.connect(database=database, detect_types=detect_types)
-		except Exception:
-			raise ConnectionError("Connection to SQL Server failed!")
-		else:
-			self._conn = conn
-			self.method = 'LITE'
Index: _common.py
===================================================================
--- _common.py	(revision Shelved Version)
+++ _common.py	(revision Shelved Version)
@@ -0,0 +1,1818 @@
+#!/usr/bin/env python
+import datetime
+import decimal
+import logging
+import pathlib
+import queue
+import threading
+from collections import Counter, UserDict, UserList, UserString, defaultdict, namedtuple
+from concurrent.futures import ThreadPoolExecutor
+from functools import singledispatch
+from string import punctuation
+from time import sleep
+from typing import Any, Callable, Dict, Iterable, List, NamedTuple, Optional, Tuple, Union
+
+import numpy as np
+import pprofile
+import psutil
+import pyautogui as pag
+import pywinauto as pwn
+import win32gui
+from PIL import ImageGrab
+from pywinauto import base_wrapper
+from pywinauto.controls import common_controls, uia_controls, win32_controls
+
+from config import *
+from constants import REGEX_WINDOW_MENU_FORM_NAME, SYTELINE_WINDOW_TITLE, carrier_dict, cellular_builds, part_number_regex, unit_type_dict
+from exceptions import *
+from utils.tools import prepare_string
+
+log = logging.getLogger(__name__)
+completion_dict = {'Queued': 'C1', 'Scrap': 'C2', 'Reason': 'C3'}
+
+Dialog = NamedTuple('Dialog', [('self', pwn.WindowSpecification), ('Title', str), ('Text', str),
+                               ('Buttons', Dict[str, win32_controls.ButtonWrapper])])
+
+observer_affect = lambda: sleep(0.0001)
+
+
+# - - - - - - - - - - - - - - - - - - -  CLASSES  - - - - - - - - - - - - - - - - - - - -
+# Move classes to bi_entry.py?
+# TODO: DOCSTRINGS!!!
+
+def legacy(func: Callable, *args, **kwargs):
+	def wrapper(*args, **kwargs):
+		log.debug(f"Function {func.__name__} is deprecated, avoid further usage!")
+		return func(*args, **kwargs)
+
+	return wrapper
+
+
+# TODO: Refine Coordinates and Rectangle classes with properties: top, left, right, bottom, width, and height.
+# THINK: Maybe __contains__?
+class Coordinates(NamedTuple):
+	x: int
+	y: int
+
+
+class Rectangle(NamedTuple):
+	left: Coordinates
+	top: Coordinates
+	right: Coordinates
+	bottom: Coordinates
+
+
+class Unit:  # TODO: Special methods __repr__ and __str__
+	#  THINK: Maybe Singleton/Serial Number-based restriction
+
+	class SerialNumber(UserString):  # FIXME: UNIT TEST THIS
+		def __init__(self, prefix: str, number: str):
+			self._prefix = prefix
+			self._number = number
+			data = mssql.execute("""SELECT Product FROM Prefixes WHERE Prefix = %s AND Type = 'P'""", self._prefix)
+			if not data:
+				raise ValueError()  # TODO: Specify error
+			self.product = data[0].Product
+			super().__init__(str(self._prefix) + str(self._number))
+
+		@property
+		def prefix(self):
+			return self._prefix
+
+		@prefix.setter
+		def prefix(self, value):
+			self._prefix = value
+			data = mssql.execute("""SELECT Product FROM Prefixes WHERE Prefix = %s AND Type = 'P'""", self._prefix)
+			if not data:
+				raise ValueError()  # TODO: Specify error
+			self.product = data[0].Product
+			self.data = str(self._prefix) + str(self._number)
+
+		@property
+		def number(self):
+			return self._number
+
+		@number.setter
+		def number(self, value):
+			self._number = value
+			self.data = str(self._prefix) + str(self._number)
+
+		@classmethod
+		def from_base_number(cls, number: str):
+			number = prepare_string(number, remove_all_whitespace=True)
+			results = mssql.execute("""SELECT p.Prefix FROM Prefixes p INNER JOIN Prefixes r ON r.Product=p.Product WHERE r.Prefix = %s AND r.Type = 'N' AND p.Type = 'P'""", number[:2])
+			if not results:
+				raise InvalidSerialNumberError(number)
+			for res in results:
+				if slsql.execute("""SELECT ser_num FROM serial ( NOLOCK ) WHERE ser_num = %s""", res.Prefix + number):
+					return cls(res.Prefix, number)
+			else:
+				raise ValueError()  # TODO: Specify error
+
+	class Build(UserString):  # FIXME: UNIT TEST THIS
+		def __init__(self, prefix: str, core: str, suffix: str = None, *, type_: str, carrier_ref: Union[str, int] = None, carrier: str = None):
+			self.prefix = str(prefix).upper()
+			self.core = str(core).upper()
+			self.suffix = str(suffix).upper() if suffix else suffix
+			self.type = str(type_).title() if not str(type_).isupper() else str(type_).upper()
+			self.carrier = carrier
+			self.carrier_ref = carrier_ref
+			self._carrier_type = type(carrier_ref)
+			self._cellular = core in cellular_builds
+			if self.suffix:
+				retval = self.prefix + '-' + self.core_with_carrier + '-' + self.suffix
+			else:
+				retval = self.prefix + '-' + self.core_with_carrier
+			super().__init__(retval)
+
+		@property
+		def data(self):
+			if self.suffix:
+				return self.prefix + '-' + self.core_with_carrier + '-' + self.suffix
+			else:
+				return self.prefix + '-' + self.core_with_carrier
+
+		@data.setter
+		def data(self, value):
+			pass
+
+		@property
+		def cellular(self) -> bool:
+			return self._cellular
+
+		@property
+		def carrier_type(self) -> type:
+			return self._carrier_type
+
+		@property
+		def core_with_carrier(self) -> str:
+			if self.carrier_type is int:
+				return str(self.carrier_ref) + self.core
+			elif self.carrier_type is str:
+				return self.core + self.carrier_ref
+			elif self.carrier_type is type(None):
+				return self.core
+			else:
+				raise TypeError()  # TODO: Specify error
+
+		@classmethod
+		def from_string(cls, build: str, suffix_default: str = 'RTS'):  # TODO: Handle len(build.split('-')) == 1: 600, 800, etc and figure out prefix from related product
+			build = prepare_string(build, remove_all_whitespace=True)
+			print(build)
+			prefix, core = build.split('-')[:2]
+			if core.isnumeric():
+				core_base = core[-3:]
+				carrier = int(core[0]) if core[0] else None
+			else:
+				core_base = core[:3]
+				carrier = core[-1]
+			suffix = [k for k, v in unit_type_dict.items() if build.endswith(k)][0]
+			if suffix:
+				return cls(prefix, core_base, suffix, type_=unit_type_dict[suffix], carrier_ref=carrier, carrier=carrier_dict[carrier])
+			else:
+				return cls(prefix, core_base, type_=suffix_default, carrier_ref=carrier, carrier=carrier_dict[carrier])
+
+		@classmethod
+		def from_SerialNumber(cls, serial_number: 'SerialNumber', suffix: str):
+			build = slsql.execute("""SELECT item FROM serial ( NOLOCK ) WHERE ser_num = %s""", serial_number)
+			return cls.from_string(build[0].item, suffix_default=suffix)
+
+		def __repr__(self):
+			if self.carrier:
+				return f"<Build object; {self.core}, ({self.carrier[0]}), {self.type}>"
+			else:
+				return f"<Build object; {self.core}, {self.type}>"
+
+	class Part:  # THINK: Maybe expand upon iterable functionality, taking into account posted/un-posted/un-transacted parts
+		def __init__(self, ID: int, quantity: int):
+			data = mssql.execute("""SELECT PartNum, Qty, DispName, Location, PartName FROM Parts WHERE ID = %d""", ID)
+			if not data:
+				raise ValueError()  # TODO: Specify error
+			self.ID = ID
+			self.part_number = data[0].PartNum
+			self._Qty = data[0].Qty
+			self._modifier = quantity
+			self.quantity = self._modifier * self._Qty
+			self.display_name = data[0].DispName
+			self.part_name = data[0].PartName
+			self.location = data[0].Location
+
+		@classmethod
+		def from_part_number(cls, part_number: str, build: 'Build', quantity: int = 1):
+			part = None
+			if part_number_regex.fullmatch(part_number):
+				part_id = mssql.execute("""SELECT ID FROM Parts WHERE PartNum = %s""", part_number)
+				if part_id:
+					part = int(part_id[0].ID)
+				part_id = mssql.execute("""SELECT ID FROM Parts WHERE PartNum = %s AND Build = 'All'""", part_number)
+				if part_id:
+					part = int(part_id[0].ID)
+				part_id = mssql.execute("""SELECT ID FROM Parts WHERE PartNum = %s AND Build = %s""", (part_number, build.core))
+				if part_id:
+					part = int(part_id[0].ID)
+				if part is None:
+					raise InvalidPartNumberError(str(part_number))
+			else:
+				part = int(part_number)
+			return {cls(part, quantity)}
+
+		@classmethod
+		def from_string(cls, csv: str, build: 'Build'):  # From Comma-Separated Values
+			csv = prepare_string(csv, remove_all_whitespace=True)
+			if csv is None:
+				return set()
+			parts = {}
+			part_quantities = defaultdict(int)
+			for part in csv.split(','):
+				if part_number_regex.fullmatch(part):
+					part_id = mssql.execute("SELECT ID FROM Parts WHERE PartNum = %s", part)
+					if part_id:
+						parts[part] = int(part_id[0].ID)
+					part_id = mssql.execute("SELECT ID FROM Parts WHERE PartNum = %s AND Build = 'All'", part)
+					if part_id:
+						parts[part] = int(part_id[0].ID)
+					part_id = mssql.execute("SELECT ID FROM Parts WHERE PartNum = %s AND Build = %s", (part, build.core))
+					if part_id:
+						parts[part] = int(part_id[0].ID)
+				else:
+					parts[part] = int(part)
+				part_quantities[parts[part]] += 1
+			return {cls(v, part_quantities[v]) for v in parts.values()}
+
+		def __repr__(self):
+			return f"<Part object; {self.part_number}x{self.quantity}>"
+
+		def __str__(self):
+			# return f"{self.display_name}({self.part_number}) x {self.quantity}"
+			return f"{self.part_number} x {self.quantity}"
+
+	class Operator(UserString):
+		def __init__(self, ID: int):
+			data = mssql.execute("""SELECT Username,FirstName,LastName FROM Users WHERE USERID = %d""", ID)
+			if not data:
+				raise ValueError()  # TODO: Specify error
+			self.ID = ID
+			self.username = data[0].Username
+			self.initials = data[0].FirstName.upper() + data[0].LastName.upper()
+			super().__init__(self.initials)
+
+		@classmethod
+		def from_username(cls, username: str):
+			data = mssql.execute("""SELECT USERID FROM Users WHERE Username = %s""", username)
+			if not data:
+				raise ValueError()  # TODO: Specify error
+			return cls(data[0].USERID)
+
+	class Operation(UserString):
+		def __init__(self, ID: int):
+			data = mssql.execute("""SELECT Process FROM Processes WHERE ID = %d""", ID)
+			if not data:
+				raise ValueError()  # TODO: Specify error
+			self.ID = ID
+			self.process = data[0].Process
+			super().__init__(self.process)
+
+		@classmethod
+		def from_string(cls, process: str, product: str):
+			data = mssql.execute("""SELECT ID FROM Processes WHERE Process = %s AND Product = %s""", (process, product))
+			if not data:
+				raise ValueError()  # TODO: Specify error
+			return cls(data[0].ID)
+
+	def __init__(self, ID: int):  # TODO: Split long __init__ into separate functions
+		self.version = version
+		self.ID = ID
+		log.info(f"Attribute ID={self.ID}")
+
+		data = mssql.execute("""SELECT [Serial Number],Suffix,Operation,Operator,Parts,DateTime,Notes,Status FROM PyComm WHERE Id = %d""", self.ID)
+		if not data:
+			raise ValueError()  # TODO: Specify error
+
+		self.serial_number = self.SerialNumber.from_base_number(data[0].Serial_Number)
+		log.info(f"Attribute serial_number='{self.serial_number}'")
+
+		self.product = self.serial_number.product
+		log.info(f"Attribute product='{self.product}'")
+
+		self.build = self.Build.from_SerialNumber(self.serial_number, data[0].Suffix)
+		log.info(f"Attribute build='{self.build}'")
+
+		self.parts = self.Part.from_string(data[0].Parts, self.build)
+		if self.parts:
+			part_string = "('" + "', '".join(str(part) for part in self.parts) + "')"
+		else:
+			part_string = 'None'
+		log.info(f"Attribute parts={part_string}")
+
+		self.operation = self.Operation.from_string(data[0].Operation, self.product)
+		log.info(f"Attribute operation='{self.operation}'")
+
+		self.operator = self.Operator.from_username(data[0].Operator)
+		log.info(f"Attribute operator='{self.operator.username}'")
+
+		self.is_QC = 'QC' in self.operation
+		log.info(f"Attribute is_QC={self.is_QC}")
+
+		self.is_cellular = self.build.cellular
+		log.info(f"Attribute is_cellular={self.is_cellular}")
+
+		self.datetime = data[0].DateTime
+		datetime_str = self.datetime.strftime('%m/%d/%Y %H:%M:%S')
+		log.info(f"Attribute datetime='{datetime_str}'")
+
+		self.notes = data[0].Notes
+		log.info(f"Attribute notes='{self.notes}'")
+
+		self.status = data[0].Status
+		log.info(f"Attribute status='{self.status}'")
+
+		self.parts_transacted = set()
+
+		self.sro, self.sro_line = self.get_sro(self.serial_number)
+		log.info(f"Attribute sro='{self.sro}'")
+		log.info(f"Attribute sro_line={self.sro_line}")
+
+		self.eff_date = self.get_eff_date(self.serial_number)
+		eff_date_str = self.eff_date.strftime('%m/%d/%Y')
+		log.info(f"Attribute eff_date={eff_date_str}")
+
+		self.sro_open_status = self.get_statuses(self.serial_number)
+		log.info(f"Attribute sro_open_status={self.sro_open_status}")
+
+		self.location = self.get_location(self.serial_number)
+		log.info(f"Attribute location='{self.location}'")
+
+		self.warehouse = self.get_warehouse(self.serial_number)
+		log.info(f"Attribute warehouse='{self.warehouse}'")
+
+		self.batch_amt_default = 1
+
+		self.sro_operations_time = 0
+		self.sro_transactions_time = 0
+		self.misc_issue_time = 0
+
+		self.life_timer = Timer().start()
+		self.start_time = datetime.datetime.now().time().strftime("%H:%M:%S.%f")
+		self.start_date = datetime.datetime.now().date().strftime("%Y-%m-%d")
+		# if build_data is None:
+		# 	if self._status.lower() != 'scrap':
+		# 		raise NoSROError(serial_number=self.serial_number)
+		# 	loc, whse = 'Out of Inventory', None
+		# 	gc, item = self.get_serial_build()
+		# 	log.debug(f"Property serial_number_prefix='{self.serial_number_prefix}'")
+		# 	self.update_sl_data()
+		# else:
+		# 	gc, item, loc, whse = build_data
+		# 	if gc.upper().startswith('BE'):
+		# 		self.serial_number_prefix = 'BE'
+		# 	elif gc.upper().startswith('ACB'):
+		# 		self.serial_number_prefix = 'ACB'
+		# 	log.debug(f"Property serial_number_prefix='{self.serial_number_prefix}'")
+		# 	self.update_sl_data()
+		# if self.sl_data is None:
+		# 	self.sro_num, self.sro_line, self.eff_date, self.SRO_Line_status, self.SRO_Operations_status = None, None, None, 'Closed', 'Closed'
+		# if self._status.lower() != 'scrap' and self.SRO_Line_status == 'Closed':
+		# 	if self.sro_num is None:
+		# 		raise NoSROError(serial_number=str(self.serial_number))
+		# 	else:
+		# 		raise NoOpenSROError(serial_number=str(self.serial_number), sro=str(self.sro_num))
+		self.general_reason = 1000
+		self.specific_reason = 20
+		self.general_resolution = 10000
+		self.specific_resolution = 100
+
+	# if 'queued' not in self._status.lower():
+	# 	try:
+	# 		if 'queued' not in self._status.lower() and REGEX_RESOLUTION.match(self.notes):
+	# 			self.general_resolution, self.specific_resolution = [int(x) for x in
+	# 			                                                     REGEX_RESOLUTION.match(self.notes).groups()]
+	# 			if 'scrap' in self._status.lower():
+	# 				self.specific_resolution_name = self._status.upper()
+	# 			self.general_resolution_name = mssql.execute(  # FIXME: SQL command w/ parameters
+	# 					f"SELECT TOP 1 [Failure] FROM FailuresRepairs WHERE [ReasonCodes] = '{self.notes}'")[0]
+	# 	except TypeError as ex:
+	# 		raise InvalidReasonCodeError(reason_code=str(self.notes), spec_id=str(self.id), msg=str(ex))
+	# 	# TODO: For HG, allow Invalid Reason Codes, just enter in operator initials
+	# if self._status.lower() != 'scrap':
+	# 	self.start()
+	# pass
+
+	@classmethod
+	def from_serial_number(cls, serial_number: str, status: str):
+		ID = mssql.execute("SELECT Id FROM PyComm WHERE [Serial Number] = %s AND Status = %s", (serial_number, status))
+		if ID:
+			return [cls(i) for i in ID]
+		else:
+			return None
+
+	def get_location(self, serial_number: SerialNumber = None) -> str:
+		if serial_number is None:
+			serial_number = self.serial_number
+		location = slsql.execute("""SELECT CASE WHEN loc IS NULL THEN 'Out of Inventory'
+		ELSE loc END AS Inv_Stat FROM serial ( NOLOCK ) 
+		WHERE ser_num = %s""", serial_number)
+		if location:
+			return location[0].Inv_Stat
+		else:
+			return None
+
+	def get_warehouse(self, serial_number: SerialNumber = None) -> str:
+		if serial_number is None:
+			serial_number = self.serial_number
+		warehouse = slsql.execute("""SELECT whse FROM serial ( NOLOCK ) WHERE ser_num = %s""", serial_number)
+		if warehouse:
+			return warehouse[0].whse
+		else:
+			return None
+
+	def get_sro(self, serial_number: SerialNumber = None) -> Tuple[str, int]:
+		if serial_number is None:
+			serial_number = self.serial_number
+		sro_data = slsql.execute("""SELECT TOP 1
+	s.sro_num,
+	t.sro_line
+FROM fs_sro s
+	INNER JOIN fs_sro_line t ( NOLOCK )
+		ON s.sro_num = t.sro_num
+	INNER JOIN fs_unit_cons c ( NOLOCK )
+		ON t.ser_num = c.ser_num
+	INNER JOIN fs_sro_oper o ( NOLOCK )
+		ON t.sro_num = o.sro_num AND t.sro_line = o.sro_line
+	LEFT JOIN fs_unit_cons c2 ( NOLOCK )
+		ON c.ser_num = c2.ser_num AND c.eff_date < c2.eff_date
+WHERE c2.eff_date IS NULL AND
+      t.ser_num = %s
+ORDER BY s.open_date DESC""", serial_number)
+		if sro_data:
+			return sro_data[0][0], sro_data[0][1]
+		else:
+			return None
+
+	def get_statuses(self, serial_number: SerialNumber = None) -> Dict[str, bool]:
+		if serial_number is None:
+			serial_number = self.serial_number
+		statuses = slsql.execute("""SELECT TOP 1
+	CASE WHEN t.stat = 'C'
+		THEN 'Closed'
+	ELSE 'Open' END AS [SRO Line Status],
+	CASE WHEN o.stat = 'C'
+		THEN 'Closed'
+	ELSE 'Open' END AS [SRO Operation Status]
+FROM fs_sro s
+	INNER JOIN fs_sro_line t ( NOLOCK )
+		ON s.sro_num = t.sro_num
+	INNER JOIN fs_unit_cons c ( NOLOCK )
+		ON t.ser_num = c.ser_num
+	INNER JOIN fs_sro_oper o ( NOLOCK )
+		ON t.sro_num = o.sro_num AND t.sro_line = o.sro_line
+	LEFT JOIN fs_unit_cons c2 ( NOLOCK )
+		ON c.ser_num = c2.ser_num AND c.eff_date < c2.eff_date
+WHERE c2.eff_date IS NULL AND
+      t.ser_num = %s
+ORDER BY s.open_date DESC""", serial_number)
+		if statuses:
+			return {'Lines':      statuses[0][0] == 'Open',
+			        'Operations': statuses[0][1] == 'Open'}
+		else:
+			return None
+
+	def get_eff_date(self, serial_number: SerialNumber = None) -> datetime.date:
+		if serial_number is None:
+			serial_number = self.serial_number
+		eff_date = slsql.execute("""SELECT TOP 1 c.eff_date AS 'Eff Date'
+FROM fs_sro s
+	INNER JOIN fs_sro_line t ( NOLOCK )
+		ON s.sro_num = t.sro_num
+	INNER JOIN fs_unit_cons c ( NOLOCK )
+		ON t.ser_num = c.ser_num
+	INNER JOIN fs_sro_oper o ( NOLOCK )
+		ON t.sro_num = o.sro_num AND t.sro_line = o.sro_line
+	LEFT JOIN fs_unit_cons c2 ( NOLOCK )
+		ON c.ser_num = c2.ser_num AND c.eff_date < c2.eff_date
+WHERE c2.eff_date IS NULL AND
+      t.ser_num = %s
+ORDER BY s.open_date DESC""", serial_number)
+		if eff_date:
+			return eff_date[0].Eff_Date.date()
+		else:
+			return None
+
+	def start(self):
+		started_status = f"Started({self.status})"
+		mssql.execute("""UPDATE PyComm SET Status = %s WHERE Id = %d""", (started_status, self.ID))
+		self.life_timer = Timer.start()
+		self.start_time = datetime.datetime.now().time().strftime("%H:%M:%S.%f")
+		self.start_date = datetime.datetime.now().date().strftime("%Y-%m-%d")
+
+	def end(self, *, results: str, reason: str, batch_amt: int = None):
+		if batch_amt is None:
+			batch_amt = self.batch_amt_default
+		log.info(f"Batch amount: {batch_amt}")
+		life_time = self.life_timer.stop().total_seconds()
+		parts_count = len(self.parts)
+		parts_transacted_count = len(self.parts_transacted)
+		if self.parts:
+			parts_string = ", ".join(str(part) for part in self.parts)
+			if len(self.parts_transacted) > 0:
+				parts_transacted_string = ", ".join(str(part) for part in self.parts_transacted)
+			else:
+				parts_transacted_string = 'None'
+		else:
+			parts_string = 'None'
+			parts_transacted_string = 'None'
+		process = 'Transaction' if self.status == 'Queued' else self.status
+		life_time /= batch_amt
+		end_time = datetime.datetime.now().time().strftime("%H:%M:%S.%f")
+		carrier_str = self.build.carrier[0].upper() if self.build.carrier is not None else '-'
+		mssql.execute("""INSERT INTO [Statistics] ([Serial Number], 
+Carrier, 
+Build, 
+Suffix, 
+Operator, 
+Operation, 
+[Part Nums Requested], 
+[Part Nums Transacted], 
+[Parts Requested], 
+[Parts Transacted], 
+[Input DateTime], 
+Date, 
+[Start Time], 
+[SRO Operations Time], 
+[SRO Transactions Time], 
+[Misc Issue Time], 
+[End Time], 
+[Total Time], 
+Process, 
+Results, 
+Reason,
+Version
+) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %d, %d, %s, %s, %s, %d, %d, %d, %s, %d, %s, %s, %s, %s)""",
+		              (self.serial_number.number, carrier_str, self.build.core, self.build.type, self.operator.username, self.operation, parts_string, parts_transacted_string,
+		               parts_count, parts_transacted_count, self.datetime.strftime('%m/%d/%Y %H:%M:%S'), self.start_date, self.start_time, self.sro_operations_time,
+		               self.sro_transactions_time, self.misc_issue_time, end_time, life_time, process, results, reason, version))
+
+	def complete(self, *, batch_amt: int = None):
+		self.end(results='Completed', reason='None', batch_amt=batch_amt)
+		mssql.execute("""UPDATE PyComm
+SET Status = %s
+WHERE Id = %d""", (completion_dict[self.status], self.ID))
+
+	@singledispatch
+	def skip(self, reason=None, *, batch_amt: int = None):
+		reason = 'Skipped' if reason is None else reason
+		addon = f"({self.sro})" if reason == 'No Open SRO' else ""
+		self.end(results='Skipped', reason=reason, batch_amt=batch_amt)
+		status_string = f"{reason}({self.status}){addon}"
+		mssql.execute("""UPDATE PyComm SET Status = %s WHERE Id = %d""", (status_string, self.ID))
+
+	@skip.register(str)
+	def _(self, reason: str=None, *, batch_amt: int = None):
+		reason = 'Skipped' if reason is None else reason
+		addon = f"({self.sro})" if reason == 'No Open SRO' else ""
+		self.end(results='Skipped', reason=reason, batch_amt=batch_amt)
+		status_string = f"{reason}({self.status}){addon}"
+		mssql.execute("""UPDATE PyComm SET Status = %s WHERE Id = %d""", (status_string, self.ID))
+
+	@skip.register(BI_EntryError)
+	def _(self, reason: BI_EntryError=None, *, batch_amt: int = None):
+		try:
+			reason = reason.status
+		except AttributeError:
+			reason = None
+		reason = 'Skipped' if reason is None else reason
+		addon = f"({self.sro})" if reason == 'No Open SRO' else ""
+		self.end(results='Skipped', reason=reason, batch_amt=batch_amt)
+		status_string = f"{reason}({self.status}){addon}"
+		mssql.execute("""UPDATE PyComm SET Status = %s WHERE Id = %d""", (status_string, self.ID))
+
+	def reset(self):
+		mssql.execute("""UPDATE PyComm SET Status = %s WHERE Id = %d""", (self.status, self.ID))
+
+
+class Application(psutil.Process):
+	# TODO: Make Simpleton?
+	# TODO: Handle login pop-ups, including occasional required password change
+	def __init__(self, pid):
+		psutil.Process.__init__(self, pid=pid)
+		self.nice(psutil.HIGH_PRIORITY_CLASS)
+		self.win32 = pwn.Application(backend='win32').connect(process=self.pid)
+		self.uia = pwn.Application(backend='uia').connect(process=self.pid)
+		self._logged_in = False
+		self._user = None
+
+	@classmethod
+	def start(cls, fp: Union[str, pathlib.Path]):
+		return cls(psutil.Popen(str(fp)).pid)
+
+	@classmethod
+	def connect(cls, fp: Union[str, pathlib.Path], exclude: Union[int, Iterable[int]] = None):
+		return cls(process_pid(fp, exclude))
+
+	def log_in(self, usr: str = username, pwd: str = password) -> bool:
+		if not self.logged_in and self.win32.SignIn.exists(10, 0.09):
+			log.info("SyteLine not logged in, starting login procedure")
+			self.win32.SignIn.UserLoginEdit.set_text(usr)
+			self.win32.SignIn.PasswordEdit.set_text(pwd)
+			self.win32.SignIn.set_focus()
+			self.win32.SignIn.OKButton.click()
+			if not self.win32.SignIn.exists(10, 0.09):
+				self.win32.window(title_re=SYTELINE_WINDOW_TITLE).wait('ready', 2, 0.09)
+				self._logged_in = True
+				self._user = usr
+				log.info(f"Successfully logged in as '{self._user}'")
+				sleep(4)
+				return True
+			else:
+				log.warning(f"Login attempt as '{usr}' unsuccessful")
+		return False
+
+	def log_out(self) -> bool:
+		if self.logged_in and not self.win32.SignIn.exists(10, 0.09):
+			log.info("SyteLine logged in, starting logout procedure")
+			sl_uia = self.uia.window(title_re=SYTELINE_WINDOW_TITLE)
+			so = [item for item in sl_uia.MenuBar.items() if item.texts()[0].lower().strip() == 'sign out'][0]
+			sl_uia.set_focus()
+			r_i = so.rectangle()
+			c_coords = center(x1=r_i.left, y1=r_i.top, x2=r_i.right, y2=r_i.bottom)
+			pag.click(*c_coords)
+			if self.win32.SignIn.exists(10, 0.09):
+				self.win32.SignIn.wait('ready', 2, 0.09)
+				self._logged_in = False
+				self._user = None
+				log.info(f"Successfully logged out")
+				sleep(4)
+				return True
+			else:
+				log.warning(f"Logout attempt unsuccessful")
+		return False
+
+	def quick_log_in(self, usr: str = username, pwd: str = password) -> bool:
+		if not self.logged_in and self.win32.SignIn.exists(1, 0.09):
+			log.info("SyteLine not logged in, starting login procedure")
+			self.win32.SignIn.UserLoginEdit.set_text(usr)
+			self.win32.SignIn.PasswordEdit.set_text(pwd)
+			self.win32.SignIn.set_focus()
+			self.win32.SignIn.OKButton.click()
+			for i in range(8):
+				top_window = self.win32.top_window()
+				top_window.send_keystrokes('{ENTER}')
+			sleep(0.5)
+			log.debug(self.win32.top_window().texts()[0])
+			if (not self.win32.SignIn.exists(1, 0.09)) or ('(EM)' in self.win32.top_window().texts()[0]):
+				self._logged_in = True
+				self._user = usr
+				log.info(f"Successfully logged in as '{self._user}'")
+				return True
+			else:
+				log.warning(f"Login attempt as '{usr}' unsuccessful")
+		return False
+
+	def quick_log_out(self) -> bool:
+		if not self.win32.SignIn.exists(1, 0.09):
+			log.info("SyteLine logged in, starting logout procedure")
+			sl_uia = self.uia.window(title_re=SYTELINE_WINDOW_TITLE)
+			so = [item for item in sl_uia.MenuBar.items() if item.texts()[0].lower().strip() == 'sign out'][0]
+			sl_uia.set_focus()
+			r_i = so.rectangle()
+			c_coords = center(x1=r_i.left, y1=r_i.top, x2=r_i.right, y2=r_i.bottom)
+			pag.click(*c_coords)
+			sleep(0.5)
+			log.debug(self.win32.top_window().texts()[0])
+			if 'Sign In' in self.win32.top_window().texts()[0]:
+				self._logged_in = False
+				log.info(f"Successfully logged out")
+				return True
+			else:
+				log.warning(f"Logout attempt unsuccessful")
+		return False
+
+	def move_and_resize(self, left: int, top: int, right: int, bottom: int):
+		coord = {'left': left, 'top': top, 'right': right, 'bottom': bottom}
+		win32gui.MoveWindow(self.hwnd, int(coord['left']) - 7, coord['top'], coord['right'] - coord['left'],
+		                    coord['bottom'] - coord['top'], True)
+
+	def open_form(self, *names):
+		open_forms = self.forms.keys()
+		log.debug(f"Opening form(s): {', '.join(names)}")
+		for name in names:
+			if name in open_forms:
+				continue
+			sl_win = self.win32.window(title_re=SYTELINE_WINDOW_TITLE)
+			sl_win.send_keystrokes('^o')
+			self.win32.SelectForm.AllContainingEdit.set_text(name)
+			self.win32.SelectForm.set_focus()
+			self.win32.SelectForm.FilterButton.click()
+			common_controls.ListViewWrapper(self.win32.SelectForm.ListView).item(name).click()
+			self.win32.SelectForm.set_focus()
+			self.win32.SelectForm.OKButton.click()
+			log.debug(f"Form '{name}' opened")
+			sleep(4)
+
+	def quick_open_form(self, *names):
+		for name in names:
+			sl_win = self.win32.window(title_re=SYTELINE_WINDOW_TITLE)
+			sl_win.send_keystrokes('^o')
+			self.win32.SelectForm.AllContainingEdit.set_text(name)
+			self.win32.SelectForm.set_focus()
+			self.win32.SelectForm.FilterButton.click()
+			common_controls.ListViewWrapper(self.win32.SelectForm.ListView).item(name).click()
+			self.win32.SelectForm.set_focus()
+			self.win32.SelectForm.OKButton.click()
+			sleep(2)
+
+	def find_value_in_collection(self, collection: str, property_: str, value, case_sensitive=False):
+		sl_win = self.win32.window(title_re=SYTELINE_WINDOW_TITLE)
+		sl_win.send_keystrokes('%e')
+		sleep(0.02)
+		sl_win.send_keystrokes('v')
+		find_window = self.win32['Find']
+		find_window.InCollectionComboBox.select(collection)
+		find_window.InPropertyComboBox.select(property_)
+		find_window.FindEdit.set_text(value)
+		if case_sensitive:
+			find_window.CaseSensitiveButton.check()
+		find_window.set_focus()
+		find_window.OKButton.click()
+
+	def change_form(self, name: str):
+		forms = self.forms
+		if name in forms:
+			if name == self.get_focused_form():
+				pass
+			else:
+				forms[name].select()
+		else:
+			raise ValueError(f"Form '{name}' not open")
+
+	@property
+	def forms(self) -> Dict[str, uia_controls.MenuItemWrapper]:
+		# TODO: Possible form object including 'is_checked' property
+		sl_uia = self.uia.window(title_re=SYTELINE_WINDOW_TITLE)
+		retval = {REGEX_WINDOW_MENU_FORM_NAME.search(item.texts()[0]).group(1): item for item in
+		          sl_uia.WindowMenu.items() if
+		          (item.texts()[0].lower() != 'cascade') and (item.texts()[0].lower() != 'tile') and (
+			          item.texts()[0].lower() != 'close all')}
+		log.debug(f"Forms open: {', '.join(retval.keys())}")
+		return retval
+
+	@property
+	def logged_in(self):
+		if self.win32.SignIn.exists(10, 0.09):
+			self._logged_in = False
+		else:
+			self._logged_in = True
+		return self._logged_in
+
+	@property
+	def hwnd(self):
+		return self.win32.top_window().handle
+
+	@property
+	def window_rect(self):
+		rect = win32gui.GetWindowRect(self.hwnd)
+		return int(rect[0]), int(rect[1]), int(rect[2]), int(rect[3])
+
+	@property
+	def size(self):
+		x, y = self.window_rect[:2]
+		w = abs(self.window_rect[2] - x)
+		h = abs(self.window_rect[3] - y)
+		return w, h
+
+	@size.setter
+	def size(self, value):
+		w, h = value
+		x, y = self.location
+		win32gui.MoveWindow(self.hwnd, x, y, w, h, True)
+
+	@property
+	def location(self):
+		return self.window_rect[:2]
+
+	@location.setter
+	def location(self, value):
+		x, y = value
+		w, h = self.size
+		win32gui.MoveWindow(self.hwnd, x, y, w, h, True)
+
+	def get_focused_form(self) -> str:
+		"""0x100000  1048576  0b100000000000000000000  focusable
+		   0x100004  1048580  0b100000000000000000100  focusable, focused
+		   0x100084  1048708  0b100000000000010000100  focusable, focused, hot-tracked
+		   0x100094  1048724  0b100000000000010010100  focusable, focused, hot-tracked, checked
+		   0x100010  1048592  0b100000000000000010000  focusable, checked
+
+		   0x000004  0000004  0b000000000000000000100  focused
+		   0x000010  0000016  0b000000000000000010000  checked
+		   0x000040  0000064  0b000000000000001000000  read-only
+		   0x000080  0000128  0b000000000000010000000  hot-tracked
+		   0x100000  1048576  0b100000000000000000000  focusable"""
+		for item in self.forms.items():
+			name, form = item
+			state = form.legacy_properties()['State']
+			bin_state = bin(state)
+			log.debug(f"Form State: {state}")
+			if int(bin_state[-5], base=2):  # If the fifth bit == 1
+				return name
+
+	def verify_form(self, name: str):
+		if name not in self.forms.keys():
+			self.open_form(name)
+		if name != self.get_focused_form():
+			self.change_form(name)
+
+	def get_popup(self, timeout=2) -> Dialog:
+		dlg = self.win32.window(class_name="#32770")
+		if dlg.exists(timeout, 0.09):
+			title = ''.join(text.strip() for text in dlg.texts())
+			text = ''.join(text.replace('\r\n\r\n', '\r\n').strip() for cls in dlg.children() if
+			               cls.friendly_class_name() == 'Static' for text in cls.texts())
+			buttons = {text.strip(punctuation + ' '): cls for cls in dlg.children() if
+			           cls.friendly_class_name() == 'Button' for text in cls.texts()}
+			return Dialog(dlg, title, text, buttons)
+		else:
+			return None
+
+	def get_user(self):
+		sl_win = self.win32.window(title_re=SYTELINE_WINDOW_TITLE)
+		sl_uia = self.uia.window(title_re=SYTELINE_WINDOW_TITLE)
+		self.quick_open_form("User Information")
+		self._user = sl_win.UserIDEdit.texts()[0]
+		sl_uia.CancelCloseButton.click()
+
+
+class PuppetMaster:  # THINK: Make iterable?
+	_children = set()
+	pids = defaultdict(list)
+
+	# _instance = None  # Keep instance reference
+	#
+	# def __new__(cls, *args, **kwargs):
+	# 	"""Singleton"""
+	# 	if not cls._instance:
+	# 		cls._instance = cls.__new__(cls, *args, **kwargs)
+	# 	return cls._instance
+
+	def __init__(self, fp, app_count: int = 0, skip_opt: bool = False):
+		if app_count > 0:
+			for i in range(app_count):
+				app = self.grab(fp)
+				if not app:
+					break
+			app_count -= len(self.children())
+			for i in range(app_count):
+				app = self.start(fp)
+				if not app:
+					break
+			if app_count > 0:
+				return None
+			if not skip_opt:
+				self.optimize_screen_space()
+
+	def start(self, fp: Union[str, pathlib.Path], name: str = None) -> 'Puppet':
+		try:
+			if name is None:
+				base_name = pathlib.Path(str(fp)).stem[:4].lower()
+				name = base_name + '1'
+				count = 2
+				while name in self._children:
+					name = base_name + str(count)
+					count += 1
+			app = Application.start(str(fp))
+			app.win32.top_window().exists()
+		except Exception:
+			return None
+		else:
+			self.__setattr__(name, self.Puppet(app, name))
+			self.pids[fp].append(self.__getattribute__(name).app.pid)
+			self._children.add(name)
+			return self.__getattribute__(name)
+
+	def grab(self, fp: Union[str, pathlib.Path]) -> 'Puppet':
+		try:
+			base_name = pathlib.Path(str(fp)).stem[:4].lower()
+			name = base_name + '1'
+			count = 2
+			while name in self._children:
+				name = base_name + str(count)
+				count += 1
+			app = Application.connect(pathlib.Path(str(fp)), self.pids[fp])
+			app.win32.top_window().exists()
+		except Exception:
+			return None
+		else:
+			self.__setattr__(name, self.Puppet(app, name))
+			self.pids[fp].append(self.__getattribute__(name).app.pid)
+			self._children.add(name)
+			return self.__getattribute__(name)
+
+	def optimize_screen_space(self, win_size: Tuple[int, int] = (1024, 750), screen_pref: str = None):
+		# {l:2017 t:122 r:3040 b:872}
+		all_scrn = enumerate_screens()
+		if screen_pref.lower() == 'left':
+			all_scrn = all_scrn[:1]
+		elif screen_pref.lower() == 'right':
+			all_scrn = all_scrn[-1:]
+		windows = len(self.children())
+		m = windows // len(all_scrn) if (windows // len(all_scrn)) > 1 else 2
+		for i, ch in enumerate(self.children()):
+			ch.app.size = win_size
+			scrn = all_scrn[i // m]
+			x_step = ((scrn[2] - scrn[0]) - win_size[0]) // (m - 1)
+			y_step = ((scrn[3] - scrn[1]) - win_size[1])
+			if (((scrn[2] - scrn[0]) - win_size[0]) / (m - 1)) - x_step >= 0.5:
+				x_step += 1
+			x = scrn[0] + (x_step * (i % m))
+			y = scrn[1] + (y_step * ((i % m) % 2))
+			ch.app.location = (x, y)
+
+	def children(self) -> List['Puppet']:
+		return [self.__getattribute__(ch) for ch in self._children]
+
+	def apply_all(self, func: Callable, *args, **kwargs):
+		with ThreadPoolExecutor(max_workers=len(self.children())) as e:
+			for ch in self.children():
+				e.submit(func, ch, *args, **kwargs)
+				sleep(1)
+
+	def get_puppet(self, ppt: Union[str, int, 'Puppet']) -> 'Puppet':
+		if type(ppt) is str:
+			if ppt in self._children:
+				ppt = self.__getattribute__(ppt)
+			elif ppt.startswith('ppt') and ppt[3:].isnumeric():
+				ppt = int(ppt[3:])
+			else:
+				raise ValueError()
+		if type(ppt) is int:
+			if 0 <= ppt < len(self.children()):
+				ppt = self.children()[ppt]
+			else:
+				raise ValueError()
+		if ppt is not None and ppt not in self.children():
+			raise ValueError()
+		if ppt is None:
+			for ch in self.children():
+				# print(ch, ch.status)
+				if ch.status == 'Idle':
+					ppt = ch
+					break
+			else:
+				raise ValueError()
+		return ppt
+
+	def wait_for_puppets(self, puppets, max_time=10):
+		puppets = [self.get_puppet(ppt) for ppt in puppets]
+		res = []
+		start_time = datetime.datetime.now()
+		while len(res) < len(puppets):
+			if __debug__:
+				pass
+			# print(res, (datetime.datetime.now() - start_time).total_seconds())
+			sleep(0.001)
+			for ppt in puppets:
+				res2 = ppt.get_output()
+				if res2:
+					res.append(res2)
+			if (datetime.datetime.now() - start_time).total_seconds() > max_time:
+				raise TimeoutError()
+
+	class Puppet(threading.Thread):
+		"""Thread class with a stop() method. The thread itself has to check
+		regularly for the stopped() condition."""
+
+		def __bool__(self):
+			return True
+
+		def target(self):
+			while True:
+				try:
+					command, args, kwargs = self.q_in.get_nowait()
+				except queue.Empty:
+					observer_affect()
+				else:
+					self.status = 'Busy'
+					self.q_out.put_nowait(command(self, *args, **kwargs))
+				self.status = 'Idle'
+
+		def __init__(self, app: Application, name):
+			self.q_in = queue.Queue()
+			self.q_out = queue.Queue()
+			self.app = app
+			self.status = 'Idle'
+			super().__init__(target=self.target, daemon=True, name=name)
+			self.start()
+			self._stop_event = threading.Event()
+
+		def set_input(self, func: callable, *args, **kwargs):
+			self.q_in.put_nowait((func, tuple(arg for arg in args), {k: v for k, v in kwargs.items()}))
+
+		def get_output(self):
+			try:
+				value = self.q_out.get_nowait()
+			except queue.Empty:
+				return None
+			else:
+				return value
+
+		def stop(self):
+			self._stop_event.set()
+
+		def stopped(self):
+			return self._stop_event.is_set()
+
+	def __enter__(self):
+		return self
+
+	def __exit__(self, type, value, traceback):
+		procs = [ch.app for ch in self.children()]
+		for p in procs:
+			# print(p)
+			try:
+				p.quick_log_out()
+			except Exception:
+				pass
+			p.terminate()
+		gone, still_alive = psutil.wait_procs(procs, timeout=3)
+		for p in still_alive:
+			# print(p)
+			p.kill()
+
+
+class SyteLinePupperMaster(PuppetMaster):
+	def __init__(self, n: int, fp=application_filepath, skip_opt: bool = True, forms=[]):
+		# print(n, forms)
+		user_list = [username, 'BISync01', 'BISync02', 'BISync03']
+		pwd_list = [password, 'Trans@cti0nsN0', 'Re@s0nsN0', 'Gue$$!ngN0']
+		super().__init__(fp, n, skip_opt)
+		for ppt, usr, pwd in zip(self.children(), user_list, pwd_list):
+			ppt.set_input(lambda x, y: x.app.quick_log_in(*y), [usr, pwd])
+		self.wait_for_puppets(self.children(), 4)
+		self.optimize_screen_space(screen_pref='left')
+		if forms:
+			for form, ppt in zip(forms, self.children()):
+				if type(form) is str:
+					form = [form]
+				ppt.set_input(lambda x, y: x.app.quick_open_form(*y), form)
+				sleep(1)
+			while not all(ppt.status == 'Idle' for ppt in self.children()):
+				observer_affect()
+
+	@classmethod
+	def for_processes(cls, *processes):
+		return cls(len([proc for proc in processes]), forms=[proc.required_forms for proc in processes])
+
+	@classmethod
+	def for_forms(cls, *forms):
+		return cls(len([form for form in forms]), forms=[form for form in forms])
+
+	def open_forms(self, *names):
+		with ThreadPoolExecutor(max_workers=len(names)) as e:
+			for ppt, forms in zip(self.children(), names):
+				e.submit(lambda x, y: x.quick_open_form(*y), ppt.app, forms)
+				sleep(0.5)
+		sleep(1)
+
+	def run_process(self, process, ppt: Union[str, int, 'Puppet'] = None) -> bool:
+		"""Run process, return whether it was successful or not."""
+		ppt = self.get_puppet(ppt)
+		print(dir(process))
+		if hasattr(process, 'get_units'):
+			units = process.get_units(exclude=[sn for ch in self.children() for sn in ch.units])
+			if units:
+				ppt.run_process(process, {unit.serial_number for unit in units}, units)
+				return ppt
+			return False
+		else:
+			ppt.run_process(process)
+			return ppt
+
+	class Puppet(PuppetMaster.Puppet):
+		def target(self):
+			while True:
+				self.status = 'Idle'
+				observer_affect()
+				try:
+					command, args, kwargs = self.q_in.get_nowait()
+				except queue.Empty:
+					observer_affect()
+				else:
+					self.status = 'Busy'
+					self.q_out.put_nowait(command(self, *args, **kwargs))
+					self.status = 'Idle'
+					self.units.clear()
+				self.status = 'Idle'
+
+		def __init__(self, app: Application, name):
+			self.units = set()
+			super().__init__(app, name)
+
+		def run_process(self, proc, unit_sn=None, *args, **kwargs):
+			self.q_in.put_nowait((proc.run, tuple(arg for arg in args), {k: v for k, v in kwargs.items()}))
+			if unit_sn:
+				self.units = {str(sn) for sn in unit_sn}
+
+
+class Timer:
+	def __init__(self, *, start_time=None):
+		self._start_time = start_time
+
+	@singledispatch
+	def start(self):
+		self._start_time = datetime.datetime.now()
+
+	@classmethod
+	def start(cls):
+		return cls(start_time=datetime.datetime.now())
+
+	def lap(self):
+		if self._start_time:
+			retval = datetime.datetime.now() - self._start_time
+			return retval
+		else:
+			return datetime.timedelta(0)
+
+	def reset(self):
+		self._start_time = None
+
+	def stop(self):
+		retval = self.lap()
+		self.reset()
+		return retval
+
+
+# THINK: Maybe Cell class?
+class Cell:
+	def __init__(self, cell: uia_controls.ListItemWrapper):
+		self.cell_control = cell
+		self.color = (255, 255, 255)
+		self.value = cell.legacy_properties()['Value'].strip()
+
+	def update_color(self):
+		rect = self.cell_control.rectangle()
+		scrn = get_screen_exact()
+		partial = np.array(scrn)[rect.top:rect.bottom, rect.left:rect.right]
+		count = Counter()
+		for y in range(partial.shape[0]):
+			for x in range(partial.shape[1]):
+				count[str(partial[y, x].tolist())] += 1
+		color_str = count.most_common(1)[0][0].strip('[] ').replace(', ', ',')
+		self.color = [int(x) for x in color_str.split(',')]
+		return self.color
+
+
+# THINK: Maybe Row class?
+class Row(UserDict):
+	def __init__(self, columns: Union[str, Iterable[str]]):
+		if type(columns) is str:
+			columns = [columns]
+		super().__init__((col, None) for col in columns)
+
+
+# THINK: Maybe Column class?
+class Column(UserList):
+	type_hierarchy = {0: lambda x: None, 1: bool, 2: int, 3: float}
+	type_hierarchy_r = {str(type(None)): 0, str(bool): 1, str(int): 2, str(float): 3}
+
+	def __init__(self, name, *args):
+		self.name = name
+		self._type_rank = 0
+		for arg in args:
+			self.type_rank = self.type_hierarchy_r[str(type(arg))]
+		super().__init__(args)
+
+	def update_types(self):
+		for i, val in enumerate(self.data):
+			self.data[i] = self.type_rank(val)
+
+	@property
+	def type_rank(self):
+		return self.type_hierarchy[self._type_rank]
+
+	@type_rank.setter
+	def type_rank(self, value):
+		assert type(value) is int
+		old_rank = self._type_rank
+		self._type_rank = max(self._type_rank, value)
+		if old_rank != self._type_rank:
+			self.update_types()
+
+	def __setitem__(self, i, value):
+		assert type(i) is int
+		type_num = self.type_hierarchy_r[str(type(value))]
+		self.type_rank = type_num
+		if type_num >= self._type_rank:
+			self.data[i] = self.type_rank(value)
+		elif value is None:
+			self.data[i] = value
+
+
+class DataGrid:
+	# TODO: Dynamic type checking for DataRow and DataColumn NamedTuple's
+	# TODO: General refinement/redundancy reduction
+	# TODO: __iter__ attribute iterates through grid much like numpy-array
+	# TODO: Maybe __contains__ returns all instances/first instance of value
+	# TODO: Auto-detect max number of rows
+	# TODO: Multi-threaded grid population
+	def __init__(self, grid: uia_controls.ListViewWrapper, columns: Union[str, Iterable[str]], row_limit: int):
+		if type(columns) is str:
+			columns = [columns]
+		self.grid_control = grid
+		self.row_limit = row_limit
+		DataRow = namedtuple('DataRow', field_names=[col.replace(' ', '_') for col in columns])
+		retval = [DataRow(**{col.replace(' ', '_'): (
+			self.get_cell_value(self._get_cell_control(row_index + self.get_row_index(1), col)),
+			self._get_cell_control(row_index + self.get_row_index(1), col)) for col in columns}) for row_index, i in
+		          enumerate(grid.children()[self.get_row_index(1):])]
+		# TODO: Row and column type setting based on populated cells
+		# self.DataRow = NamedTuple('DataRow', field_names=[col.replace(' ', '_') for col in columns])
+		self.DataRow = DataRow
+		self.DataColumn = namedtuple('DataRow', field_names=[f'Row{i}' for i in range(1, len(retval) + 1)])
+		self.grid = retval
+		old_rect = grid.rectangle()
+		h = self._get_row_control(self.top_row_index).rectangle().height()
+		self.visibility_window = {'left':   old_rect.left, 'top': old_rect.top - h, 'right': old_rect.right,
+		                          'bottom': old_rect.bottom}
+
+	@classmethod
+	def from_name(cls, app: Application, name: str, columns: Union[str, Iterable[str]], row_limit: int):
+		sl_uia = app.uia.window(title_re=SYTELINE_WINDOW_TITLE)
+		name_new = name.title().replace(' ', '')
+		grid = uia_controls.ListViewWrapper(sl_uia.__getattribute__(name_new).element_info)
+		return cls(grid, columns, row_limit)
+
+	@property
+	def top_row_index(self) -> int:
+		return self.get_row_index('Top Row')
+
+	def get_row_index(self, row: Union[str, int]) -> int:
+		if type(row) is str:
+			return self.grid_control.children_texts().index(row)
+		else:
+			return self.grid_control.children_texts().index(f"Row {row-1}")
+
+	def get_column_index(self, name: str) -> int:
+		"""top_row_index = self.get_row_index('Top Row')
+		children = self.grid_control.children()
+		child = children[top_row_index]
+		gen2_children_texts = child.children_texts()
+		col_index = gen2_children_texts.index(name)
+		return col_index"""
+		return self.grid_control.children()[self.top_row_index].children_texts().index(name)
+
+	def get_row_control(self, row: Union[str, int]) -> uia_controls.ListViewWrapper:
+		row_index = self.get_row_index(row)
+		return self._get_row_control(row_index)
+
+	def _get_row_control(self, row_index: int) -> uia_controls.ListViewWrapper:
+		"""children = self.grid_control.children()
+		new_row = children[row_index]
+		row_control = uia_controls.ListViewWrapper(new_row.element_info)
+		return row_control"""
+		return uia_controls.ListViewWrapper(self.grid_control.children()[row_index].element_info)
+
+	def get_cell_control(self, row: Union[str, int], col: str) -> uia_controls.ListItemWrapper:
+		row_index = self.get_row_index(row)
+		return self._get_cell_control(row_index, col)
+
+	def _get_cell_control(self, row_index: int, col: str) -> uia_controls.ListItemWrapper:
+		"""row = self._get_row_control(row_index)
+		item_index = self.get_column_index(col)
+		item = row.item(item_index)
+		element_info = item.element_info
+		return uia_controls.ListItemWrapper(element_info)"""
+		return uia_controls.ListItemWrapper(
+				self._get_row_control(row_index).item(self.get_column_index(col)).element_info)
+
+	def is_row_visible(self, row: Union[str, int]) -> bool:
+		row_index = self.get_row_index(row)
+		return self._is_row_visible(row_index)
+
+	def _is_row_visible(self, row_index: int) -> bool:
+		rect = self._get_row_control(row_index).rectangle()
+		h = rect.height() // 2
+		return ((self.visibility_window['bottom'] - h) > rect.top) and (
+			(self.visibility_window['top'] + h) < rect.bottom)
+
+	def get_cell_value(self, cell: uia_controls.ListItemWrapper) -> Any:
+		return self.adapt_cell(cell.legacy_properties()['Value'].strip())
+
+	@staticmethod
+	def adapt_cell(value):
+		if value == '(null)':
+			return None
+		elif value == 'False':
+			return False
+		elif value == 'True':
+			return True
+		else:
+			try:
+				retval = decimal.Decimal(value)
+			except decimal.InvalidOperation:
+				pass
+			else:
+				retval = retval.normalize()
+				if int(retval) == retval:
+					return int(retval)
+				else:
+					return float(retval)
+		return value
+
+	@staticmethod
+	def upper_center(x1: int, y1: int, x2: int, y2: int) -> Tuple[int, int]:
+		assert 0 < x1 < x2
+		assert 0 < y1 < y2
+		x2 -= x1
+		y2 -= y1
+		return x1 + (x2 // 2), y1 + (y2 // 3)
+
+	def get_column(self, column: Union[str, int]):
+		if type(column) is str:
+			return self.DataColumn(*[row.__getattribute__(column) for row in self.grid])
+		else:
+			return self.DataColumn(*[row[column] for row in self.grid])
+
+	def get_row(self, row_num: int):
+		return self.grid[row_num - 1]
+
+	def get_cell(self, column: Union[str, int], row_num: int) -> uia_controls.ListItemWrapper:
+		if type(column) is str:
+			return self.grid[row_num - 1].__getattribute__(column.replace(' ', '_'))[1]
+		else:
+			return self.grid[row_num - 1][column][1]
+
+	def __getitem__(self, key) -> Any:
+		# TODO: singular key -> regular getitem method
+		column, row_num = key
+		return self.get_cell_value(self.get_cell(column, row_num))
+
+	def __setitem__(self, key, value) -> bool:
+		# TODO: singular key -> regular setitem method
+		column, row_num = key
+		if not self.is_row_visible(row_num):
+			pag.scroll(-20)
+		if not self.is_row_visible(row_num):
+			pag.scroll(40)
+		if not self.is_row_visible(row_num):
+			return False
+		cell = self.get_cell(column, row_num)
+		rect = cell.rectangle()
+		x, y = self.upper_center(rect.left, rect.top, rect.right, rect.bottom)
+		pag.click(x, y)
+		sleep(0.2)
+		pag.typewrite(str(value))
+		sleep(0.2)
+
+	# TODO: Verify correct row creation
+
+
+# class Singleton(type):
+# 	"""
+# 	Define an Instance operation that lets clients access its unique
+# 	instance.
+# 	"""
+#
+# 	def __init__(cls, name, bases, attrs, **kwargs):
+# 		super().__init__(name, bases, attrs)
+# 		cls._instance = None
+#
+# 	def __call__(cls, *args, **kwargs):
+# 		if cls._instance is None:
+# 			cls._instance = super().__call__(*args, **kwargs)
+# 		return cls._instance
+#
+# class MyClass():
+# 	"""
+# 	Example class.
+# 	"""
+#
+# 	pass
+""""""
+"""reason_gen	description
+1000	No Reason Given
+10000	Unable to Duplicate Issue.
+1001	Returned for Testing/Updates
+1002	Defective
+1003	Returned for transmitter problem
+1004	Returned for FMD problem
+1005	Will not call in/out
+1006	Change Phone Number
+1007	Excessive Leaves/Enters (TIR/TOR)
+1008	No Enters/Leaves
+1009	No power up, no lights
+1010	Missed Callback/late (MCL)
+1011	False leaves/enters (TIR/TOR)
+1012	Host Busy Messages (HBS)
+1013	No location verify
+1014	Speaker failure
+1016	Low Batt Msg (LBR, CBL, TEB)
+1017	Power Connection Broken
+1018	False Tampers (TCS/TOS)
+1019	Will Not Tamper
+1020	Will Not Activate, Dead
+1021	Will Not Find Transmitter (TNF)
+1022	Default Serial Number
+1023	Rattles
+1024	Water Damage
+1025	Client/Case Damage
+1026	Calibration
+1027	Communication Problems
+1028	Keyswitch Broken
+1029	Will Not Transmit
+1030	Smoking/Burnt Transformer
+1031	Solenoid problem (VCE)
+1032	Will Not Enroll
+1033	Phone Jack Broken
+1034	Voice Module Failure (VMF)
+1035	Room Noise Failure
+1036	Storm/Lightning Damage
+1037	Unit Burned
+1039	Reset problems
+1040	Will not do Alcohol Test
+1041	Time Stamping Errors
+1042	Enrollment Error/Problems
+1043	Cheek Sensor Problems
+1045	Duplicate Serial Number
+1046	Case Tamper
+1047	HG  swap
+1048	Return of Demo Equipment
+1049	End of Lease
+1050	RTS
+1051	Suspect NTC;Y1
+1052	Excess Inventory
+1053	Failure Analysis  *****
+1054	Switching to GWOW
+1055	Lost Contract
+1056	"out of box" failure
+1057	No GPS signal
+1058	Returned for Tin Whiskers
+1059	Explain - for CBS purposes  *****
+1060	Not responding to officer key
+1061	Stuck in cell phone mode
+1062	Missing Charger XFMR
+1063	Missing Charge Cord
+1064	Missing Black Zipper Case: Soberlink
+1068	Stripped Screws
+1069	No-Motion Failure
+1100	TDA 375
+1101	Malfunction of push button
+1102	Malfunction of transformer
+1103	No lights blinking
+1104	Stuck ADM
+1105	Broken ADM
+1106	Tamper won't clear
+1107	Absconded
+1108	Battery error
+1109	Reduced range
+1110	On enter fail
+1111	No cellular signal
+1112	Beacon failed
+1113	Return to BI for maintenance
+1114	Excessive Tamper Alerts
+1115	Will Not Charge
+1116	Will not hold a charge"""
+
+
+# - - - - - - - - - - - - - - - - - - - FUNCTIONS - - - - - - - - - - - - - - - - - - - -  # THINK: Maybe move to tools?
+def process_pid(filename: str, exclude: Optional[Union[int, Iterable[int]]] = None) -> int:
+	if isinstance(filename, pathlib.Path):
+		filename = filename.name
+	for proc in psutil.process_iter():
+		try:
+			if exclude is not None and ((isinstance(exclude, int) and proc.pid == exclude) or proc.pid in exclude):
+				continue
+			if proc.name().lower() == filename.lower():
+				return proc.pid
+		except psutil.NoSuchProcess:
+			pass
+	return None
+
+
+def is_running(filename: str, exclude: Optional[Union[int, Iterable[int]]] = None) -> bool:
+	# processes = win32process.EnumProcesses()    # get PID list
+	# for pid in processes:
+	# 	try:
+	# 		if exclude is not None and ((type(exclude) is int and exclude == pid) or (pid in exclude)):
+	# 			continue
+	# 		handle = win32api.OpenProcess(win32con.PROCESS_ALL_ACCESS, False, pid)
+	# 		exe = win32process.GetModuleFileNameEx(handle, 0)
+	# 		if exe.lower() == filename.lower():
+	# 			return True
+	# 	except:
+	# 		pass
+	# return False
+	if isinstance(filename, pathlib.Path):
+		filename = filename.name
+	for proc in psutil.process_iter():
+		try:
+			if exclude is not None and ((isinstance(exclude, int) and proc.pid == exclude) or proc.pid in exclude):
+				continue
+			if proc.name().lower() == filename.lower():
+				return True
+		except (psutil.NoSuchProcess, psutil.AccessDenied):
+			pass
+	return False
+
+
+@legacy
+def _adapt_cell(x):
+	if x == '(null)':
+		return None
+	elif x == 'False':
+		return False
+	elif x == 'True':
+		return True
+	elif '.' in x:
+		if x.rsplit('.', 1)[0].isnumeric():
+			return int(x.rsplit('.', 1)[0].isnumeric())
+	else:
+		return x
+
+
+@legacy
+def access_grid(grid: uia_controls.ListViewWrapper, columns: Union[str, Iterable[str]],
+                condition: Optional[Tuple[str, Any]] = None, requirement: str = None) -> List[NamedTuple]:
+	if type(columns) is str:
+		columns = [columns]
+	# TODO: regex datetime
+	# TODO: better condition handling (exec string?)
+	DataRow = namedtuple('DataRow', field_names=[col.replace(' ', '_') for col in columns])
+	if requirement is not None:
+		if condition is None:
+			retval = [DataRow(**{col.replace(' ', '_'): _adapt_cell(uia_controls.ListViewWrapper(row.element_info).item(
+					grid.children()[grid.children_texts().index('Top Row')].children_texts().index(
+							col)).legacy_properties()['Value'].strip()) for col in columns}) for row in
+			          grid.children()[grid.children_texts().index('Row 0'):] if _adapt_cell(
+						uia_controls.ListViewWrapper(row.element_info).item(
+								grid.children()[grid.children_texts().index('Top Row')].children_texts().index(
+										requirement)).legacy_properties()['Value'].strip()) != None]
+		else:
+			retval = [DataRow(**{col.replace(' ', '_'): _adapt_cell(uia_controls.ListViewWrapper(row.element_info).item(
+					grid.children()[grid.children_texts().index('Top Row')].children_texts().index(
+							col)).legacy_properties()['Value'].strip()) for col in columns}) for row in
+			          grid.children()[grid.children_texts().index('Row 0'):] if _adapt_cell(
+						uia_controls.ListViewWrapper(row.element_info).item(
+								grid.children()[grid.children_texts().index('Top Row')].children_texts().index(
+										condition[0])).legacy_properties()['Value'].strip()) == condition[1] and _adapt_cell(
+						uia_controls.ListViewWrapper(row.element_info).item(
+								grid.children()[grid.children_texts().index('Top Row')].children_texts().index(
+										requirement)).legacy_properties()['Value'].strip()) != None]
+	else:
+		if condition is None:
+			retval = [DataRow(**{col.replace(' ', '_'): _adapt_cell(uia_controls.ListViewWrapper(row.element_info).item(
+					grid.children()[grid.children_texts().index('Top Row')].children_texts().index(
+							col)).legacy_properties()['Value'].strip()) for col in columns}) for row in
+			          grid.children()[grid.children_texts().index('Row 0'):]]
+		else:
+			retval = [DataRow(**{col.replace(' ', '_'): _adapt_cell(uia_controls.ListViewWrapper(row.element_info).item(
+					grid.children()[grid.children_texts().index('Top Row')].children_texts().index(
+							col)).legacy_properties()['Value'].strip()) for col in columns}) for row in
+			          grid.children()[grid.children_texts().index('Row 0'):] if _adapt_cell(
+						uia_controls.ListViewWrapper(row.element_info).item(
+								grid.children()[grid.children_texts().index('Top Row')].children_texts().index(
+										condition[0])).legacy_properties()['Value'].strip()) == condition[1]]
+	log.debug(f"Grid Accessed: {retval}")
+	return retval
+
+
+def _check_units(sql, status: str, table: str = 'PyComm', group_serial: bool = False) -> int:
+	"""Count the number of entries in SQL connection and table that match status. Return integer."""
+	distinct = ''
+	table = str(table)
+	if group_serial:
+		distinct = 'DISTINCT '
+	return \
+		sql.execute(f"SELECT COUNT({distinct}[Serial Number]) as [SN_Count] FROM {table} WHERE [Status] = '{status}'")[  # FIXME: SQL command w/ parameters
+			0]
+
+
+def check_serial_number(sql, serial_number: str, status: str, table: str = 'PyComm') -> str:
+	"""Verify that serial number hasn't been skipped. Return string."""
+	rows = sql.execute(f"SELECT DISTINCT [Status] FROM {table} WHERE [Serial Number] = '{serial_number}'",  # FIXME: SQL command w/ parameters
+	                   fetchall=True)
+	for row in rows:
+		if status not in row.Status:
+			continue
+		elif (row.Status != status) and (status in row.Status):
+			break
+	else:
+		return status
+	return row.Status
+
+
+# Not one Item Price exists for Item that has
+@singledispatch
+def center(arg, y1: int, x2: int, y2: int) -> Tuple[int, int]:
+	"""Return the center of given coordinates.
+	:rtype: tuple
+	"""
+	assert 0 < arg < x2
+	assert 0 < y1 < y2
+	x2 -= arg
+	y2 -= y1
+	return arg + (x2 // 2), y1 + (y2 // 2)
+
+@center.register(int)
+def _(arg, y1: int, x2: int, y2: int) -> Tuple[int, int]:
+	assert 0 < arg < x2
+	assert 0 < y1 < y2
+	x2 -= arg
+	y2 -= y1
+	return arg + (x2 // 2), y1 + (y2 // 2)
+
+# @center.register(RECT)
+@center.register(base_wrapper)
+def _(arg) -> Tuple[int, int]:
+	x1, y1, x2, y2 = arg.rectangle().left, arg.rectangle().top, arg.rectangle().right, arg.rectangle().bottom
+	x2 -= x1
+	y2 -= y1
+	return x1 + (x2 // 2), y1 + (y2 // 2)
+
+# noinspection SpellCheckingInspection
+def sigfig(template, x):
+	x_str, y_str = map(str, [template, x])
+	x_len = len(x_str.split('.', 1)[1].strip())
+	y_sub1, y_sub2 = y_str.split('.', 1)
+	y_sub2 = y_sub2.ljust(x_len, '0')
+	y_new = eval(f"{y_sub1}.{y_sub2[:x_len]}")
+	if len(y_sub2) > x_len and eval(y_sub2[x_len]) >= 5:
+		val = 10 ** x_len
+		y_new = ((y_new * val) + 1) / val
+	return y_new
+
+
+def get_screen_exact():
+	sleep(0.05)
+	pag.press('printscreen')
+	sleep(0.1)
+	return ImageGrab.grabclipboard()
+
+
+def get_screen_size() -> List[Tuple[int, int]]:
+	size1 = get_screen_exact().size
+	size2 = ImageGrab.grab().size
+	return [size2] * (size1[0] // size2[0])
+
+
+def count_screens() -> int:
+	return len(get_screen_size())
+
+
+def total_screen_space() -> Tuple[int, int]:
+	w = 0
+	for scrn in get_screen_size():
+		w += scrn[0]
+		h = scrn[1]
+	return (w, h)
+
+
+def enumerate_screens() -> List[Tuple[int, int, int, int]]:
+	total = total_screen_space()
+	step = total[0] // count_screens()
+	return [(x, 0, x + step, total[1]) for x in range(0, total[0], step)]
+
+
+def parse_numeric_ranges(x: Union[str, List[int]], sep: str = ',') -> List[Tuple[int, int]]:
+	"""Inclusive (min, max) range parser"""
+	nums = sorted([int(y) for y in x.split(sep)]) if type(x) is str else sorted(x)
+	retval = []
+	temp_set = set([])
+	for x in nums:
+		if not temp_set:
+			temp_set.add(x)
+		elif max(temp_set) + 1 == x:
+			temp_set.add(x)
+		else:
+			if len(temp_set) > 1:
+				retval.append((min(temp_set), max(temp_set)))
+			else:
+				retval.append((max(temp_set), max(temp_set)))
+			temp_set = {x}
+	else:
+		if len(temp_set) > 1:
+			retval.append((min(temp_set), max(temp_set)))
+		elif len(temp_set) == 1:
+			retval.append((max(temp_set), max(temp_set)))
+	return retval
+
+
+def camelcase_splitter(text: str) -> str:
+	return ''.join(y if not (i > 0 and text[i - 1].islower() and text[i].isupper()) else (' ' + y) for i, y in enumerate(text))
+
+
+def date_string(dt: datetime.datetime, century: bool = False) -> str:
+	return dt.strftime("%m/%d/%Y") if century else dt.strftime("%m/%d/%y")
+
+
+def time_string(dt: datetime.datetime, military: bool = True) -> str:
+	return dt.strftime("%H:%M:%S") if military else dt.strftime("%I:%M:%S %p")
+
+
+def week_number(dt: datetime.datetime, start: str = 'S') -> int:
+	values = {'M': 0, 'S': 1}
+	start = start.upper()
+	if start not in values:
+		raise ValueError()  # TODO: Specify error
+	return int(dt.strftime("%U")) if values[start] else int(dt.strftime("%W"))
+
+
+def weekday_string(dt: datetime.datetime, abbreviated: bool = True) -> str:
+	return dt.strftime("%a") if abbreviated else dt.strftime("%A")
+
+
+def month_string(dt: datetime.datetime, abbreviated: bool = True) -> str:
+	return dt.strftime("%b") if abbreviated else dt.strftime("%B")
+
+
+def pprint_dict(text: Dict[str, Union[Any, Tuple[Any, int]]], justify_keys: int = 0, justify_values: int = 0):
+	warning_string = (' ' * (justify_keys + justify_values + 1)) + '<!WARNING!> {} OVER THRESHOLD <!WARNING!>'
+
+	def modify(x):
+		if type(x) is str:
+			x = camelcase_splitter(x)
+		if type(x) is datetime.datetime:
+			x = date_string(x)
+		return x
+
+	max_key_length = max((len(str(modify(k))) for k in text.keys()))
+	if all(type(t) is tuple for t in text.values()):
+		max_value_length = max((len(str(modify(v[0]))) for v in text.values()))
+		if justify_keys and justify_values:
+			[print(str(modify(k) + ':').ljust(max_key_length + justify_keys), str(modify(v[0])).rjust(max_value_length + justify_values) + (warning_string.format(v[1]) if v[1] else '')) for k, v in
+			 text.items()]
+		elif justify_keys:
+			[print(str(modify(k) + ':').ljust(max_key_length + justify_keys), str(modify(v[0])) + (warning_string.format(v[1]) if v[1] else '')) for k, v in text.items()]
+		elif justify_values:
+			[print(str(modify(k) + ':'), str(modify(v[0])).rjust(max_value_length + justify_values) + (warning_string.format(v[1]) if v[1] else '')) for k, v in text.items()]
+		else:
+			[print(str(modify(k) + ':'), str(modify(v))) for k, v in text.items()]
+	else:
+		max_value_length = max((len(str(modify(v))) for v in text.values()))
+		if justify_keys and justify_values:
+			[print(str(modify(k) + ':').ljust(max_key_length + justify_keys), str(modify(v)).rjust(max_value_length + justify_values)) for k, v in text.items()]
+		elif justify_keys:
+			[print(str(modify(k) + ':').ljust(max_key_length + justify_keys), str(modify(v))) for k, v in text.items()]
+		elif justify_values:
+			[print(str(modify(k) + ':'), str(modify(v)).rjust(max_value_length + justify_values)) for k, v in text.items()]
+		else:
+			[print(str(modify(k) + ':'), str(modify(v))) for k, v in text.items()]
+
+
+# def someHotSpotCallable(func: Callable):
+# 	# Deterministic profiler
+# 	def _my_decorator(*args, **kwargs):
+# 		prof = pprofile.Profile()
+# 		with prof():
+# 			func(*args, **kwargs)
+# 		prof.print_stats()
+# 	return _my_decorator
+#
+# def someOtherHotSpotCallable(func: Callable):
+# 	# Statistic profiler
+# 	def _my_decorator(*args, **kwargs):
+# 		prof = pprofile.StatisticalProfile()
+# 		with prof(period=0.001, single=True):
+# 			func(*args, **kwargs)
+# 		prof.print_stats()
+# 	return _my_decorator
+def someHotSpotCallable(func: Callable, *args, **kwargs):
+	# Deterministic profiler
+	prof = pprofile.Profile()
+	with prof():
+		func(*args, **kwargs)
+	prof.print_stats()
+
+
+def someOtherHotSpotCallable(func: Callable, *args, **kwargs):
+	# Statistic profiler
+	prof = pprofile.StatisticalProfile()
+	with prof(period=0.001, single=True):
+		func(*args, **kwargs)
+	prof.print_stats()
+
+
+# THINK: New type for type annotating that specifies range of possible return values(for overloading)?
+# example 1: arg1 -> string.length(5) | arg2 -> string.length(8)
+# example 2: arg1 -> int_range(00, 01, …, 23) | arg2 -> int_range(01, 02, …, 12)
+
+# THINK: New type for type annotating that specifies range of possible argument values(for overloading)?
+# example 1: int_range(00, 01, …, 11) -> retval else raise Index/Type/ValueError
+# example 2: possible_args('S', 'M') -> retval else raise Index/Type/ValueError
+
+# THINK: Functions within argument, ie str.upper() -> performs upper() on provided argument, ensuring specific case
+# TODO: Test possible solution: Decorators, wrapping with
+
+# THINK: Functions within retval, ie int() -> performs int() on provided retval, ensuring specific result
+# TODO: Possible solution: Decorators, wrapping with
+
+
+# TODO: When positional-only arguments are finally added
+# PEP 457: https://www.python.org/dev/peps/pep-0457/
+"""
+def sql_connect(cls, [address: str, username: str, password: str,] database: str, [detect_types: int = 0,] *, key: str, legacy_encryption: bool = True, quiet: bool = False):
+either:    address, username, password, database
+or:                                     database, detect_types
+"""
+
+__all__ = ['Unit', 'Application', 'center', 'access_grid', 'parse_numeric_ranges', 'process_pid', 'Timer',
+           'is_running', 'get_screen_size', 'count_screens', 'total_screen_space', 'enumerate_screens', 'DataGrid',
+           '_check_units', 'check_serial_number']
Index: buildout.cfg
===================================================================
--- buildout.cfg	(revision Shelved Version)
+++ buildout.cfg	(revision Shelved Version)
@@ -0,0 +1,0 @@
Index: .idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/inspectionProfiles/Project_Default.xml	(revision Local Version)
+++ .idea/inspectionProfiles/Project_Default.xml	(revision Shelved Version)
@@ -4,7 +4,6 @@
     <inspection_tool class="PyArgumentEqualDefaultInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
     <inspection_tool class="PyAugmentAssignmentInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
     <inspection_tool class="PyMandatoryEncodingInspection" enabled="true" level="WARNING" enabled_by_default="true" />
-    <inspection_tool class="PyMissingOrEmptyDocstringInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
     <inspection_tool class="PyMissingTypeHintsInspection" enabled="true" level="WEAK WARNING" enabled_by_default="true" />
     <inspection_tool class="PyPackageRequirementsInspection" enabled="true" level="WARNING" enabled_by_default="true">
       <option name="ignoredPackages">
@@ -32,5 +31,6 @@
         </value>
       </option>
     </inspection_tool>
+    <inspection_tool class="SqlResolveInspection" enabled="false" level="WARNING" enabled_by_default="false" />
   </profile>
 </component>
\ No newline at end of file
Index: exceptions.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- exceptions.py	(revision Local Version)
+++ exceptions.py	(revision Shelved Version)
@@ -19,9 +19,9 @@
 	"""Base exception class. All other exceptions inherit
 	from this one.
 	"""
-
-	def __init__(self, msg=""):
+	def __init__(self, status: str, msg=""):
 		Exception.__init__(self, msg)
+		self.status = status
 		self.msg = msg
 
 	def __repr__(self):
@@ -36,14 +36,14 @@
 class NoSROError(BI_EntryError):
 	def __init__(self, serial_number: str, msg=""):
 		msg2 = f"No SROs exist for unit '{serial_number}'"
-		super().__init__("%s\n%s" % (msg2, msg))
+		super().__init__('No SRO', "%s\n%s" % (msg2, msg))
 		self.serial_number = serial_number
 
 
 class NoOpenSROError(BI_EntryError):
 	def __init__(self, serial_number: str, sro: str, msg=""):
 		msg2 = f"No SROs are open at the Line-level for unit '{serial_number}'"
-		super().__init__("%s\n%s" % (msg2, msg))
+		super().__init__('No Open SRO', "%s\n%s" % (msg2, msg))
 		self.serial_number = serial_number
 		self.sro = sro
 
@@ -52,6 +52,7 @@
 	def __init__(self, serial_number: str, msg=""):
 		msg2 = f"'{serial_number}' is not a valid serial number"
 		ValueError.__init__(self, "%s\n%s" % (msg2, msg))
+		self.status = 'Invalid Serial Number'
 		self.serial_number = serial_number
 
 
@@ -59,6 +60,7 @@
 	def __init__(self, serial_number: str, sro: str, msg=""):
 		msg2 = f"'{sro}' is not a valid SRO for unit '{serial_number}'"
 		ValueError.__init__(self, "%s\n%s" % (msg2, msg))
+		self.status = 'Invalid SRO'
 		self.sro = sro
 
 
@@ -66,6 +68,7 @@
 	def __init__(self, part_number: str, msg=""):
 		msg2 = f"'{part_number}' is not a valid part number"
 		ValueError.__init__(self, "%s\n%s" % (msg2, msg))
+		self.status = 'Invalid Part Number'
 		self.part_number = part_number
 
 
@@ -73,10 +76,9 @@
 	def __init__(self, reason_code: str, spec_id: str, msg=""):
 		msg2 = f"'{reason_code}' is not a valid reason code"
 		ValueError.__init__(self, "%s\n%s" % (msg2, msg))
+		self.status = 'Invalid Reason Code'
 		self.reason_code = reason_code
 		self.spec_id = spec_id
-
-
 # - - - - - - - - - - - - - - - - - - - - - - - -
 
 
@@ -109,8 +111,6 @@
 	def __init__(self, cmd: str, msg=""):
 		msg2 = f"Invalid response from query '{cmd}'"
 		ValueError.__init__(self, "%s\n%s" % (msg2, msg))
-
-
 # - - - - - - - - - - - - - - - - - - - - - - - -
 
 
@@ -151,5 +151,4 @@
 	def __init__(self, part: str, qty: int, loc: str, msg=""):
 		msg2 = f"Quantity for part '{part}' = -{qty}.000 in location '{loc}'"
 		super().__init__("%s\n%s" % (msg2, msg))
-
 # - - - - - - - - - - - - - - - - - - - - - - - -
Index: processes/preprogram/__init__.py
===================================================================
--- processes/preprogram/__init__.py	(revision Shelved Version)
+++ processes/preprogram/__init__.py	(revision Shelved Version)
@@ -0,0 +1,2 @@
+"""Makes sure 'Units' form is open"""
+# TODO: Initialization
Index: bi_entry.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bi_entry.py	(revision Local Version)
+++ bi_entry.py	(revision Local Version)
@@ -1,225 +0,0 @@
-import configparser
-import datetime
-import logging.config
-import random
-from random import randint
-from time import sleep
-
-from exceptions import *
-
-
-def main():
-	from transact import Transact
-	from scrap import Scrap
-	from reason import Reason
-	from common import Application, Unit, parse_numeric_ranges
-	from sql import MS_SQL
-	from crypt import decrypt
-
-	_assorted_lengths_of_string = ('30803410313510753080335510753245107531353410',
-	                               '3660426037804620468050404740384034653780366030253080',
-	                               '474046203600486038404260432039003960',
-	                               '63004620S875486038404260S875432039003960',
-	                               '58803900396063004620360048603840426038404620',
-	                               '54005880Q750516045004500',
-	                               '1121327')
-	_adr_data, _adr_data_sl, _usr_data, _pwd_data, _db_data, _db_data_sl, _key = _assorted_lengths_of_string
-	mssql = MS_SQL(address=decrypt(_adr_data, _key), username=decrypt(_usr_data, _key),
-	               password=decrypt(_pwd_data, _key), database=decrypt(_db_data, _key))
-	slsql = MS_SQL(address=decrypt(_adr_data_sl, _key), username=decrypt(_usr_data, _key),
-	               password=decrypt(_pwd_data, _key), database=decrypt(_db_data_sl, _key))
-	config = configparser.ConfigParser()
-	logging.config.fileConfig('config.ini')
-	log = logging
-	sleep(randint(10, 20) / 10)
-	log.info("Attempting to read 'config.ini'")
-	config.read_file(open('config.ini'))
-	log.info("Starting Application")
-	app = Application(config.get('Paths', 'sl_exe'))
-	usr = config.get('Login', 'username')
-	pwd = config.get('Login', 'password')
-
-	config_days = parse_numeric_ranges(config.get('Schedule', 'active_days'))
-	config_hours = parse_numeric_ranges(config.get('Schedule', 'active_hours'))
-	total_days = set(range(7))
-	total_hours = set(range(24))
-	active_days = {z for y in [list(range(x[0], x[1] + 1)) for x in config_days] for z in y}
-	active_hours = {z for y in [list(range(x[0], x[1] + 1)) for x in config_hours] for z in y}
-	inactive_days = total_days - active_days
-	inactive_hours = total_hours - active_hours
-	# Switch between Reason, Scrap, and Transaction
-	current_hour = datetime.datetime.now().hour
-	while True:  # Core Loop
-		old_current_hour = current_hour
-		current_weekday = int(format(datetime.datetime.now(), '%w'))
-		current_hour = datetime.datetime.now().hour
-		if (current_weekday in inactive_days) or (current_hour in inactive_hours):
-			if app.logged_in:
-				app.log_out()
-			sleep(60)
-			continue
-		elif (current_weekday in active_days) and (current_hour in active_hours):
-			if old_current_hour != current_hour:
-				version = config.get('DEFAULT', 'version')
-				offset = mssql.execute(f"SELECT TOP 1 [Total Time] FROM [Statistics] WHERE [Version] = '{version}' ORDER BY [Total Time] DESC")
-				if offset is None:
-					offset = 5
-				else:
-					offset = (offset.Total_Time // 60) + 2
-				while datetime.datetime.now().minute < offset:
-					pass
-				else:
-					choice = random.choice(range(2, 10, 2))
-					random.seed(usr)
-					for i in range(choice):
-						random.randint(1, 20)
-					else:
-						sleep(random.randint(1, 20) / (choice * 2))
-					mssql.execute("UPDATE PyComm SET [Status] = 'Queued' WHERE [Status] = 'Started(Queued)'")
-					mssql.execute("UPDATE PyComm SET [Status] = 'Scrap' WHERE [Status] = 'Started(Scrap)'")
-					mssql.execute("UPDATE PyComm SET [Status] = 'Reason' WHERE [Status] = 'Started(Reason)'")
-					sleep(5)
-			if not app.logged_in:
-				app.log_in(usr, pwd)
-				"""try:
-					app.win32.SignIn.wait('ready')
-					while app.win32.SignIn.exists():
-						app.win32.SignIn.UserLoginEdit.set_text(usr)
-						app.win32.SignIn.PasswordEdit.set_text(pwd)
-						if (app.win32.SignIn.UserLoginEdit.texts()[0] != usr) or (app.win32.SignIn.PasswordEdit.texts()[0] != pwd) or (not app.win32.SignIn.OKButton.exists()):
-							raise ValueError()
-						app.win32.SignIn.set_focus()
-						app.win32.SignIn.OKButton.click()
-						Dialog2 = app.uia.top_window()
-						while Dialog2.exists():
-							# Get dialog info
-							Dialog = Dialog2.children()[0]
-							title = Dialog.texts()
-							buttons = {ctrl.texts()[0].strip('!@#$%^&*()_ ').replace(' ', '_').lower() + '_button': ctrl for ctrl in Dialog.children() if ctrl.friendly_class_name() == 'Button'}
-							text = [ctrl.texts()[0].capitalize() for ctrl in Dialog.children() if ctrl.friendly_class_name() == 'Static' and ctrl.texts()[0]]
-							if not text:
-								break
-							log.debug([title, buttons, text, replace_session_regex.search(text[0]), user_session_regex.search(text[0])])
-							if replace_session_regex.search(text[0]):  # Handle better in future
-								if 'yes_button' in buttons:
-									Dialog.set_focus()
-									buttons['yes_button'].click()
-							elif password_expire_regex.search(text[0]):  # Handle better in future
-								if 'ok_button' in buttons:
-									Dialog.set_focus()
-									buttons['ok_button'].click()
-							elif user_session_regex.search(text[0]):  # Handle better in future
-								if 'ok_button' in buttons:
-									Dialog.set_focus()
-									buttons['ok_button'].click()
-							elif invalid_login_regex.search(text[0]):  # Handle better in future
-								if 'ok_button' in buttons:
-									Dialog.set_focus()
-									buttons['ok_button'].click()
-									raise SyteLineLogInError('')
-							else:
-								raise ValueError()
-				except ValueError:
-					continue  # Handle better in future
-				else:
-					log.info(f"Successfully logged in as '{usr}'")
-					app.logged_in = True"""
-			if app.logged_in:
-				flow = config.get('DEFAULT', 'flow')
-				tbl_mod = config.get('DEFAULT', 'table')
-				proc = config.get('DEFAULT', 'process')
-				table = 'PyComm' if int(tbl_mod) else 'PyComm2'  # if table == 1: PyComm, else: PyComm2
-				# result = mssql.execute("SELECT TOP 1 * FROM PyComm WHERE [Status] = 'Queued' OR [Status] = 'Reason' OR [Status] = 'Scrap' ORDER BY [DateTime] ASC")
-				# result = mssql.execute("SELECT TOP 1 * FROM PyComm WHERE [Status] = 'Queued' ORDER BY [DateTime] ASC")
-				if 'scrap' in proc.lower():
-					process = 'Scrap'
-					result = mssql.execute("SELECT TOP 100 * FROM PyComm WHERE [Status] = 'Scrap' ORDER BY [DateTime] ASC", fetchall=True)
-				elif 'reason' in proc.lower():
-					process = 'Reason'
-					result = mssql.execute("SELECT TOP 1 * FROM PyComm WHERE [Status] = 'Reason' ORDER BY [DateTime] ASC")
-
-				else:
-					result = mssql.execute(f"SELECT TOP 1 * From PyComm "
-					                       f"WHERE [Status] = 'Queued' "
-					                       f"AND [DateTime] <= DATEADD(MINUTE, -5, GETDATE()) "
-					                       f"ORDER BY [DateTime] {flow}")
-					if result:
-						process = result.Status
-				if not result:
-					log.info("No valid results, waiting...")
-					sleep(10)
-					continue
-				try:
-					log.debug(f"Current process: {process}")
-					if 'queued' in process.lower() or 'reason' in process.lower():
-						if 'queued' in process.lower():
-							all_results = mssql.execute(f"SELECT * FROM {table} WHERE [Serial Number] = '{result.Serial_Number}' AND "
-							                            f"([Status] = 'Queued' OR [Status] = 'No Open SRO(Queued)' OR [Status] = 'Skipped(Queued)')", fetchall=True)
-						elif 'reason' in process.lower():
-							all_results = mssql.execute(f"SELECT * FROM {table} WHERE [Serial Number] = '{result.Serial_Number}' AND "
-							                            f"([Status] = 'Reason' OR [Status] = 'No Open SRO(Reason)' OR [Status] = 'Skipped(Reason)')", fetchall=True)
-						counter = {'SRO': 0, 'OSRO': 0, 'Skip': 0, 'C_SRO': 0, 'C_OSRO': 0, 'C_Skip': 0}
-						for res in all_results:
-							if 'Custom' in res.Status:
-								if 'No Open SRO' in res.Status:
-									counter['C_OSRO'] += 1
-								elif 'No SRO' in res.Status:
-									counter['C_SRO'] += 1
-								elif 'Skipped' in res.Status:
-									counter['C_Skip'] += 1
-							else:
-								if 'No Open SRO' in res.Status:
-									counter['OSRO'] += 1
-								elif 'No SRO' in res.Status:
-									counter['SRO'] += 1
-								elif 'Skipped' in res.Status:
-									counter['Skip'] += 1
-						if sum(counter.values()):
-							counter_key = None
-							max_count = max(counter.values())
-							for k, v in counter.items():
-								if v == max_count:
-									counter_key = k
-									break
-							if counter_key:
-								if 'SRO' in counter_key:
-									log.exception(f"No SRO's exist for serial number: {result.Serial_Number}")
-									mssql.execute(f"UPDATE {table} SET [Status] = 'No Open SRO({result.Status})' WHERE [Serial Number] = '{result.Serial_Number}'")
-								if 'OSRO' in counter_key:
-									log.exception(f"No SRO's exist for serial number: {result.Serial_Number}")
-									mssql.execute(f"UPDATE {table} SET [Status] = 'No Open SRO({result.Status})' WHERE [Serial Number] = '{result.Serial_Number}'")
-								elif 'Skip' in counter_key:
-									log.exception(f"Other entries with skipped status exist for serial number: {result.Serial_Number}")
-									mssql.execute(f"UPDATE {table} SET [Status] = 'Skipped({result.Status})' WHERE [Serial Number] = '{result.Serial_Number}'")
-								continue
-						if 'queued' in process.lower():
-							units = list({unit.operation: unit for unit in [Unit(mssql, slsql, x) for x in all_results]}.values())  # Removes and duplicate operations
-						elif 'reason' in process.lower():
-							units = [Unit(mssql, slsql, x) for x in all_results]
-					else:
-						units = [Unit(mssql, slsql, x) for x in result]
-					log.debug(f"Unit group created: {units}")
-					log.debug(f"Unit group created: {', '.join(f'{x.id}, {x.parts}, {x.operation}' for x in units)}")
-					unit = units[0]
-				except NoSROError as ex:
-					log.exception("No SRO Error!")
-					mssql.execute(f"UPDATE {table} SET [Status] = 'No SRO({result.Status})' WHERE [Serial Number] = '{result.Serial_Number}'")
-					continue
-				except NoOpenSROError as ex:
-					log.exception("No Open SRO Error!")
-					mssql.execute(f"UPDATE {table} SET [Status] = 'No Open SRO({result.Status})({ex.sro})' WHERE [Serial Number] = '{result.Serial_Number}'")
-					continue
-				except InvalidReasonCodeError as ex:
-					log.exception("Invalid Reason Code Error!")
-					mssql.execute(
-							f"UPDATE {table} SET [Status] = 'Invalid Reason Code({result.Status})({ex.reason_code})' WHERE [Serial Number] = '{result.Serial_Number}' AND [Id] = {int(ex.spec_id)}")
-					continue
-				log.info(f"Unit object created with serial_number={unit.serial_number}'")
-				script_dict = {'Queued': Transact, 'Reason': Reason, 'Scrap': Scrap, 'Custom(Queued)': Transact}
-				script_dict.get(process, lambda x, y: None)(app, units)
-				log.info(
-						'-----------------------UNIT-----------------------UNIT-----------------------UNIT-----------------------UNIT-----------------------UNIT-----------------------UNIT-----------------------UNIT-----------------------')
-
-
-if __name__ == '__main__':
-	main()
Index: processes/transact/__init__.py
===================================================================
--- processes/transact/__init__.py	(revision Shelved Version)
+++ processes/transact/__init__.py	(revision Shelved Version)
@@ -0,0 +1,3 @@
+"""Makes sure 'Units' form is open"""
+from processes.transact.transact import count_units, dummy, get_units, run, starting_forms
+# TODO: Initialization
Index: utils/sql.py
===================================================================
--- utils/sql.py	(revision Shelved Version)
+++ utils/sql.py	(revision Shelved Version)
@@ -0,0 +1,160 @@
+# coding=utf-8
+import datetime
+import decimal
+import logging
+import pymssql
+import sqlite3
+from abc import ABC, abstractmethod
+from collections import namedtuple
+from typing import NamedTuple, Tuple, Union, overload
+
+from constants import REGEX_SQL_DATE as sql_date_regex, REGEX_SQL_TIME as sql_time_regex
+from utils.crypt import legacy_decrypt
+from utils.tools import prepare_string
+
+log = logging.getLogger(__name__)
+
+SimpleValue = Union[str, int]
+
+class SQL(ABC):
+	def __init__(self, *, quiet: bool, **kwargs):
+		self.quiet = quiet
+		self._kwargs = kwargs
+
+	@property
+	def kwargs(self):
+		return self._kwargs
+
+	@property
+	@abstractmethod
+	def _conn(self): raise NotImplementedError()
+
+	@abstractmethod
+	def execute(self, command, params): raise NotImplementedError()
+
+
+class MSSQL(SQL):
+	_type_codes = {1: str, 2: bytes, 3: int, 4: datetime.datetime, 5: decimal.Decimal}
+
+	@staticmethod
+	def _adapt_type(x):
+		if type(x) is str:
+			val = sql_date_regex.match(x)
+			if val is not None:
+				return datetime.date(int(val.group('year')), int(val.group('month')), int(val.group('day')))
+			val = sql_time_regex.match(x)
+			if val is not None:
+				return datetime.time(int(val.group('hour')), int(val.group('minute')), int(val.group('second')), int(val.group('microsecond')))
+			return prepare_string(x)
+		else:
+			return x
+
+	@classmethod
+	@overload
+	def connect(cls, address: str, username: str, password: str, database: str, *, key: str = None, legacy_encryption: bool = False, quiet: bool = False):
+		try:
+			conn = pymssql.connect(server=address, user=username, password=password, database=database, login_timeout=10)
+		except Exception:
+			raise ConnectionError("Connection to SQL Server failed!")
+		else:
+			return cls(server=address, user=username, password=password, database=database, login_timeout=10, quiet=quiet)
+
+	@classmethod
+	def connect(cls, address: str, username: str, password: str, database: str, *, key: str, legacy_encryption: bool = True, quiet: bool = False):
+		try:
+			conn = pymssql.connect(server=legacy_decrypt(address, key), user=legacy_decrypt(username, key), password=legacy_decrypt(password, key), database=legacy_decrypt(database, key),
+			                       login_timeout=10)
+		except Exception:
+			raise ConnectionError("Connection to SQL Server failed!")
+		else:
+			return cls(server=legacy_decrypt(address, key), user=legacy_decrypt(username, key), password=legacy_decrypt(password, key), database=legacy_decrypt(database, key), login_timeout=10, quiet=quiet)
+
+	@property
+	def _conn(self) -> pymssql.Connection:
+		try:
+			conn = pymssql.connect(**self.kwargs)
+		except Exception:
+			raise ConnectionError("Connection to SQL Server failed!")
+		else:
+			return conn
+
+	def execute(self, command, params=None) -> Tuple[NamedTuple, ...]:
+		with self._conn as conn:
+			c = conn.cursor()
+			if command.upper().startswith('SELECT'):
+				if not self.quiet:
+					log.debug(f"Executing SQL query: '{command}'")
+				c.execute(command, params)
+				SQL_Results = NamedTuple('SQL_Results', [(x[0].replace(' ', '_'), self._type_codes[x[1]]) for x in c.description])
+				results = tuple([SQL_Results(*[self._adapt_type(y) for y in x]) for x in c.fetchall() if x is not None])
+				if not self.quiet:
+					log.debug(f"SQL query successful, value(s) returned: {results}")
+				return results
+			elif 'DELETE' in command.upper():
+				if not self.quiet:
+					log.debug(f"Executing SQL transaction: '{command}'")
+					log.info(f"Executing SQL transaction: '{command}'")
+				c.execute(command, params)
+				conn.commit()
+				if not self.quiet:
+					log.debug("SQL transaction successful")
+					log.info("SQL transaction successful")
+			else:
+				if not self.quiet:
+					log.debug(f"Executing SQL transaction: '{command}'")
+				c.execute(command, params)
+				conn.commit()
+				if not self.quiet:
+					log.debug("SQL transaction successful")
+
+
+class SQLite(SQL):
+	@classmethod
+	def connect(cls, database: str, detect_types: int = 0, quiet: bool = False):
+		try:
+			conn = sqlite3.connect(database=database, detect_types=detect_types)
+		except Exception:
+			raise ConnectionError("Connection to SQLite3 Database failed!")
+		else:
+			return cls(database=datetime, detect_types=detect_types, quiet=quiet)
+
+	@property
+	def _conn(self) -> sqlite3.Connection:
+		try:
+			conn = sqlite3.connect(**self.kwargs)
+		except Exception:
+			raise ConnectionError("Connection to SQLite3 Database failed!")
+		else:
+			return conn
+
+	def execute(self, command, params=None) -> Tuple[NamedTuple, ...]:
+		with self._conn as conn:
+			c = conn.cursor()
+			if command.upper().startswith('SELECT'):
+				if not self.quiet:
+					log.debug(f"Executing SQL query: '{command}'")
+				c.execute(command, params)
+				SQL_Results = namedtuple('SQL_Results', [x[0].replace(' ', '_') for x in c.description])
+				results = tuple([SQL_Results(*[y for y in x]) for x in c.fetchall() if x is not None])
+				if not self.quiet:
+					log.debug(f"SQL query successful, value(s) returned: {results}")
+				return results
+			elif 'DELETE' in command.upper():
+				if not self.quiet:
+					log.debug(f"Executing SQL transaction: '{command}'")
+					log.info(f"Executing SQL transaction: '{command}'")
+				c.execute(command, params)
+				conn.commit()
+				if not self.quiet:
+					log.debug("SQL transaction successful")
+					log.info("SQL transaction successful")
+			else:
+				if not self.quiet:
+					log.debug(f"Executing SQL transaction: '{command}'")
+				c.execute(command, params)
+				conn.commit()
+				if not self.quiet:
+					log.debug("SQL transaction successful")
+
+
+__all__ = ['MSSQL', 'SQLite']
Index: setup.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- setup.py	(revision Local Version)
+++ setup.py	(revision Shelved Version)
@@ -1,16 +1,23 @@
-# from distutils.core import setup
+#!/usr/bin/env python
+# coding=utf-8
+import compileall
 import configparser
+import glob
 import os
 import sys
 
-from cx_Freeze import Executable, setup
+# Compiles the sourcecode
+for f in glob.iglob('*.py'):
+	compileall.compile_file(f, force=True)
+compileall.compile_dir(os.getcwd() + '\\processes', force=True)
+compileall.compile_dir(os.getcwd() + '\\utils', force=True)
 
-from __init__ import __version__
+from cx_Freeze import setup, Executable
 
 config = configparser.ConfigParser()
 config.read_file(open('config.ini'))
 
-major, minor, micro = map(int, map(str.strip, __version__.split('.', 3)))
+major, minor, micro = map(int, map(str.strip, __version__.split('.', 3)))g
 version = f"{major}.{minor}.{micro+1}"
 
 
@@ -54,12 +61,13 @@
             'comtypes', 'sqlite3']
 include_files = [r'C:\Users\mfgpc00\AppData\Local\Programs\Python\Python36\DLLs\_ctypes.pyd',
                  r'C:\Users\mfgpc00\AppData\Local\Programs\Python\Python36\Lib\site-packages\_mssql.cp36-win_amd64.pyd',
-                 r'C:\Users\mfgpc00\Desktop\deploy\bi_entry.ico']
+                 r'C:\Users\mfgpc00\Documents\GitHub\bi_entry\bi_entry.ico',
+                 r'C:\Users\mfgpc00\Documents\GitHub\bi_entry\bi_entry2.ico']
 excludes = ["tkinter", "PyQt4.QtSql", "numpy",
             "scipy.lib.lapack.flapack", "matplotlib",
             "PyQt4.QtNetwork", "PyQt4.QtScript",
-            "numpy.core._dotblas", "PyQt5", "PIL",
-            "colorama", "pygments", "mpl-data", "email"]
+            "numpy.core._dotblas", "PyQt5", "colorama",
+            "pygments", "mpl-data", "email"]
 
 options = {
 	'build_exe': {
@@ -76,6 +84,7 @@
 		options=options,
 		version=version,
 		packages=[''],
+		requires=['pymssql'],
 		url='',
 		license='',
 		author='Josh Reddington',
Index: processes/status_report/__init__.py
===================================================================
--- processes/status_report/__init__.py	(revision Shelved Version)
+++ processes/status_report/__init__.py	(revision Shelved Version)
@@ -0,0 +1,1 @@
+# TODO: Initialization
Index: config.py
===================================================================
--- config.py	(revision Shelved Version)
+++ config.py	(revision Shelved Version)
@@ -0,0 +1,41 @@
+#!/usr/bin/env python
+import configparser
+import pathlib
+from typing import Iterable
+
+from constants import REGEX_NUMERIC_RANGES
+
+_config = configparser.ConfigParser()
+_config.read_file(open(r'C:\Users\mfgpc00\Documents\GitHub\bi_entry\config.ini'))
+
+application_filepath = pathlib.Path(_config.get('Paths', 'sl_exe'))
+version = _config.get('DEFAULT', 'version')
+table = _config.get('DEFAULT', 'table')
+flow = _config.get('DEFAULT', 'flow')
+process_default = _config.get('DEFAULT', 'process')
+username = _config.get('Login', 'username')
+password = _config.get('Login', 'password')
+
+
+def _numeric_ranges(x1, x2, x3) -> Iterable:
+	if x3 is None:
+		return range(int(x1), int(x2) + 1)
+	else:
+		return [int(x3)]
+
+
+_config_days = REGEX_NUMERIC_RANGES.finditer(_config.get('Schedule', 'active_days'))
+_config_hours = REGEX_NUMERIC_RANGES.finditer(_config.get('Schedule', 'active_hours'))
+active_days = {y for x in _config_days for y in _numeric_ranges(*x.groups())}
+active_hours = {y for x in _config_hours for y in _numeric_ranges(*x.groups())}
+
+from utils import MSSQL
+
+_assorted_lengths_of_string = ('30803410313510753080335510753245107531353410', '3660426037804620468050404740384034653780366030253080',
+                               '474046203600486038404260432039003960', '63004620S875486038404260S875432039003960',
+                               '58803900396063004620360048603840426038404620', '54005880Q750516045004500', '1121327')
+_adr_data, _adr_data_sl, _usr_data, _pwd_data, _db_data, _db_data_sl, _key = _assorted_lengths_of_string
+mssql = MSSQL.connect(key=_key, address=_adr_data, username=_usr_data, password=_pwd_data, database=_db_data, legacy_encryption=True)
+slsql = MSSQL.connect(key=_key, address=_adr_data_sl, username=_usr_data, password=_pwd_data, database=_db_data_sl, legacy_encryption=True)
+__all__ = ['active_hours', 'active_days', 'application_filepath', 'username', 'password',
+           'version', 'table', 'flow', 'process_default', 'mssql', 'slsql']
diff --git .idea/dataSources/94484664-fd08-47d2-9dfa-66ccb3761007/_metadata_/metadata .idea/dataSources/94484664-fd08-47d2-9dfa-66ccb3761007/_metadata_/metadata
index 7a4d602b5b9c73cd8395b4b8de13a512ba2ec3b4..c4142c56fb43a0e1bd9bd6a5bfe383895fbd18eb
GIT binary patch
literal 65536
zc%1Fev55je5Qfna1Tir*HWF;$;J^Z`z)({wFt!XkFgGx{Dom~dYcO>0*F!Wn5aB&o
zzJZ+$wm1D5bgQag&pK6`s@Zi+Th!Ce=zrsO?yh&=kJkVI00000000000000000000
z0000000000000000Pt}Zm)6GVzO}YW*Xb^ur>FEQoph>(=`uZMf1CcM$MlfC_Xhv~
j000000000000000000000000000000000000PvbWyW%Ql

diff --git images/icon2.xcf images/icon2.xcf
new file mode 100644
index 0000000000000000000000000000000000000000..ca6878740130217b2686c7e2d5e194051f695217
GIT binary patch
literal 5192
zc%1E4ZA_C_6uxi2fC8dyjtvFcqKGDS@<U@LF~a5o3o8po5(8OMzG^2>!-tb-#>6dx
zW_HN}Zb)#VCO8%682lK_89TL@Y{Vb1MT{R{5OfQ~Q7CQc-MR03-@YG3xA|k)65r%<
z&pr3tbDn$7b8fL%%XaE^7nbNstfj>WJ|i9ETLgn);Li&%LeoD*hz$5%grS154#rDV
zCU%QqBDzQmxHT5q%F2q%s}S8J11)5CtYv0PvC&dtEuxzYO0KM`DJ|Aj+DffOE49fb
zmO@*ptwNW~PR0sLfmyd^^&0k@M@XT<N;q0D&(RdQVX#1s?ylTvF0__gbSb=NP}a<+
zq&j1DxwT4XEic?&TuIK`N=hn=t90Vi!75H8J&J^nIgOC|E<#}+A{6mZw858#BvO%1
zGzz+-p*6syPNI5*QJH*8MY2{Thl}J0ksK+Kqo`m03lZ({T+j*IiaZ%&*jL!3Iz=s6
z)G{`tz{yC1m!kzZE@-H*3I>@qU`OT^tZgVxg#D!`YM!COY8Ye=fip`bXE+<;J03;i
zWheypRCp!W)iPV2qxlOo4C4<+E09~WDz|9AO^22t*Q&aUckhhP4(td+dgR;TbYTYj
z=itxWH>oHAxlfK^@8kPZpz!z}^=?xE4JR+U@ksCfhO@tVeYYKL2BP}GhriE>i(Zm-
z;Oi?_j_E+<`O1aQ#2_W|7;-9W;)&*i2lzrXQX`*AA4S$1`*7cSl!V+7AOHTFJ%&Nc
z(d_b5Gxy692r_lZ+Do3H1Fy#_ftrsOWFGk9$S}s^$McK}P&}H=>Ad~Nlou<pr>|=L
zVg@ZiGiOHUMt?rn{g8n5j9%Qi0F)E=r}4LCX&W*szMI8&9bf8+&OL`eNl<7M;fZhU
z>$-Ma2RhHAIsB0Zi0)aKyxAN_G`%j|76Yy6Q$&T3b<qQS^IZZrw%hByx+MZY&M;eV
z_}!Owuz<A{H@*IQ=c?DKkpWFH+kTwD__6ayemrE>6Z%f?jGq7-YPA>@a3fzxem_~e
zhcDGFMu})9@v~_>>}b_P1W)=g=P4bOtTyP`*!*94F5-l3&B5U3LenbMX*#&)q5%0Z
zP*4e+)y&fqgv(0k889jU;wB+AOXlDqGF<<+UDh&hKZhVd$O3zBRwu^5-Z_|+*uc(e
z>>q&^^S#zQg;m%)(qqpj?Hbd3V}yMOh$0CLT>9p#!&BT!kKFp^j^hm=E<@g!+&A^$
z+^+`wzG&kn(%I3*oJ0LiXblf5k$1)kFN`NL$pkAES;ZlbI_13!B&x6f&?d5uZT{&V
z8?^sWjxm}G>KvWoRuI(C-1@!=L<qVl#Sle;Do8Gp$la3i?LDyLCi4hf6Z()7l^6oY
zWjBBbm+d6Ci^#P*NZ`57EQsQXYwo*4;*uqMx9g9lK!h-c=7uy9CX7v_ygxJl?fz6e
zp+80ck!V*1_osHFRHrp@{dpZF;BchFTBN5V6n=7)_!amm347|y+v#uw_=u4B35B0H
zC4L!fwNIUSI|KMMuxE*nTISkwWY2``7vw#Ov6J+||9Y-v2IQTl$uidzSNzj%V?^D?
zJVUpkCv;n^upRk%aJNOCmFgmU*=`FNXJEVm<6t<x?Q>0x4c{8*@4MXFeg1S?OQXG^
zZcnvsdqMtIQ%2f`wXb3=7)?)%58oQ>cV6!8I^W)Qw8`GEZ!d3@zG3ZZ-e?3ou||R?
zYeC-D?2PnO&XaeVgkwE*6Hkry`ntWl<l$VLCyMDP@g#&x<&7rCDe$h2_7g24PeM2j
z)1U;?-s*DJC^G=u#bN5Z+(T~H(s-BvFQ>pIDG+0-=P>0FPpLu*M4pZ|9<Jwsi!j0M
zhKInDqlaSRJ>{Cjz{di~q?l+pQ)ap-Ph2<-QxkaFLyZE!y@HW61$m;{d8a420z3G!
zP!{CnX3tla!0jMU+s(AVLJEdR#%T)Jve0m8;uP?n0+_gD%J?J#ez=}zrpSoW7l1>!
z6KuF(Of(#20h=eFid7mefQgoc%eYmNOg05WgF;y-aC5#a9ACQ*J_Q_~OfqK5`%cbG
zzFQn((v`~^foG<SPb3AIX%bI@Q4`_#E+Lr#s*H$O&_r2amX~Fo+R5@HJQ&@4p7zK|
z=MyutohvZkEdp@Y<QU5Whma>q-)!0YG$8aHmjbJqk}epy5Y8IhoP0~QQ>yUcq<jh(
zwKNJwrr=k_!R4t*l!8D9dudrXW}cALE<?hCp}_z%n*z-#O95df8?IgQX3A<eB(zlE
i9hWx(WkDDJ`p(yP0i%v~2@3*zx)YRfyO44A&HNK<f~pGu

diff --git images/bi_entry2_.ico images/bi_entry2_.ico
new file mode 100644
index 0000000000000000000000000000000000000000..a8f38a9e8d9dc8128f462d9703aaa2519751c5da
GIT binary patch
literal 8522
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
Jf8O2r`ximV^2`7L

diff --git .idea/dataSources/3140667a-2402-44b0-8f88-34422ce28e0a/_metadata_/metadata .idea/dataSources/3140667a-2402-44b0-8f88-34422ce28e0a/_metadata_/metadata
index bbf0401c192c9fb399ae206b28d0a76286ca6f2f..c21be53360305f8e48a5ae211edf7103dee5db33
GIT binary patch
literal 65536
zc%1Fd!3lsc5Cp&rKFrICv^V>*xOhrHw1FVZd~R7-xOqL65?|Tu5%r3BTk7qt_FUeJ
z*rq1~00000000000000000000000000000000000006+>v^4q$000000000000000
Z000000000000000000000000O=>(i=3S0mH

diff --git images/bi_entry2_.xcf images/bi_entry2_.xcf
new file mode 100644
index 0000000000000000000000000000000000000000..cc4f7baae97cead8c18fc2063713aca122d0339f
GIT binary patch
literal 8110
zc%1E6ZA@EL7=CZt+d?U2pcCx)xGfuFOKOH6%c4fNiHkEh4a6mj#DvdU`6vMvx5P-?
zGz5rY(I1Qbv5jT(hjYe>^1~sLu#d7t$$l)FE!hVw%vlYllu>TmdwkEmZMfaN7mYti
zoAjKVd*1WB=e*DRo^#$)HkZ4tgFDdB%r(1Pn*fV5)@aGa#xVGK1Y5?=BLK8vc@&$0
zV%Q#w$#mXY><Y18<3h7ecUzsS$?58JH-e;RpuDU5U~3cC<!N;{ZZelQyBa*Lo=&b@
z?3|sh`Z{jQ6I;ZhB2>hLO}MmPWogC36O{s8dZ4SLuEE{z;ws{n5j>~{#xUppc6T@D
zZf|&}sf(`nG&grOb#wC7N=QNym%?&k1_9U$0GXWtmT8$HegJeoGj=z4+PTsSiW_75
zOk(>U-}B6vOiQ6mHp}EJnQW2C*)lmNW;b3;GF|+<b<1kqix2sWdR<K-rfZ;s9>xPY
zQVvG40j#7*(G0|ZjrK;INBfQ9+ze8R`a;N2X$Hb#qrC~&6eg^Z=1|+kkWJQu33Udt
z3Fq}NHED1D#T$kZvS1^GjGOm19`<ms9u_tq8oPb#{?fIUOt3?w#kW8hB1G{M{q}h%
zfzYYnNjPvfhyWk)kM1+zHT-)lL}o@0_kHzSIC691q=P~~MaYlUMS1J0dcV1N@i>PN
z|K$QXlMi~}9o1b2iz)KKJ#sD&Scn+xIduHOB$?a>We~D_{MVm@`3!7;r46SS@3xgt
z&sftl<NS@@mu!0AAYk3y`}xsnLhcW}<+MUEEL9KRoDYVHp74|1+txC$4i?YMMrVIH
zJMss0mY*H#up&5j_W}8?ZO3!3bpEhJZcm)BQ!ErEpOol~x~$SyKm7jk5QiA=kCKm!
zc+vSa<uBJ2QDk(1oXp46jOcPqbliB4Tz{LoYa0oNFV$Gk$wlVPt3qhJMReHQc|9!L
zIlF%=3l0b}`!38867U_ZEykVYGu{|o6sTi2j=7vVj3{ENoucE=^!TB*PzsBspFJSc
z6UXex!0$ZnJI&#d^=LdAPl7CAli~5uFRP93D<2QzkwnaRLV7&vK_GY`^>~AgDj7m=
zwjMJGC)MLME(2D)+R7%Ixa~ii>|tI@yRhs+70wS=4HJTQIf}iWIK-YM!VD%{<XLZ!
z7)W^L{9r9j-hA)X8Sz=5Kp9S0uzN2}2c?l6LU!-hLwzW&hj9MhU3N4su;_mz&$*rE
zd7iU+V9JMy!iy4pb$s~V@Y!X1aAcsPBH-DIch6DQ$kf1gI<|R#z9W)O4OBbxBvRjO
zP#Phr!+Y$#Jt!h+ZiOR<lIrMQl+oDAY6s7wCPe!g3=^|b67>X$i(c<T5rZA3(OLEm
zPEg|La22xfMc&C<l$Q?0*sl14C?bu++qZ+#WQrT9o~=(MOO_gz)n<n>OU+voG4n1d
zORqo)$pVg;!5(WF_%oy@kK@lv=8AoM9!D%_!;)Yp1Aq4PqyXodSM1~S9B9)auBA45
zn9FI;{+DOJLiiLRKAI6J-S;rpH1h4~WXU&nS)Ki<GT*YlNW`*7=)lGZ_=g%3KyPI=
zS3>6!QLzg2Q=qN~#;Uc@v@+AYl7&SUzlsBtM8h#{5;a4q8;yonZ0bdlK9}T-WR=dv
zRw+OwQyG9tdCis3xkMBz^3zX&x*jU6S__eXC8l{L3+`s6Utvcg(Qr(gM9om@Mx)^s
zn|hI?&m}n{S*3Ha^$XC?^ar3{UUMaME)m6w{Pa_xu7`fB)<Wc8iD_QRg1g!8SJ;tA
zG#t|=Q8Sdf(P((Zrd}lJb4kufR_R=9L;%8&0REd%R&ynEE)m7b(EmO|esw(%tJXr~
oUx{g6$%4B{{0ch~iH2j^Bx;6IHyRDE*wl+8eJ;rv$ts=8KbI|yR{#J2

diff --git .idea/dataSources/3140667a-2402-44b0-8f88-34422ce28e0a/_metadata_/metadata.keystream.len .idea/dataSources/3140667a-2402-44b0-8f88-34422ce28e0a/_metadata_/metadata.keystream.len
index 1b1cb4d44c57c2d7a5122870fa6ac3e62ff7e94e..71989fae04bfe99bdf626101b79426237b82717c
GIT binary patch
literal 8
Lc${Nk00Tt;04V?>

diff --git images/bi_entry2.ico images/bi_entry2.ico
new file mode 100644
index 0000000000000000000000000000000000000000..4e04c60e2e4345874beef7dad160d63f4f3d14f9
GIT binary patch
literal 8522
zc%1E7dr(x@9o}f0J|{CxrtLIsr?G9?v@<51PSR<|PTRE6Xli2;qiLd5W0NK}V{A-g
z;+QCE9(Z}F5fxCQJVlU)@-P*MfIL@uL>GAp3oN_r!amst>@Iuyoy%UlT+ZFStJuGK
zm>)0;v*)|te&_f7e!rtq-GQ(9^HunMpX%XxD%H1CD%ArByrg<THTk;S;vTz$L>PXA
z8(~El5&ej6ga*-!Xh2jU$`Hkfe8fpaD&hzt5s`q1M(jeoi+BsM39$jO9<ds+0<jFS
z1o212ZxN3m9=u7+E)nK|Am+9p=6Xc62y>nc<~<=WuM%Ni9K^gJi20%a0cOf`b`Wz4
z1M@Z!=2sa!OEKRp&r)r4i7>OYAz-FF9~5EUDdAbb9E#`Jz&yafEah3y28(AF=G)2h
zPzavSE8tm98&aMh<!(*SJ_crS-l*r;+DPNV=M9SaMF!^C;8{3>V$4%Kch{XYk>DEX
zYqRYA%U!t&cz&J1^OM|-TsLcZBj=sPrnZVKhq1fa-BnX)IkN777GO4tF&}^B7e(Fm
zMV<J+*5W;D3S@XziutB^PF{1ryZOwaG2gf+Kyi(Z4EhZ1YFGP(Q|2Qt{%i*3PyX@H
zS&G>@*likjIXr&vm>193{aMn#v%+8&Ya?P$iCgj|QuNVkV(e}S5Yh5`#{(4eU|YRQ
zeLBIA_}q6dOEDi^|MN2xvqjfsa@mF*6tnm}hP9fu>f_s!Ikpc<F^APg+>$SoyzNgB
z?d388UP&M@4KlGAdVFmanU0D>oAs%${pwoG!nqAn%=@3dI~RYi?5H|@#oXVnmtqz#
zJXcFYHWw?>hLATD^L*xm=gGj8i^MZ(oqFGK_h>-h-so>FIpQvj{ku8oZ$Hw8I)hv=
z*ByIlepXrHrjqumTs64WjyY|1IqY=VhqP)gf?OB>=dTiQLo5TGWWw*``L!GSNJn*E
z;6lpV-t>*Xal|gZQ(Pm7F&ibArS(R9=H}lg*JXZ~-=qGt#-i)&gwCxj+`%&_#w^Qo
z;jR_Lc)gX!>Kh*;{Vf;B`Tehv!>jI-tLvuf4F#B|<+@XEFXArc?Mv-%tt__<^=iBx
zr&)wqQGQN*?p|`ep@ip`hE7vU3Zj;igr#4Xt2d_Aq72O0Auvy?>u`3qLURY9y&|0L
z76xXfHcI1OBBN%*<e7jrilf&^eK2HQ$I!F5-U#R2Q$C11wLvM*G)H(nE`HCe|4AhW
zp8a;XdZQcpLbLzrdp?hU;wz0(%rT4Rp5mtaV7vtL7EXDM#N-({lmsRw_&saW-zPY0
zvUMHunC{ri5BBA~w@h1h;Pt-bH9u~aVoqH7o&4-Ai;7NccsLusr*M(g8;Z^#J#zx)
z#+*2E_=O)3ZsD9s><j1mp=)>Y+WYOmX{|pQZPzxHxrVx$+#S`Y&G7CSm<8|dz4U2E
zOHop7`N4k`=4@SZG->s`7>@0O0?$Hz4(ln7VIA>~x%oY@7b*LABguO6QIfG~0l{7q
z@LaF9sodxHd3l3zm<A@jyDC@CyLrqw8z$s=7xfgoso#kItG#%9M@IgRXW~-U{q!9f
zZ78ZY+ADKVL+E*~=}&M-;9-0&aapG*<QMWvz-bxs4{B<i)t|hl+yB(vYANQFwLdAO
znBkejZu`in)CWh+`a$jG^X2s?_avSDaMgBr&nuDgoFDZJ!M?<*@1dTDaPm2iwT3#I
z#!)K_XKnsNZ{o^(uW*menUSC2|EH*)fvE;LtT&W*yKJUD_-^sV6H!rI1U1s$C-0&f
zAaz+E5$KPghJy$8-*{iEDWECK7%$=0*^j^aOT)fp-{|2K<mZo<fAd88rUe;P&z&^|
z4bY%L7Q5BdDd9P+cgH^dMZT6x{pTaR2SU5Fej)W)(ShtO3&#%r^?UZ1MPFcf3d;w@
zeK((<;ir3Zw=F%4&nUB}v9!`@Hs~0bBkog>8;GVngRkf4xuj<?=-sS7MU0u{DQVpF
z9#+V8+fa}1DA>6on(Dd#^U6}UZCJ~|9Ja2bK3$jb0dd>Sh!LXBO$d6+99G{Qu11o2
zcf1%gC(6&LwKo>;S-X{?=de6yzVSPvzt+I-OMj+q{57+;V(@$`^~NpDH=whrnge|v
zf!{HGFo?Me`o9K0q5eH1*U`Me&75zDeUN&$Tt6tS`DM=_db_EbgXU{d%`uH<<X!`E
zssYb9gnC$yGtex>oV5Cf1+-5ojagp;|4x(9hJaaaRuERteJ!6MC;Rz*;dy+{KJ@(e
z!S_8r<O~mLMrUJAtP4KlHgu>xhK@^aJR8%yg&uZLQ`g(qT+vSZl$x|%Mex={sh&kV
zujC?}$>6>Dx`QrwGhge~rtc=`)h5uZ_{{?y6O;9|pTLK`)VuMz8D~h=yU`08ai)16
zgoiuuw;tN3;Mucswm$KG2yH0Rv!*Paz?1oXDK_*ze7>WeC|(q^$6@yCu3mJWi+@=g
z`}m!W+>JR>2_hfb;Jq9Do!R5C%<%3pr`={5?CPL>3j8ajVCS=MhQKV#Gwq|$|4(UJ
zSVFxgte(bmo|A9=NymkreepGae$?`_J?e9sP~MGN!2-{{Li-eW1J%9aITAi&0?qLn
zu?=a7&Cm<pjdY$tKko_j&u;X&Cho?JQ9S3Tb5Xe&BcC@a4!x0My58C;hn+6)HNrT9
z^4^VFnc^<oy^`;>sFr~fJ~%I256ha1N@uy^yzy?;(QU^@`mSAN;f@5eI1-kAO}0<r
zLf@y9aPo70W}kw5xzDP<-Xy|2+xIEVxo8NU#oo=Di%z>wxm<8yH#d9tDWU2Ox%qQA
z?`HK@iu)9WJli;BcWuJGRj8S{lD<14J<DL0@*Jt2mE5N&?ybUv+}#9A8v<t59gq^9
z#Wm9H&~v!^6xn$lr|eGiR<#jw#>l`dH~W&iA7p9ccH99e(Q`PS6=_5E^8Wv8R@Z+4
D9+2Ve

diff --git images/bi_entry2.png images/bi_entry2.png
new file mode 100644
index 0000000000000000000000000000000000000000..d2eecdf5efd1557f13b58a28e3045136a06f0e62
GIT binary patch
literal 2633
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

diff --git .idea/dataSources/94484664-fd08-47d2-9dfa-66ccb3761007/_metadata_/metadata.keystream.len .idea/dataSources/94484664-fd08-47d2-9dfa-66ccb3761007/_metadata_/metadata.keystream.len
index 1b1cb4d44c57c2d7a5122870fa6ac3e62ff7e94e..46c9f3e668ae3df7c3b4d3a53011a9d08d94afbe
GIT binary patch
literal 8
Mc${Nk00AaJ0012T6aWAK

diff --git .idea/dataSources/3140667a-2402-44b0-8f88-34422ce28e0a/_metadata_/metadata_i .idea/dataSources/3140667a-2402-44b0-8f88-34422ce28e0a/_metadata_/metadata_i
index 12f3be4dd3b5a2b5146f36630acbf7e99e490797..6db87a573863d4c19bf76a1f95dce609373387cc
GIT binary patch
literal 32768
zc%1FdK>@%Z005zL<}i&#7RBhs@B;~GGy?zt0000000000007=NwZ4D9ZU6uP00000
R000000000000000bpb%(0Y?A;

diff --git .idea/dataSources/94484664-fd08-47d2-9dfa-66ccb3761007/_metadata_/metadata.len .idea/dataSources/94484664-fd08-47d2-9dfa-66ccb3761007/_metadata_/metadata.len
index 24095040dfdacf27b7a8c408d735b3512ae86fdc..3e822dd800c530e797c2ef209ce7ee551c547e37
GIT binary patch
literal 8
Mc${Nk0D%S%00B?{$p8QV

diff --git images/bi_entry2_.png images/bi_entry2_.png
new file mode 100644
index 0000000000000000000000000000000000000000..1ae89e49197318424add285dfeafc0d90043a3ef
GIT binary patch
literal 2290
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
M07*qoM6N<$f|lk}l>h($

diff --git bi_entry.ico images/bi_entry.ico
index d53c6e70d37e8c75f2a83be3fdc28ea70609813b..d53c6e70d37e8c75f2a83be3fdc28ea70609813b
GIT binary patch
literal 8522
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
OlQ*cB_y0dOef|ZTp4MFe

diff --git .idea/dataSources/94484664-fd08-47d2-9dfa-66ccb3761007/_metadata_/metadata_i .idea/dataSources/94484664-fd08-47d2-9dfa-66ccb3761007/_metadata_/metadata_i
index d8b2b4f92fc3edb125c6bef8bfb7dd021a019f81..5b4063c97a7d7bc289cc353b4a5d1902185a1c17
GIT binary patch
literal 32768
zc%1FrAx^?!0LI~WvjEA!K$?zXBvRNo2{&Q;nkO(Dbc_oaWuwp;1&aqD5tv!ez~=vB
z@;n!Ke<yg;&P@OS&hS{0`SyEQy8{3KsOPpM-NX9S*x>Kpax>{Pwg&+4&x}g)^#1%&
zy8{3K000000001hztJj5Z}s(1y8{3Kfa`QulGo$sqIL%WaK33t=5PI7?G6Ag%eW-7
YmERfw004k%bzhR>e(+Me0|20DKlG^@=l}o!

diff --git .idea/dataSources/3140667a-2402-44b0-8f88-34422ce28e0a/_metadata_/metadata.len .idea/dataSources/3140667a-2402-44b0-8f88-34422ce28e0a/_metadata_/metadata.len
index 1b1cb4d44c57c2d7a5122870fa6ac3e62ff7e94e..60e2d8aa9e10da6b90c32ba9742bd89d145b31f8
GIT binary patch
literal 8
Mc${Nk0D%S$009sHi2wiq

diff --git .idea/dataSources/3140667a-2402-44b0-8f88-34422ce28e0a/_metadata_/metadata_i.len .idea/dataSources/3140667a-2402-44b0-8f88-34422ce28e0a/_metadata_/metadata_i.len
index 1b1cb4d44c57c2d7a5122870fa6ac3e62ff7e94e..131e265740f37d77b7c4a3676d2a7704ca3e4a29
GIT binary patch
literal 8
Mc${Nk0D%Su009U9fdBvi

diff --git .idea/dataSources/94484664-fd08-47d2-9dfa-66ccb3761007/_metadata_/metadata.values.at .idea/dataSources/94484664-fd08-47d2-9dfa-66ccb3761007/_metadata_/metadata.values.at
index d1ceed9964d3d75f083929b6ada76ea97de8f64d..ebfd25b20d899e2f17147f670440a6bfa12e9a03
GIT binary patch
literal 445
zc%0K`@JLNeNi9+cN=?o$N>OmjFH#6dEh^3|E=kQR@klJr@J%cTOUx-v4KB$qN=#3c
zVqj)uU|@`|<w^R;00j+DEXTmiFhRrSB#_AjRC5G~k2Cl)Si{s2(!2S<;)M{sEK7iR
zIkH}m{7j{Picon=Ahto5f9v;{3nI_97>Jjl%g>o7qy~{^0-Dc+VZQG2Pq|S2zCav+
zE?;W1y#ON5ycCF6pv%{D@4XK7JJ5fOU$FVT$<vD!-S2QYFO@U6<R)%Ce*;|(05`Tm
AQUCw|

diff --git images/icon.png images/icon.png
new file mode 100644
index 0000000000000000000000000000000000000000..b14297cc439ae718c4cf1455abf13ad14bdfd0a3
GIT binary patch
literal 1724
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
SGY#MX0000<MNUMnLSTYxlPTN)

diff --git .idea/dataSources/94484664-fd08-47d2-9dfa-66ccb3761007/_metadata_/metadata.keystream .idea/dataSources/94484664-fd08-47d2-9dfa-66ccb3761007/_metadata_/metadata.keystream
index 06d7405020018ddf3cacee90fd4af10487da3d20..ba78b017b8fd01d78992b428a44d849c461febe3
GIT binary patch
literal 1024
zc%1FdF$=;l5C!1Fq82KO;E(BSp;N>{N;_ZMGY!N<lGNXCz@cl?Rp0!+ySIVt_7Jtj
zHz~4^4(PE%N01Dift~9|dLkr?T4zDNK_!Q>ZOA%lH0-UJywtSt!cl5R*0Xz&*W`RG
zKZF6_4l^PaU*_Le!rtgL3%2~FWVA}dZqD+mT?u&+3r_)-DAi=CLO;6M|MOG%02;oe
A%m4rY

diff --git .idea/dataSources/94484664-fd08-47d2-9dfa-66ccb3761007/storage_v2/_src_/database/MfgTraveler.NREzFg/schema/dbo.sYMBAA.zip .idea/dataSources/94484664-fd08-47d2-9dfa-66ccb3761007/storage_v2/_src_/database/MfgTraveler.NREzFg/schema/dbo.sYMBAA.zip
new file mode 100644
index 0000000000000000000000000000000000000000..bd519965be9d0e85574bda48294040affa3a0d02
GIT binary patch
literal 11209
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

diff --git images/icon.jpeg images/icon.jpeg
new file mode 100644
index 0000000000000000000000000000000000000000..7a51172f1a4a67da21bb4375a39b12780f6de3ff
GIT binary patch
literal 1648
zc$}4#X;4#F6vy97-XjP}crO72ia-J=DiBbR4&YGA7C@1(h)@B+PzoXvH(ZJsiUkc@
zqAZGxWvwhNiv&=q5Wy`VvRanZ1uKgbAwhwnl)l)CjvqSHbMLn^_uk+6pYy*<{Yy^(
z#Ld~&82~{LU}6hc8Uh>uJPs${SU}i@6=4{HU?l=UL6N9LBq}Q@E0f3+ghWQk%F2j3
zf>Kr0)YOP7D>c+rH7KfTs`5)fJaz_xSHSQJRgyAE^?%3GO#oE{OaK!+hypki#G~L+
zE1(5{0A5bJ910LY5f8u1fuH6e9IOE1fu%u!hz9{2f=2)V{Bf?~hUA6Ju<Bv2+b$>e
z=AcMfaot&+g-1bUXVRNu*F+x3E;g*q5&N)D{v|71r!bqFSkSqLuTx}q&0GJoiJDnq
zV0!VW#fSrL-Ig%ktY-AP%X&NA*-r5o#VQ2AwEGwX4*@VvVFO4|!$1_V1PJ32#+gN4
zgbTGBYpX0h$}0u=*6!|!Z!d%Rye%pgjN|?sPT^>kO@(Jx+Pv1ELE&Obnc2(?H!*kB
zv}t^>Lv#Ocquj-~C>6Z;57c|@tMZUx(yeZrz?vEj(y4?mX5el<vxs1a(dc2?$pimE
z6cC4ps3?tMj?nGj0b#IqAWAWC^dkva4wdScDi$-HbB%|M(u#Z3D@Cdg0?#-#q>V@M
zW_NeLsIT@K8M0`Y)rZ&Y3lmRS-An4|=y-bx@<wub&(RK{^6KayM}|PHJ9OTW$wx5+
znj8UyK0!bs3Y7-a5%Yf-aB>Dsy5sl$mOHike|i{H@7HaT_uB9Lje9e$YtZs0=U}p%
z#7$V1EOm|3%I)h5BfnNGI#6m$l#$&oc_q1M4Sg3_&+Gl_u(5!nX;f;wA;>!WF}pT{
zH6XZeyJPH(Zi@jk;{k@l!1{x|4@1fy(Eu0@4WZIEaP`gYS+Jg0D2HEAE$VvuZ^snu
zaD$sfr#vFGdd=n~^C?WNf!yf``pxE{loY06Qf6c1j?vUB>#KUK@?xAHZ*Mm>Si3(}
zY;#|i`LskbbxQ0}gu2z-6?}dA>ap!~U%sklu!FSZ0A0IaA!@RMnS8EE$XP6%YfFwc
z)y@`{*OAHNS0|_$u6rk9gFA%&){jHms5!p}Iw&c&C1pQ4X!WK$G$m#qus*6}@O2@Z
zmz>qBt0OFPlG!!+?8Qo?%S(hn=!4>zg)pUAv=A;opVKw{eh%$uStAzaB|hCf6=#PT
zN2u(>l%#g@z82cv77n={AccFLONtlT?0;AX`Q?y*&~Fd$d;qyWE8F?<%c%r*l~#@n
zjPGitgrqeG2u{w%6zz#Qx!r`p0|$-nH3Z0rLBy~i1yYLH=gh@j=9^1c8z<3xDQhUF
z^LF}sO9FC6gavPkcselT?=kVqITwb!0u;+(UkHBLMIc~~((Ji<EKW7jH7!~mTqJ9(
z?{wtuYn6;=3K3OvZ_basV4RRn9?wihFK)Ca-!Vh3@RR&vCE!`FE23!IaSPuD(kqEe
zMZH9lQeigF+=P6aE-`DdoocUCk+d~0wpZS|W*Pn;2pkr-T7>9z<uA`IlDTkP+__qC
zUFWuCgY^kVQNb!}j#VXPI+!EaW7%uqu{QCBRAzA`x%p7`#n$lDxZ%iRt5$c<ngUHH
zoz-22!}@pcWTa91Z{>$Pi|$d$>`A@u_WZ9C?r;6Zr{o^iM?krQ@E`gK0w~Sg9$|6y
zLO3FRe)V!ckyj%JZyI<V@qPkJ$%ZB9OM*!M=(gdkn3aVcAtX~zU?2~;Dit@?9BN@?
zO>1!L@(|veo`gCLQp<&Jm;t{!G<s4%UtK~ilZ_i&$+He0wN~UC9c`>H6~+$s`H+s<
zk6K;6bAO^y+ody_x_-v8<xl|R5vSk2bz5(h#;{kbSXwbB(c4<v&CKWdPFfjHHdR;t
Myl||;Ieuy2Z_$`t?f?J)

diff --git images/bi_entry_.ico images/bi_entry_.ico
new file mode 100644
index 0000000000000000000000000000000000000000..74b3ef999c56768ff993e7224daabee8f6a09852
GIT binary patch
literal 3606
zc%1E3X;@Tc6n;m{kVL`-%O%mma0s)-Or*qepb!WV1kuD$(j<`xQE*|Ab$|heVJ?rN
z5sBy^vV~YlA-im;4-lXzf{4j3BFNeuxZvCwW}JNb(GSmk-g}?#o^#&sz2`gMcL4@@
zX={VLD*{siH2|6<$XBoi^<Ijx*Dy#-0Gp+NK>djbGMI#5!^z+nDuJ_B2_Z&PNGK!3
zSQ()vDhM-G1$W(aaLr~QeEm%D%+*NDLWJdP@Ga+nZ#5Uh#(5yD=i{i229DV*Ley4G
zMA<IJaa$%%*eyZyj-`m%wG1a6bP&5|C1M?Qamr~G&ba79u+IPq2aQRXAko7NNuK6N
z^0Gj(*9IgXu|$fu6;gaQBGq>jQvEg~Ex-on18tEWL?U=QE|9p$b3hu;85w*>WFB=v
z=CS>_6eWZ!vQ8X8_78`U9eo%%(eB9k(F3_Lp2+>l3wbBKkr(TY{8%64$N8Zk&L0J*
z1915an?xWA1wkl`4@S{h4vG^(QG6~8C5c=T;V4Psp)@%Hr73*;nL^-d`f*$%QTA&L
z$}?h7k#PzYzY7tE%B-`f%1S_0_BmANB;tB*GH&Fj;zq&Gs3}N8&E@l`DNM)BqF+#3
zauK(${DHbFnW(#Z3H8^qaHlL6cgpk7P@a#53Ly&6SXqR|s$w)&m*C#@QZ(HvLsM-z
znrkc2d|QaW&{9{4*7|C+-K`;U6YY(+(D8R29^9`-XHx?@oA08tr4bKX@1d*hKDyeQ
z@Tj8&-49yP^RS&n2YS1^(A)C}eUH0I^q{|2h{x#f>%~BSABlbp4h&#$a1cX7LsI+h
zx&7}gau}kQTtVbDYX6R1O1uR7$P9Q2zufxAWtK<3WU72Jp3Lx{=$EVh3iEWf9}46V
zM3B4FrdMqV!gcO8SD#Q~%;@@OuH1FlpTpzR;@w2!Y5Y?@-4{Z=m&HFuuj#_$`|q~4
zFkQFaWX+0qBZcwPKUllrOFO%rJMHZq9i5$N{96ME-!0m+CM!^5VZ5yRdxa5SEflGc
zFkV*uL-@pJN+Lxaj+aq?UoN5lqDcMe{F3$G!501!>HM<#{~b5p0mB8;CQTTbL4ser
z|6evf$no6#;ZiN8mgb^2<|_%~UwZwm_m{8GUG)je$mk0_vHqE+=j6v7Tdzoo_4SqL
zpE;{N=<6FPy1u^R{Xg5lohzds#QA4@emKnAa@pHjT8l;WzqedR_v6(pmZbhA-}61p
zUYk0RAz%Gr?n8XDK>qq;TQIRjSz7-*nPDvcTOMJfB7gtDjzjFxpxDLMcii*G<OmV)
z^_yxhFhupsIDa&DNATJ9R_12I`%6_~f9>5%=U4e?f4Ic{b(6Y(fmd|D^9<xh(E7(!
z>iIyLqPn4j54q3eJAXuNoDY3|{>uoGTff}@U#V4kHvOs=rosnXkk~UkW?5JXA51~~
z1yR31&^F??81XL@{MIvWK43*XN5{i{#nCa9ug;|B`!nhDYci?%!JzUPBYr&w#ZQeX
czj(enGoHqOnn~9$RUf7QnZKVk>KD!b2P?sFC;$Ke

diff --git images/icon.xcf images/icon.xcf
new file mode 100644
index 0000000000000000000000000000000000000000..0e019afc8c8913ee58972ff18e6adb6ec640371e
GIT binary patch
literal 3568
zc%1E3Ur1Y57(daN#8lh0&ca-`T^JiWurm+tMd?)5qR>WgRVbFRBu(N4lZgLN;@DaS
zix!LzH4oK2wC+##P-QS3qlLAGZYdk|WoBdPEa+xqM_UCG+a%4|IrpA(@40^{d)m`3
zoZQ3redqgr_xJt26EE-U<3?N_&cpY*0eWi5!q0xR3<mU5ftICZ3IM#&^E_Hcv|dE(
zAlc)%O7waQz018QZLKTd^SS+lfH?62&j}vh=kU5~z5V<d;xvHjfx*#UH#ZRI<<Hbu
zt36&<pf}LZRSU1$ey`KP)g7)A9-WPiY--R^r_NEEI#9d8M@I(w94_AP<!m%FGLGsQ
ziLG|X&ku6E-__$Dz~=)V&wzW7V^3>MqD6TW$dBO?0Hz7X@G4p_5CV(aj$)IEkPdNU
zm<E)RJ$?=`dn>cw!|cnLeL1t=NAi}Cvu4Ieo6le_I<A6>{6+68ZAE=TBzOfH00#>I
z%0FgU0*c{2V1%X5d|OBy2XPv8Dl;@8?_LybedgOj;*N?Z4J6(FsQxXg&9a8`KcpTP
z;7&4jk^2n7ICn9Y+<_M4PrV+DuWx6cLaj3kDnCf%pb>6sTpQrT&8LN}8<#Fjg~x-w
zt^?S4pvxB=4_m@%Ftq_6e%tY~#ej5`!!EEFWS4f~k0+2wCBt$a&R4RAZ!+*o1#5_;
z;P;J;A=CYHVeLYFMG2eu-l2)rC-*+}oqD&!e(Z?Nip^Hrkz@7_Q%9i*O<ArcbT<o&
zHJ@REg*bK_-#ELb>)wq6Q1#JIf9oIqGY$?;{=U2Z<?wr*9oo`6O~CnU{<rguRi#B}
zEJd{CAp6}G{Jaj$y=1tbg`Zei18UTGIcxaq3H<tP#*kTf2=8Ax^;%gmlX&CgFZsfQ
zn_onx!rGSP_J6$c7?$XE@}<%1s}FYb1sw$-c^K<P7XR4J>o}SJ9(<FTjyp!({o<7&
zKL6F7M<2aAuZnRukqt$S{N|HNn_2jO`_Q~;K<gc}CicM9eELyp?as>WTg%s$7QVVX
zI~^WB7aR)oI8S%lTbmo|--K2alzFtdb|-N=zI<(QA$oZx5*|N0MuS=!>JQVPb(Bd6
zk~8tn?#}ksmPRpCE`!SnnU-*->2T=W*s!`>TFgW+&EQOOxkehawMl?4&PV5FnM`sy
z5mQ2eX>7<Z1hq-P(;}u@%UAK&%}!5Z;C=#JK>>>?Bx35unHpsZm`pR%lOYP6!GykU
zEr~M4t`bZ%Q<t3uo|4EUm`FK$TMNUJSWd(gL79RiNCKXdgOn6>Grh}Yw!{X<Xj_O1
zy1Ux-+9G`&;;F|$8Z1+g#EcUPgtm}!%`62plY~hmQ>7;c_+*GGlL;d7MZi(HIiZ{u
z6DdbjAn=5w!Yj*3m`Gbh#(4#q0tLy0+!g}daavW5_HLe1AnM7kQl@(D)XJpO5@SW@
zR}BJHrb<tkg0^NwCOIgAH9jnpDM@9WQ9*>Lz@cu7PVZDa$rr{F<teBZU7l5DRBSMv
z78!VYD<!BPCi6t(+pfBwR^+)8Dc~JMbXwqYIbJ)Qbflt0DzuzZPg2nAv>asD-YPMX
zrwBuVG{HI27EzgVir%#<RFF(a%8W?EsiFWYQz#cz+?lH0CFPNl?s4@X5EU%a+gESy
Vq@ekzLIskZ?rInh%Zv+m=0DRxJoEqn

diff --git .idea/dataSources/3140667a-2402-44b0-8f88-34422ce28e0a/_metadata_/metadata.keystream .idea/dataSources/3140667a-2402-44b0-8f88-34422ce28e0a/_metadata_/metadata.keystream
index 06d7405020018ddf3cacee90fd4af10487da3d20..b60d89ea5a4f004821c3f56adab7905f7adc6995
GIT binary patch
literal 1024
vc${NmU~~12cPuDi;7Ca<NlZ#CPGw+DNy=wnD^AWx%}rz&1*2dT3|jyIf=CGm

